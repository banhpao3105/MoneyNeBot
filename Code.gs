var token = PropertiesService.getScriptProperties().getProperty('BOT_TOKEN');
var gemini_token = PropertiesService.getScriptProperties().getProperty('GEMINI_TOKEN');
var main_sheet = PropertiesService.getScriptProperties().getProperty('ID_MAINSHEET');

function getApiKeys() {
  var keysString = PropertiesService.getScriptProperties().getProperty('GEMINI_LISTKEY');
  if (!keysString) return [];
  return JSON.parse(keysString);
}


const telegramUrl = "https://api.telegram.org/bot" + token;

// =================== AUTO WEB APP URL ===================
function getWebAppUrl() {
  try {
    return ScriptApp.getService().getUrl();
  } catch (error) {
    Logger.log("Error getting auto Web App URL: " + error.toString());
    return "CHANGE_YOU_URL_APPSCRIP"; // Fallback
  }
}

const webAppUrl = getWebAppUrl();


function setWebhook() {
  const url = `${telegramUrl}/setWebhook?url=${webAppUrl}`;
  const response = UrlFetchApp.fetch(url);
  Logger.log("Webhook response: " + response.getContentText());
  return response.getContentText();
}

// Function ƒë·ªÉ set webhook v·ªõi URL c·ª• th·ªÉ
function setWebhookWithURL(newWebAppUrl) {
  const url = telegramUrl + "/setWebhook?url=" + newWebAppUrl;
  const response = UrlFetchApp.fetch(url);
  Logger.log("Webhook set to: " + newWebAppUrl);
  Logger.log("Response: " + response.getContentText());
  return response.getContentText();
}

function formatNumberWithSeparator(number) {
  return number
    .toString()
}

// =================== CONSTANTS ===================
const TRANSACTION_TYPE = {
  EXPENSE: 'ChiTieu',
  INCOME: 'ThuNhap'
};

const CALLBACK_PREFIX = {
  EDIT_TRANSACTION: 'edit_transaction_',
  EDIT_ALLOCATION: 'edit_allocation_',
  EDIT_ALLOC: 'edit_alloc_',
  EDIT_SUBCATEGORY: 'edit_subcategory_',
  EDIT_SUB: 'edit_sub_',
  CANCEL_EDIT: 'cancel_edit_',
  SUBCATEGORY: 'subcategory_',
  SUB: 'sub_',
  ALLOCATION: 'allocation_',
  BANK: 'bank_',
  VIEW_ALLOCATION_DETAIL: 'view_allocation_detail_',
  VIEW_ALLOCATION_TRANSACTIONS: 'view_allocation_transactions_',
  VIEW_SUBCATEGORY: 'view_subcategory_',
  VIEW_ALLOCATION_SUBS: 'view_allocation_subs_'
};

// Global allocations array (s·ª≠ d·ª•ng cho to√†n b·ªô ·ª©ng d·ª•ng)
const allocations = [
  'Chi ti√™u thi·∫øt y·∫øu',
  'H∆∞·ªüng th·ª•',
  'Ti·∫øt ki·ªám d√†i h·∫°n',
  'Gi√°o d·ª•c',
  'T·ª± do t√†i ch√≠nh',
  'Cho ƒëi'
];

// Global subcategories object
const subCategories = {
  'Chi ti√™u thi·∫øt y·∫øu': ['Nh√† ·ªü', 'ƒÇn ngo√†i', 'H√≥a ƒë∆°n', 'ƒêi ch·ª£ si√™u th·ªã', 'Di chuy·ªÉn', 'S·ª©c kh·ªèe'],
  'H∆∞·ªüng th·ª•': ['Gi·∫£i tr√≠', 'Th·ª©c u·ªëng', 'Nh√† h√†ng', 'Mua s·∫Øm', 'ChƒÉm s√≥c b·∫£n th√¢n', 'Du l·ªãch', 'Th·ªÉ thao'],
  'Ti·∫øt ki·ªám d√†i h·∫°n': ['Mua s·∫Øm nh·ªØng m√≥n ƒë·ªì gi√° tr·ªã', 'Nh·ªØng k·ª≥ ngh·ªâ l·ªõn', 'C√°c m·ª•c ti√™u c√° nh√¢n kh√°c', 'Qu·ªπ d·ª± ph√≤ng kh·∫©n c·∫•p'],
  'Gi√°o d·ª•c': ['S√°ch', 'Kh√≥a h·ªçc', 'S·ª± ki·ªán'],
  'T·ª± do t√†i ch√≠nh': ['ƒê·∫ßu t∆∞', 'Kinh doanh', 'B·∫•t ƒë·ªông s·∫£n', 'G·ª≠i ti·∫øt ki·ªám sinh l·ªùi'],
  'Cho ƒëi': ['T·ª´ thi·ªán', 'Gi√∫p ƒë·ª° ng∆∞·ªùi th√¢n', 'Qu√† t·∫∑ng', 'ƒê√≥ng g√≥p cho c·ªông ƒë·ªìng']
};

// Global createAllocationKeyboard function
function createAllocationKeyboard(transactionId) {
  var keyboard = [];
  
  // T·∫°o h√†ng keyboard, m·ªói h√†ng 2 button
  for (var i = 0; i < allocations.length; i += 2) {
    var row = [];
    
    // Ph√¢n bi·ªát format cho transaction m·ªõi vs edit
    var callbackPrefix = '';
    if (transactionId) {
      // Edit transaction: edit_alloc_tx_123456_0
      callbackPrefix = 'edit_alloc_' + transactionId + '_';
    } else {
      // Transaction m·ªõi: allocation_0
      callbackPrefix = 'allocation_';
    }
    
    row.push({
      text: allocations[i],
      callback_data: callbackPrefix + i // D√πng index thay t√™n
    });
    
    if (i + 1 < allocations.length) {
      row.push({
        text: allocations[i + 1],
        callback_data: callbackPrefix + (i + 1) // D√πng index thay t√™n
      });
    }
    
    keyboard.push(row);
  }
  
  // Th√™m n√∫t h·ªßy ·ªü h√†ng cu·ªëi
  var cancelButton = transactionId ? 
    { text: "‚ùå H·ªßy ch·ªânh s·ª≠a", callback_data: "cancel_edit_" + transactionId } :
    { text: "‚ùå H·ªßy", callback_data: "cancel_new" };
  
  keyboard.push([cancelButton]);
  
  return {
    "inline_keyboard": keyboard
  };
}

// Helper function ƒë·ªÉ t·∫°o edit keyboard
function createEditKeyboard(transactionId) {
  var callbackData = transactionId ? 'edit_transaction_' + transactionId : 'edit_transaction';
  return {
    "inline_keyboard": [
      [
        {
          text: '‚úèÔ∏è Ch·ªânh s·ª≠a',
          callback_data: callbackData
        }
      ]
    ]
  };
}

// Global createSubCategoryKeyboard function
function createSubCategoryKeyboard(allocation, isEdit, transactionId, allocationIndex) {
  if (!subCategories[allocation]) return null;
  
  var keyboard = [];
  var subs = subCategories[allocation];
  var prefix = '';
  
  // T√≠nh allocationIndex n·∫øu ch∆∞a c√≥
  if (allocationIndex === undefined || allocationIndex === null || allocationIndex < 0) {
    allocationIndex = allocations.indexOf(allocation);
  }
  
  // Validation: ƒê·∫£m b·∫£o allocationIndex h·ª£p l·ªá
  if (allocationIndex < 0) {
    allocationIndex = -1; // Fallback to old format
  }
  
  if (isEdit && transactionId && allocationIndex >= 0) {
    // Format m·ªõi ng·∫Øn cho edit: edit_sub_tx_123456_0_1 (allocationIndex_subIndex)
    prefix = 'edit_sub_' + transactionId + '_' + allocationIndex + '_';
  } else if (isEdit && transactionId) {
    // Format c≈© d√†i cho edit: edit_subcategory_tx_123456_AllocationName_
    prefix = 'edit_subcategory_' + transactionId + '_' + allocation + '_';
  } else if (isEdit) {
    // Format c≈© kh√¥ng c√≥ transactionId
    prefix = 'edit_subcategory_' + allocation + '_';
  } else if (allocationIndex >= 0) {
    // Format m·ªõi ng·∫Øn cho transaction m·ªõi: sub_0_1 (allocationIndex_subIndex)
    prefix = 'sub_' + allocationIndex + '_';
  } else {
    // Fallback format c≈© d√†i
    prefix = 'subcategory_' + allocation + '_';
  }
  
  // T·∫°o h√†ng keyboard, m·ªói h√†ng 2 button
  for (var i = 0; i < subs.length; i += 2) {
    var row = [];
    
    var useShortFormat = allocationIndex >= 0 && (prefix.startsWith('sub_') || prefix.startsWith('edit_sub_'));
    
    if (useShortFormat) {
      // D√πng index cho subcategory ƒë·ªÉ r√∫t ng·∫Øn
      row.push({
        text: subs[i],
        callback_data: prefix + i // subcategory index
      });
      
      if (i + 1 < subs.length) {
        row.push({
          text: subs[i + 1],
          callback_data: prefix + (i + 1) // subcategory index
        });
      }
    } else {
      // D√πng t√™n subcategory (format c≈© - fallback)
      row.push({
        text: subs[i],
        callback_data: prefix + subs[i]
      });
      
      if (i + 1 < subs.length) {
        row.push({
          text: subs[i + 1],
          callback_data: prefix + subs[i + 1]
        });
      }
    }
    
    keyboard.push(row);
  }
  
  // Th√™m n√∫t "Quay l·∫°i" ·ªü h√†ng cu·ªëi
  var backButtonData = '';
  if (isEdit && transactionId) {
    // Cho edit flow: quay l·∫°i ch·ªçn h≈©
    backButtonData = 'edit_transaction_' + transactionId;
  } else {
    // Cho transaction m·ªõi: quay l·∫°i ch·ªçn h≈©  
    backButtonData = 'back_to_allocation';
  }
  
  // T·∫°o n√∫t h·ªßy
  var cancelButtonData = '';
  var cancelButtonText = '';
  if (isEdit && transactionId) {
    cancelButtonData = 'cancel_edit_' + transactionId;
    cancelButtonText = "‚ùå H·ªßy ch·ªânh s·ª≠a";
  } else {
    cancelButtonData = 'cancel_new';  
    cancelButtonText = "‚ùå H·ªßy";
  }
  
  // Th√™m c·∫£ n√∫t quay l·∫°i v√† n√∫t h·ªßy trong c√πng 1 h√†ng
  keyboard.push([
    {
      text: "üîô Quay l·∫°i ch·ªçn h≈©",
      callback_data: backButtonData
    },
    {
      text: cancelButtonText,
      callback_data: cancelButtonData
    }
  ]);
  
  return {
    "inline_keyboard": keyboard
  };
}

/**
 * OPTIMIZED: Only read Date column (B) instead of entire sheet
 */
function getNextSequenceNumber(userId, date) {
  const sheet = getSheet(userId);
  const lastRow = sheet.getLastRow();
  
  if (lastRow < 2) return 1; // No data rows, start with 1
  
  // Chuy·ªÉn date th√†nh chu·ªói ƒë·ªÉ so s√°nh (format: DD/MM/YYYY)
  const targetDate = new Date(date);
  const targetDateStr = formatDate(targetDate);
  
  // Only read Date column (B) from row 2 to last row
  const dateData = sheet.getRange(2, 2, lastRow - 1, 1).getValues(); // Column B only
  
  let count = 0;
  // B·∫Øt ƒë·∫ßu t·ª´ d√≤ng 2 (b·ªè qua header)
  for (let i = 0; i < dateData.length; i++) {
    if (dateData[i][0]) { // Ki·ªÉm tra c·ªôt Date
      const rowDate = new Date(dateData[i][0]);
      const rowDateStr = formatDate(rowDate);
      
      if (rowDateStr === targetDateStr) {
        count++;
      }
    }
  }
  
  return count + 1; // Tr·∫£ v·ªÅ s·ªë th·ª© t·ª± ti·∫øp theo
}

function addTransactionData(entityId, date, description, amount, allocation, type, subCategory, chatType = 'private', senderName = null) {
  const sheet = getSheet(entityId, chatType, senderName);
  subCategory = subCategory || ""; // M·∫∑c ƒë·ªãnh r·ªóng n·∫øu kh√¥ng c√≥
  
  // T√≠nh s·ªë th·ª© t·ª± trong ng√†y
  var sequenceNumber = getNextSequenceNumber(entityId, date);
  
  const rowData = [sequenceNumber, date, description, amount, allocation, type, subCategory];

  if (chatType === 'group' || chatType === 'supergroup') {
    rowData.unshift(senderName || 'Unknown'); // Add senderName at the beginning for group transactions
  }

  sheet.appendRow(rowData);
  
  // Check for budget alerts after adding transaction
  checkAndSendBudgetAlerts(entityId, allocation, subCategory, amount, type);
  
  // Tr·∫£ v·ªÅ sequence number ƒë·ªÉ hi·ªÉn th·ªã trong telegram
  return sequenceNumber;
}


/**
 * IMPROVED: Now returns message object for loading message updates
 */
function sendText(chatId, text, keyBoard) {
  const formattedText = formatNumberWithSeparator(text);
  const data = {
    method: "post",
    payload: {
      method: "sendMessage",
      chat_id: String(chatId),
      text: formattedText,
      parse_mode: "HTML",
      reply_markup: JSON.stringify(keyBoard)
    }
  };
  
  try {
    const response = UrlFetchApp.fetch('https://api.telegram.org/bot' + token + '/', data);
    const result = JSON.parse(response.getContentText());
    
    if (result.ok && result.result) {
      return result.result; // Tr·∫£ v·ªÅ object ch·ª©a message_id
    }
    return null;
  } catch (err) {
    Logger.log("Error in sendText: " + err.toString());
    return null;
  }
}

// Function ƒë·ªÉ edit tin nh·∫Øn hi·ªán t·∫°i thay v√¨ g·ª≠i tin nh·∫Øn m·ªõi
function editText(chatId, messageId, text, keyBoard) {
  var formattedText = formatNumberWithSeparator(text);
  var data = {
    method: "post",
    payload: {
      method: "editMessageText",
      chat_id: String(chatId),
      message_id: String(messageId),
      text: formattedText,
      parse_mode: "HTML"
    }
  };
  
  // Ch·ªâ th√™m reply_markup n·∫øu keyBoard kh√¥ng null/undefined
  if (keyBoard) {
    data.payload.reply_markup = JSON.stringify(keyBoard);
  }
  
  try {
    UrlFetchApp.fetch('https://api.telegram.org/bot' + token + '/', data);
    Logger.log("DEBUG: Message edited successfully");
    return true;
  } catch (error) {
    Logger.log("DEBUG: Failed to edit message: " + error.toString());
    Logger.log("DEBUG: Edit data: " + JSON.stringify(data));
    // Fallback: g·ª≠i tin nh·∫Øn m·ªõi n·∫øu kh√¥ng edit ƒë∆∞·ª£c
    sendText(chatId, text, keyBoard);
    return false;
  }
}

const keyBoard = {
  "inline_keyboard": [
    [
      {
        text: 'Xem T·ªïng Chi Ti√™u',
        callback_data: 'totalchi'
      }
    ],
    [
      {
        text: 'Xem T·ªïng Thu Nh·∫≠p',
        callback_data: 'totalthunhap'
      }
    ],
    [
      {
        text: 'Xem S·ªë Ti·ªÅn Hi·ªán T·∫°i',
        callback_data: 'currentbalance'
      }
    ],
    [
      {
        text: 'Xem Chi Ti·∫øt C√°c H≈©',
        callback_data: 'getTotalAllocationBalances'
      }
    ],
    [
      {
        text: 'üìà Xem T·ªâ L·ªá %',
        callback_data: 'show_percentage_menu'
      },
      {
        text: 'üìä Xem Bi·ªÉu ƒê·ªì',
        callback_data: 'show_chart_menu'
      }
    ],
    [
      {
        text: 'Xem L·ªãch S·ª≠ Thu/Chi',
        callback_data: 'history'
      }
    ],
    [
      {
        text: 'Open App',
        web_app: {
          url: 'https://moneynebot.blogspot.com/?m=1'
        }
      }
    ],
    [
      {
        text: 'Connect Email',
        callback_data: 'connect_email'
      }
    ]
  ]
};
const menuchi = {
  "inline_keyboard": [
    [
      {
        text: 'Xem T·ªïng Thu Nh·∫≠p',
        callback_data: 'totalthunhap'
      },
      {
        text: 'Xem Chi Ti·∫øt C√°c H≈©',
        callback_data: 'getTotalAllocationBalances'
      }
    ]
  ]
};

// =================== LEGACY FUNCTIONS REMOVED ===================
// doPostOld function (1063 lines) was removed during Router Pattern refactoring

function addIncomeData(userId, date, content, amount, allocation, subCategory) {
  var sheet = getSheet(userId);
  subCategory = subCategory || "";
  
  // T√≠nh s·ªë th·ª© t·ª± trong ng√†y
  var sequenceNumber = getNextSequenceNumber(userId, date);
  
  var type = "ThuNhap";
  sheet.appendRow([sequenceNumber, date, content, amount, allocation, type, subCategory]);
  
  // Tr·∫£ v·ªÅ sequence number ƒë·ªÉ hi·ªÉn th·ªã trong telegram
  return sequenceNumber;
}

function addExpenseData(userId, date, item, amount, allocation, subCategory) {
  var sheet = getSheet(userId);
  subCategory = subCategory || "";
  
  // T√≠nh s·ªë th·ª© t·ª± trong ng√†y
  var sequenceNumber = getNextSequenceNumber(userId, date);
  
  var type = "ChiTieu";
  sheet.appendRow([sequenceNumber, date, item, amount, allocation, type, subCategory]);
  
  // Tr·∫£ v·ªÅ sequence number ƒë·ªÉ hi·ªÉn th·ªã trong telegram
  return sequenceNumber;
}

function getTotalIncome(userId) {
  var sheet = getSheet(userId);
  var data = sheet
    .getRange(2, 4, sheet.getLastRow() - 1, 1) // Amount gi·ªù ·ªü c·ªôt D (4)
    .getValues();
  var total = 0;
  for (var i = 0; i < data.length; i++) {
    total += data[i][0];
  }
  return total;
}

function getTotalExpenses(userId) {
  var sheet = getSheet(userId);
  var data = sheet
    .getRange(2, 4, sheet.getLastRow() - 1, 1) // Amount gi·ªù ·ªü c·ªôt D (4)
    .getValues();
  var total = 0;
  for (var i = 0; i < data.length; i++) {
    total += data[i][0];
  }
  return total;
}

function getCurrentBalance(userId) {
  var totalIncome = getTotalAmountByType(userId, "ThuNhap");
  var totalExpenses = getTotalAmountByType(userId, "ChiTieu");
  return totalIncome - totalExpenses;
}


function getTotalAllocationBalances(userId) {
  // (Using global allocations array)
  var balances = {};
  for (var i = 0; i < allocations.length; i++) {
    balances[allocations[i]] = 0;
  }
  var sheet = getSheet(userId);
  var data = sheet
    .getRange(2, 4, sheet.getLastRow() - 1, 3) // ƒê·ªçc t·ª´ c·ªôt D (Amount, Allocation, Type)
    .getValues();
  for (var i = 0; i < data.length; i++) {
    var amount = data[i][0];    // Amount ·ªü index 0 trong range
    var allocation = data[i][1]; // Allocation ·ªü index 1 trong range  
    var type = data[i][2];      // Type ·ªü index 2 trong range
    if (allocations.includes(allocation)) {
      if (type === "ThuNhap") {
        balances[allocation] += amount;
      } else if (type === "ChiTieu") {
        balances[allocation] -= amount;
      }
    }
  }
  return balances;
}

function sendTotalPhanboSummary(context) {
  const allocations = getTotalAllocationBalances(context.chatId);
  let message = "üè∫ <b>S·ªë ti·ªÅn ph√¢n b·ªï theo h≈©:</b>\n\n";
  
  let totalBalance = 0;
  let hasData = false;
  
  for (const allocation in allocations) {
    if (allocations[allocation] !== 0) {
      hasData = true;
      const balanceStr = formatNumberWithSeparator(allocations[allocation]);
      const icon = allocations[allocation] >= 0 ? "üí∞" : "üí∏";
      message += icon + " <b>" + allocation + ":</b> " + balanceStr + "\n";
      totalBalance += allocations[allocation];
    }
  }
  
  if (hasData) {
    message += "\n<b>üíπ T·ªïng s·ªë d∆∞ t·∫•t c·∫£ h≈©: " + formatNumberWithSeparator(totalBalance) + "</b>";
  } else {
    message = "Ch∆∞a c√≥ giao d·ªãch n√†o ƒë∆∞·ª£c ph√¢n b·ªï v√†o c√°c h≈©.";
  }
  
  const allocationMenu = {
    inline_keyboard: [
      [
        { text: 'üìã Xem l·ªãch s·ª≠ theo h≈©', callback_data: 'view_by_allocation' }
      ],
      [
        { text: 'üè∑Ô∏è Xem theo nh√£n', callback_data: 'view_subcategory_summary' },
        { text: 'üìä T·ªïng quan', callback_data: 'currentbalance' }
      ],
      [
        { text: 'üìà Xem t·ªâ l·ªá %', callback_data: 'show_percentage_menu' },
        { text: 'üìä Xem bi·ªÉu ƒë·ªì', callback_data: 'show_chart_menu' }
      ]
    ]
  };
  
  if (context.messageId) {
    editText(context.chatId, context.messageId, message, allocationMenu);
  } else {
    sendText(context.chatId, message, allocationMenu);
  }
}

// =================== MENU SELECTION CHO T·ªà L·ªÜ % V√Ä BI·ªÇU ƒê·ªí ===================

// Hi·ªÉn th·ªã menu ch·ªçn lo·∫°i t·ªâ l·ªá % (h≈© ho·∫∑c nh√£n)
function sendPercentageSelectionMenu(chatId, userId, messageId) {
  var message = "üìà <b>Ch·ªçn lo·∫°i t·ªâ l·ªá % b·∫°n mu·ªën xem:</b>\n\n" +
    "üè∫ <b>Theo H≈©:</b> Xem t·ªâ l·ªá % chi ti√™u v√† thu nh·∫≠p theo 6 h≈© t√†i ch√≠nh\n" +
    "üè∑Ô∏è <b>Theo Nh√£n:</b> Xem t·ªâ l·ªá % chi ti√™u theo t·ª´ng nh√£n c·ª• th·ªÉ\n\n" +
    "üí° <i>Ch·ªçn m·ªôt t√πy ch·ªçn b√™n d∆∞·ªõi:</i>";
  
  var percentageMenu = {
    "inline_keyboard": [
      [
        {
          text: 'üè∫ T·ªâ l·ªá % Chi ti√™u theo H≈©',
          callback_data: 'percentage_allocation_expense'
        }
      ],
      [
        {
          text: 'üí∞ T·ªâ l·ªá % Thu nh·∫≠p theo H≈©',
          callback_data: 'percentage_allocation_income'
        }
      ],
      [
        {
          text: 'üè∑Ô∏è T·ªâ l·ªá % Chi ti√™u theo Nh√£n',
          callback_data: 'percentage_subcategory'
        }
      ],
      [
        {
          text: 'üìä Xem Bi·ªÉu ƒë·ªì',
          callback_data: 'show_chart_menu'
        }
      ]
    ]
  };
  
  if (messageId) {
    editText(chatId, messageId, message, percentageMenu);
  } else {
    sendText(chatId, message, percentageMenu);
  }
}

// Hi·ªÉn th·ªã menu ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì (h≈© ho·∫∑c nh√£n)
function sendChartSelectionMenu(chatId, userId, messageId) {
  var message = "üìä <b>Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì b·∫°n mu·ªën xem:</b>\n\n" +
    "üè∫ <b>Theo H≈©:</b> Bi·ªÉu ƒë·ªì c·ªôt ASCII cho chi ti√™u v√† thu nh·∫≠p theo h≈©\n" +
    "üè∑Ô∏è <b>Theo Nh√£n:</b> Bi·ªÉu ƒë·ªì top nh√£n chi ti√™u v·ªõi ranking\n\n" +
    "üí° <i>Ch·ªçn m·ªôt t√πy ch·ªçn b√™n d∆∞·ªõi:</i>";
  
  var chartMenu = {
    "inline_keyboard": [
      [
        {
          text: 'üè∫ Bi·ªÉu ƒë·ªì Chi ti√™u theo H≈©',
          callback_data: 'chart_allocation_expense'
        }
      ],
      [
        {
          text: 'üí∞ Bi·ªÉu ƒë·ªì Thu nh·∫≠p theo H≈©',
          callback_data: 'chart_allocation_income'
        }
      ],
      [
        {
          text: 'üè∑Ô∏è Bi·ªÉu ƒë·ªì Chi ti√™u theo Nh√£n',
          callback_data: 'chart_subcategory'
        }
      ],
      [
        {
          text: 'üìà Xem T·ªâ l·ªá %',
          callback_data: 'show_percentage_menu'
        }
      ]
    ]
  };
  
  if (messageId) {
    editText(chatId, messageId, message, chartMenu);
  } else {
    sendText(chatId, message, chartMenu);
  }
}

// =================== K·∫æT TH√öC MENU SELECTION ===================

// =================== T·ªà L·ªÜ % V√Ä BI·ªÇU ƒê·ªí CHO SUBCATEGORIES ===================

// T√≠nh t·ªâ l·ªá % cho subcategories
function calculateSubCategoryPercentages(userId) {
  var subCategoryBalances = getTotalSubCategoryBalances(userId);
  var percentages = {};
  var totalAmount = 0;
  var allocationTotals = {};
  
  // T√≠nh t·ªïng cho t·ª´ng allocation v√† t·ªïng grand total
  for (var allocation in subCategories) {
    allocationTotals[allocation] = 0;
    for (var i = 0; i < subCategories[allocation].length; i++) {
      var subCategory = subCategories[allocation][i];
      if (subCategoryBalances[subCategory] > 0) {
        allocationTotals[allocation] += subCategoryBalances[subCategory];
        totalAmount += subCategoryBalances[subCategory];
      }
    }
  }
  
  // T√≠nh t·ªâ l·ªá % cho t·ª´ng subcategory
  for (var allocation in subCategories) {
    for (var i = 0; i < subCategories[allocation].length; i++) {
      var subCategory = subCategories[allocation][i];
      if (subCategoryBalances[subCategory] > 0 && totalAmount > 0) {
        percentages[subCategory] = (subCategoryBalances[subCategory] / totalAmount) * 100;
      } else {
        percentages[subCategory] = 0;
      }
    }
  }
  
  return {
    percentages: percentages,
    balances: subCategoryBalances,
    totalAmount: totalAmount,
    allocationTotals: allocationTotals
  };
}

// Hi·ªÉn th·ªã t·ªâ l·ªá % chi ti√™u theo subcategory
function sendSubCategoryPercentages(chatId, userId, messageId) {
  var data = calculateSubCategoryPercentages(userId);
  var percentages = data.percentages;
  var balances = data.balances;
  var totalAmount = data.totalAmount;
  var allocationTotals = data.allocationTotals;
  
  var message = "üìà <b>T·ªâ l·ªá % chi ti√™u theo nh√£n:</b>\n\n";
  
  if (totalAmount > 0) {
    // Hi·ªÉn th·ªã theo t·ª´ng allocation
    for (var allocation in subCategories) {
      if (allocationTotals[allocation] > 0) {
        message += "üìÅ <b>" + allocation + ":</b>\n";
        
        // S·∫Øp x·∫øp subcategories theo % gi·∫£m d·∫ßn trong allocation n√†y
        var subCategoriesInAllocation = subCategories[allocation].filter(function(subCat) {
          return percentages[subCat] > 0;
        }).sort(function(a, b) {
          return percentages[b] - percentages[a];
        });
        
        for (var i = 0; i < subCategoriesInAllocation.length; i++) {
          var subCategory = subCategoriesInAllocation[i];
          var percentage = percentages[subCategory];
          var amount = balances[subCategory];
          
          message += "  üè∑Ô∏è <b>" + subCategory + ":</b>\n";
          message += "     üí∞ " + amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + 
                     " (" + percentage.toFixed(1) + "%)\n";
          message += "     " + createPercentageBar(percentage) + "\n";
        }
        
        var allocationPercentage = (allocationTotals[allocation] / totalAmount) * 100;
        message += "  <i>üìä T·ªïng " + getShortAllocationName(allocation) + ": " + 
                   allocationTotals[allocation].toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + 
                   " (" + allocationPercentage.toFixed(1) + "%)</i>\n\n";
      }
    }
    
    message += "<b>üíπ T·ªïng t·∫•t c·∫£ nh√£n: " + totalAmount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</b>";
  } else {
    message = "üì≠ Ch∆∞a c√≥ chi ti√™u n√†o ƒë∆∞·ª£c g·∫Øn nh√£n ƒë·ªÉ hi·ªÉn th·ªã t·ªâ l·ªá %.";
  }
  
  var subCategoryPercentageMenu = {
    "inline_keyboard": [
      [
        {
          text: 'üìä Bi·ªÉu ƒë·ªì nh√£n',
          callback_data: 'view_subcategory_chart'
        },
        {
          text: 'üè∑Ô∏è Xem s·ªë d∆∞ nh√£n',
          callback_data: 'view_subcategory_summary'
        }
      ],
      [
        {
          text: 'üìà T·ªâ l·ªá % h≈©',
          callback_data: 'view_percentage'
        },
        {
          text: 'üè∫ Xem h≈©',
          callback_data: 'getTotalAllocationBalances'
        }
      ]
    ]
  };
  
  if (messageId) {
    editText(chatId, messageId, message, subCategoryPercentageMenu);
  } else {
    sendText(chatId, message, subCategoryPercentageMenu);
  }
}

// Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì subcategories
function sendSubCategoryChart(chatId, userId, messageId) {
  var data = calculateSubCategoryPercentages(userId);
  var percentages = data.percentages;
  var balances = data.balances;
  var totalAmount = data.totalAmount;
  var allocationTotals = data.allocationTotals;
  
  var message = "üìä <b>Bi·ªÉu ƒë·ªì chi ti√™u theo nh√£n:</b>\n\n";
  
  if (totalAmount > 0) {
    // T·∫°o bi·ªÉu ƒë·ªì cho top subcategories
    var topSubCategories = getTopSubCategories(percentages, 8); // Top 8 ƒë·ªÉ kh√¥ng qu√° d√†i
    
    if (topSubCategories.length > 0) {
      message += createSubCategoryBarChart(topSubCategories, percentages, balances);
      
      message += "\n<b>üìà Top nh√£n chi ti√™u:</b>\n";
      for (var i = 0; i < Math.min(5, topSubCategories.length); i++) {
        var subCategory = topSubCategories[i];
        var percentage = percentages[subCategory];
        var amount = balances[subCategory];
        
        var rank = "";
        switch(i) {
          case 0: rank = "ü•á"; break;
          case 1: rank = "ü•à"; break;
          case 2: rank = "ü•â"; break;
          default: rank = (i + 1) + ".";
        }
        
        message += rank + " <b>" + subCategory + "</b>: " + 
                   amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + 
                   " (" + percentage.toFixed(1) + "%)\n";
      }
      
      // Ph√¢n t√≠ch allocation dominance
      message += "\n<b>üè∫ Ph√¢n t√≠ch theo h≈©:</b>\n";
      var sortedAllocations = Object.keys(allocationTotals).filter(function(alloc) {
        return allocationTotals[alloc] > 0;
      }).sort(function(a, b) {
        return allocationTotals[b] - allocationTotals[a];
      });
      
      if (sortedAllocations.length > 0) {
        var topAllocation = sortedAllocations[0];
        var topAllocationPercentage = (allocationTotals[topAllocation] / totalAmount) * 100;
        message += "üî¥ H≈© chi nhi·ªÅu nh·∫•t: <b>" + topAllocation + "</b> (" + topAllocationPercentage.toFixed(1) + "%)\n";
      }
    }
    
    message += "\n<b>üíπ T·ªïng t·∫•t c·∫£ nh√£n: " + totalAmount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</b>";
  } else {
    message = "üì≠ Ch∆∞a c√≥ d·ªØ li·ªáu nh√£n ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì.";
  }
  
  var subCategoryChartMenu = {
    "inline_keyboard": [
      [
        {
          text: 'üìà T·ªâ l·ªá % nh√£n',
          callback_data: 'view_subcategory_percentage'
        },
        {
          text: 'üè∑Ô∏è Xem s·ªë d∆∞ nh√£n',
          callback_data: 'view_subcategory_summary'
        }
      ],
      [
        {
          text: 'üìä Bi·ªÉu ƒë·ªì h≈©',
          callback_data: 'view_chart'
        },
        {
          text: 'üè∫ Xem h≈©',
          callback_data: 'getTotalAllocationBalances'
        }
      ]
    ]
  };
  
  if (messageId) {
    editText(chatId, messageId, message, subCategoryChartMenu);
  } else {
    sendText(chatId, message, subCategoryChartMenu);
  }
}

// L·∫•y top subcategories theo percentage
function getTopSubCategories(percentages, limit) {
  return Object.keys(percentages)
    .filter(function(subCat) { return percentages[subCat] > 0; })
    .sort(function(a, b) { return percentages[b] - percentages[a]; })
    .slice(0, limit);
}

// T·∫°o bi·ªÉu ƒë·ªì cho subcategories
function createSubCategoryBarChart(topSubCategories, percentages, balances) {
  var chart = "";
  var maxHeight = 8; // Chi·ªÅu cao t·ªëi ƒëa
  
  // T·∫°o bi·ªÉu ƒë·ªì d·ªçc
  for (var row = maxHeight; row >= 0; row--) {
    var line = "";
    
    for (var i = 0; i < topSubCategories.length; i++) {
      var subCategory = topSubCategories[i];
      var percentage = percentages[subCategory];
      
      var barHeight = Math.round((percentage / 100) * maxHeight);
      
      if (row <= barHeight) {
        line += "‚ñà";
      } else if (row === 0) {
        // Hi·ªÉn th·ªã s·ªë th·ª© t·ª±
        line += String(i + 1);
      } else {
        line += " ";
      }
      line += " ";
    }
    
    if (line.trim()) {
      chart += line + "\n";
    }
  }
  
  // Th√™m legend
  chart += "\n<b>üìã Ch√∫ gi·∫£i:</b>\n";
  for (var i = 0; i < Math.min(topSubCategories.length, 5); i++) {
    var subCategory = topSubCategories[i];
    var percentage = percentages[subCategory];
    
    chart += (i + 1) + ". <b>" + getShortSubCategoryName(subCategory) + "</b>: " + percentage.toFixed(1) + "%\n";
  }
  
  return chart;
}

// R√∫t g·ªçn t√™n subcategory cho bi·ªÉu ƒë·ªì
function getShortSubCategoryName(subCategory) {
  var shortNames = {
    // Chi ti√™u thi·∫øt y·∫øu
    'Nh√† ·ªü': 'Nh√† ·ªü',
    'ƒÇn ngo√†i': 'ƒÇn ngo√†i',
    'H√≥a ƒë∆°n': 'H√≥a ƒë∆°n',
    'ƒêi ch·ª£ si√™u th·ªã': 'Si√™u th·ªã',
    'Di chuy·ªÉn': 'Di chuy·ªÉn',
    'S·ª©c kh·ªèe': 'S·ª©c kh·ªèe',
    
    // H∆∞·ªüng th·ª•
    'Gi·∫£i tr√≠': 'Gi·∫£i tr√≠',
    'Th·ª©c u·ªëng': 'ƒê·ªì u·ªëng',
    'Nh√† h√†ng': 'Nh√† h√†ng',
    'Mua s·∫Øm': 'Mua s·∫Øm',
    'ChƒÉm s√≥c b·∫£n th√¢n': 'ChƒÉm s√≥c',
    'Du l·ªãch': 'Du l·ªãch',
    'Th·ªÉ thao': 'Th·ªÉ thao',
    
    // Ti·∫øt ki·ªám d√†i h·∫°n
    'Mua s·∫Øm nh·ªØng m√≥n ƒë·ªì gi√° tr·ªã': 'ƒê·ªì gi√° tr·ªã',
    'Nh·ªØng k·ª≥ ngh·ªâ l·ªõn': 'K·ª≥ ngh·ªâ l·ªõn',
    'C√°c m·ª•c ti√™u c√° nh√¢n kh√°c': 'M·ª•c ti√™u kh√°c',
    'Qu·ªπ d·ª± ph√≤ng kh·∫©n c·∫•p': 'D·ª± ph√≤ng',
    
    // Gi√°o d·ª•c
    'S√°ch': 'S√°ch',
    'Kh√≥a h·ªçc': 'Kh√≥a h·ªçc',
    'S·ª± ki·ªán': 'S·ª± ki·ªán',
    
    // T·ª± do t√†i ch√≠nh
    'ƒê·∫ßu t∆∞': 'ƒê·∫ßu t∆∞',
    'Kinh doanh': 'Kinh doanh',
    'B·∫•t ƒë·ªông s·∫£n': 'BƒêS',
    'G·ª≠i ti·∫øt ki·ªám sinh l·ªùi': 'Ti·∫øt ki·ªám',
    
    // Cho ƒëi
    'T·ª´ thi·ªán': 'T·ª´ thi·ªán',
    'Gi√∫p ƒë·ª° ng∆∞·ªùi th√¢n': 'Gi√∫p ƒë·ª°',
    'Qu√† t·∫∑ng': 'Qu√† t·∫∑ng',
    'ƒê√≥ng g√≥p cho c·ªông ƒë·ªìng': 'C·ªông ƒë·ªìng'
  };
  
  return shortNames[subCategory] || subCategory.substring(0, 8);
}

// =================== K·∫æT TH√öC SUBCATEGORY % V√Ä BI·ªÇU ƒê·ªí ===================

// =================== T·ªà L·ªÜ % V√Ä BI·ªÇU ƒê·ªí FUNCTIONS ===================

// T√≠nh t·ªâ l·ªá % cho c√°c h≈©
function calculateAllocationPercentages(userId) {
  var allocations = getTotalAllocationBalances(userId);
  var percentages = {};
  var totalAmount = 0;
  
  // T√≠nh t·ªïng s·ªë ti·ªÅn ƒë√£ chi (ch·ªâ t√≠nh chi ti√™u, b·ªè qua s·ªë √¢m)
  for (var allocation in allocations) {
    if (allocations[allocation] < 0) { // Chi ti√™u (s·ªë √¢m)
      totalAmount += Math.abs(allocations[allocation]);
    }
  }
  
  // T√≠nh t·ªâ l·ªá % cho t·ª´ng h≈©
  for (var allocation in allocations) {
    if (allocations[allocation] < 0 && totalAmount > 0) {
      percentages[allocation] = (Math.abs(allocations[allocation]) / totalAmount) * 100;
    } else {
      percentages[allocation] = 0;
    }
  }
  
  return {
    percentages: percentages,
    totalAmount: totalAmount,
    allocations: allocations
  };
}

// Hi·ªÉn th·ªã t·ªâ l·ªá % chi ti√™u theo h≈©
function sendAllocationPercentages(chatId, userId, messageId) {
  var data = calculateAllocationPercentages(userId);
  var percentages = data.percentages;
  var totalAmount = data.totalAmount;
  var allocations = data.allocations;
  
  var message = "üìà <b>T·ªâ l·ªá chi ti√™u theo h≈©:</b>\n\n";
  
  if (totalAmount > 0) {
    // S·∫Øp x·∫øp theo t·ªâ l·ªá % gi·∫£m d·∫ßn
    var sortedAllocations = Object.keys(percentages).sort(function(a, b) {
      return percentages[b] - percentages[a];
    });
    
    for (var i = 0; i < sortedAllocations.length; i++) {
      var allocation = sortedAllocations[i];
      var percentage = percentages[allocation];
      
      if (percentage > 0) {
        var amount = Math.abs(allocations[allocation]);
        var amountStr = amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        
        message += "üí∏ <b>" + allocation + ":</b>\n";
        message += "   üí∞ " + amountStr + " (" + percentage.toFixed(1) + "%)\n";
        message += "   " + createPercentageBar(percentage) + "\n\n";
      }
    }
    
    message += "<b>üíπ T·ªïng chi ti√™u: " + totalAmount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</b>";
  } else {
    message = "üì≠ Ch∆∞a c√≥ chi ti√™u n√†o ƒë·ªÉ hi·ªÉn th·ªã t·ªâ l·ªá %.";
  }
  
  var percentageMenu = {
    "inline_keyboard": [
      [
        {
          text: 'üìä Bi·ªÉu ƒë·ªì chi ti√™u h≈©',
          callback_data: 'chart_allocation_expense'
        },
        {
          text: 'üè∫ Xem s·ªë d∆∞ h≈©',
          callback_data: 'getTotalAllocationBalances'
        }
      ],
      [
        {
          text: 'ÔøΩ T·ªâ l·ªá % thu nh·∫≠p',
          callback_data: 'percentage_allocation_income'
        },
        {
          text: 'üè∑Ô∏è T·ªâ l·ªá % nh√£n',
          callback_data: 'percentage_subcategory'
        }
      ],
      [
        {
          text: 'üìà Menu t·ªâ l·ªá %',
          callback_data: 'show_percentage_menu'
        }
      ]
    ]
  };
  
  if (messageId) {
    editText(chatId, messageId, message, percentageMenu);
  } else {
    sendText(chatId, message, percentageMenu);
  }
}

// T·∫°o thanh % b·∫±ng k√Ω t·ª±
function createPercentageBar(percentage) {
  var maxBars = 20; // ƒê·ªô d√†i t·ªëi ƒëa c·ªßa thanh
  var filledBars = Math.round((percentage / 100) * maxBars);
  var emptyBars = maxBars - filledBars;
  
  var bar = "";
  for (var i = 0; i < filledBars; i++) {
    bar += "‚ñà";
  }
  for (var i = 0; i < emptyBars; i++) {
    bar += "‚ñë";
  }
  
  return bar + " " + percentage.toFixed(1) + "%";
}

// Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n b·ªï chi ti√™u
function sendAllocationChart(chatId, userId, messageId) {
  var data = calculateAllocationPercentages(userId);
  var percentages = data.percentages;
  var totalAmount = data.totalAmount;
  var allocations = data.allocations;
  
  var message = "üìä <b>Bi·ªÉu ƒë·ªì chi ti√™u theo h≈©:</b>\n\n";
  
  if (totalAmount > 0) {
    // T·∫°o bi·ªÉu ƒë·ªì d·∫°ng c·ªôt
    message += createBarChart(percentages, allocations);
    message += "\n<b>üìà Ph√¢n t√≠ch:</b>\n";
    
    // T√¨m h≈© chi ti√™u nhi·ªÅu nh·∫•t v√† √≠t nh·∫•t
    var maxAllocation = "";
    var minAllocation = "";
    var maxPercentage = 0;
    var minPercentage = 100;
    
    for (var allocation in percentages) {
      if (percentages[allocation] > maxPercentage) {
        maxPercentage = percentages[allocation];
        maxAllocation = allocation;
      }
      if (percentages[allocation] > 0 && percentages[allocation] < minPercentage) {
        minPercentage = percentages[allocation];
        minAllocation = allocation;
      }
    }
    
    if (maxAllocation) {
      message += "üî¥ H≈© chi nhi·ªÅu nh·∫•t: <b>" + maxAllocation + "</b> (" + maxPercentage.toFixed(1) + "%)\n";
    }
    if (minAllocation) {
      message += "üü¢ H≈© chi √≠t nh·∫•t: <b>" + minAllocation + "</b> (" + minPercentage.toFixed(1) + "%)\n";
    }
    
    message += "\n<b>üíπ T·ªïng chi ti√™u: " + totalAmount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</b>";
  } else {
    message = "üì≠ Ch∆∞a c√≥ d·ªØ li·ªáu chi ti√™u ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì.";
  }
  
  var chartMenu = {
    "inline_keyboard": [
      [
        {
          text: 'üìà Xem t·ªâ l·ªá %',
          callback_data: 'view_percentage'
        },
        {
          text: 'üè∫ Xem s·ªë d∆∞ h≈©',
          callback_data: 'getTotalAllocationBalances'
        }
      ],
      [
        {
          text: 'üìä Bi·ªÉu ƒë·ªì thu nh·∫≠p',
          callback_data: 'view_income_chart'
        }
      ]
    ]
  };
  
  if (messageId) {
    editText(chatId, messageId, message, chartMenu);
  } else {
    sendText(chatId, message, chartMenu);
  }
}

// T·∫°o bi·ªÉu ƒë·ªì c·ªôt b·∫±ng k√Ω t·ª±
function createBarChart(percentages, allocations) {
  var chart = "";
  var maxHeight = 10; // Chi·ªÅu cao t·ªëi ƒëa c·ªßa c·ªôt
  
  // S·∫Øp x·∫øp theo t·ªâ l·ªá % gi·∫£m d·∫ßn
  var sortedAllocations = Object.keys(percentages).sort(function(a, b) {
    return percentages[b] - percentages[a];
  });
  
  // T·∫°o bi·ªÉu ƒë·ªì theo chi·ªÅu d·ªçc
  for (var row = maxHeight; row >= 0; row--) {
    var line = "";
    
    for (var i = 0; i < sortedAllocations.length; i++) {
      var allocation = sortedAllocations[i];
      var percentage = percentages[allocation];
      
      if (percentage > 0) {
        var barHeight = Math.round((percentage / 100) * maxHeight);
        
        if (row <= barHeight) {
          line += "‚ñà";
        } else if (row === 0) {
          // Hi·ªÉn th·ªã t√™n h≈© (r√∫t g·ªçn)
          var shortName = getShortAllocationName(allocation);
          line += shortName.charAt(0);
        } else {
          line += " ";
        }
        line += " ";
      }
    }
    
    if (line.trim()) {
      chart += line + "\n";
    }
  }
  
  // Th√™m t√™n h≈© v√† %
  chart += "\n";
  for (var i = 0; i < sortedAllocations.length; i++) {
    var allocation = sortedAllocations[i];
    var percentage = percentages[allocation];
    
    if (percentage > 0) {
      var shortName = getShortAllocationName(allocation);
      chart += "<b>" + shortName + "</b>: " + percentage.toFixed(1) + "%\n";
    }
  }
  
  return chart;
}

// R√∫t g·ªçn t√™n h≈© cho bi·ªÉu ƒë·ªì
function getShortAllocationName(allocation) {
  var shortNames = {
    'Chi ti√™u thi·∫øt y·∫øu': 'Thi·∫øt y·∫øu',
    'H∆∞·ªüng th·ª•': 'H∆∞·ªüng th·ª•',
    'Ti·∫øt ki·ªám d√†i h·∫°n': 'Ti·∫øt ki·ªám',
    'Gi√°o d·ª•c': 'Gi√°o d·ª•c',
    'T·ª± do t√†i ch√≠nh': 'T·ª± do TC',
    'Cho ƒëi': 'Cho ƒëi'
  };
  
  return shortNames[allocation] || allocation;
}

// T√≠nh t·ªâ l·ªá % thu nh·∫≠p theo h≈©
function sendIncomePercentages(chatId, userId, messageId) {
  var allocations = getTotalAllocationBalances(userId);
  var percentages = {};
  var totalIncome = 0;
  
  // T√≠nh t·ªïng thu nh·∫≠p (s·ªë d∆∞∆°ng)
  for (var allocation in allocations) {
    if (allocations[allocation] > 0) {
      totalIncome += allocations[allocation];
    }
  }
  
  // T√≠nh t·ªâ l·ªá % cho t·ª´ng h≈©
  for (var allocation in allocations) {
    if (allocations[allocation] > 0 && totalIncome > 0) {
      percentages[allocation] = (allocations[allocation] / totalIncome) * 100;
    } else {
      percentages[allocation] = 0;
    }
  }
  
  var message = "üí∞ <b>T·ªâ l·ªá thu nh·∫≠p theo h≈©:</b>\n\n";
  
  if (totalIncome > 0) {
    // S·∫Øp x·∫øp theo t·ªâ l·ªá % gi·∫£m d·∫ßn
    var sortedAllocations = Object.keys(percentages).sort(function(a, b) {
      return percentages[b] - percentages[a];
    });
    
    for (var i = 0; i < sortedAllocations.length; i++) {
      var allocation = sortedAllocations[i];
      var percentage = percentages[allocation];
      
      if (percentage > 0) {
        var amount = allocations[allocation];
        var amountStr = amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        
        message += "üíé <b>" + allocation + ":</b>\n";
        message += "   üí∞ " + amountStr + " (" + percentage.toFixed(1) + "%)\n";
        message += "   " + createPercentageBar(percentage) + "\n\n";
      }
    }
    
    message += "<b>üíπ T·ªïng thu nh·∫≠p: " + totalIncome.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</b>";
  } else {
    message = "üì≠ Ch∆∞a c√≥ thu nh·∫≠p n√†o ƒë·ªÉ hi·ªÉn th·ªã t·ªâ l·ªá %.";
  }
  
  var incomeMenu = {
    "inline_keyboard": [
      [
        {
          text: 'üìä Bi·ªÉu ƒë·ªì thu nh·∫≠p',
          callback_data: 'view_income_chart'
        },
        {
          text: 'üìà Chi ti√™u %',
          callback_data: 'view_percentage'
        }
      ],
      [
        {
          text: 'üè∫ Xem s·ªë d∆∞ h≈©',
          callback_data: 'getTotalAllocationBalances'
        }
      ]
    ]
  };
  
  if (messageId) {
    editText(chatId, messageId, message, incomeMenu);
  } else {
    sendText(chatId, message, incomeMenu);
  }
}

// Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì thu nh·∫≠p
function sendIncomeChart(chatId, userId, messageId) {
  var allocations = getTotalAllocationBalances(userId);
  var percentages = {};
  var totalIncome = 0;
  
  // T√≠nh t·ªïng thu nh·∫≠p
  for (var allocation in allocations) {
    if (allocations[allocation] > 0) {
      totalIncome += allocations[allocation];
    }
  }
  
  // T√≠nh t·ªâ l·ªá %
  for (var allocation in allocations) {
    if (allocations[allocation] > 0 && totalIncome > 0) {
      percentages[allocation] = (allocations[allocation] / totalIncome) * 100;
    } else {
      percentages[allocation] = 0;
    }
  }
  
  var message = "üíé <b>Bi·ªÉu ƒë·ªì thu nh·∫≠p theo h≈©:</b>\n\n";
  
  if (totalIncome > 0) {
    message += createBarChart(percentages, allocations);
    message += "\n<b>üí∞ Ph√¢n t√≠ch thu nh·∫≠p:</b>\n";
    
    // T√¨m h≈© thu nh·∫≠p nhi·ªÅu nh·∫•t
    var maxAllocation = "";
    var maxPercentage = 0;
    
    for (var allocation in percentages) {
      if (percentages[allocation] > maxPercentage) {
        maxPercentage = percentages[allocation];
        maxAllocation = allocation;
      }
    }
    
    if (maxAllocation) {
      message += "üåü H≈© thu nhi·ªÅu nh·∫•t: <b>" + maxAllocation + "</b> (" + maxPercentage.toFixed(1) + "%)\n";
    }
    
    message += "\n<b>üíπ T·ªïng thu nh·∫≠p: " + totalIncome.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</b>";
  } else {
    message = "üì≠ Ch∆∞a c√≥ d·ªØ li·ªáu thu nh·∫≠p ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì.";
  }
  
  var incomeChartMenu = {
    "inline_keyboard": [
      [
        {
          text: 'üí∞ T·ªâ l·ªá thu nh·∫≠p',
          callback_data: 'view_income_percentage'
        },
        {
          text: 'üìä Bi·ªÉu ƒë·ªì chi ti√™u',
          callback_data: 'view_chart'
        }
      ],
      [
        {
          text: 'üè∫ Xem s·ªë d∆∞ h≈©',
          callback_data: 'getTotalAllocationBalances'
        }
      ]
    ]
  };
  
  if (messageId) {
    editText(chatId, messageId, message, incomeChartMenu);
  } else {
    sendText(chatId, message, incomeChartMenu);
  }
}

// =================== K·∫æT TH√öC T·ªà L·ªÜ % V√Ä BI·ªÇU ƒê·ªí FUNCTIONS ===================

// L·∫•y l·ªãch s·ª≠ giao d·ªãch theo allocation
function getTransactionHistoryByAllocation(userId, allocation) {
  var sheet = getSheet(userId);
  var data = sheet.getDataRange().getValues();
  var transactions = [];
  
  for (var i = 1; i < data.length; i++) {
    if (data[i][4] === allocation) { // Allocation ·ªü c·ªôt E (index 4)
      var transaction = {
        stt: data[i][0],        // STT
        date: data[i][1],       // Date
        description: data[i][2], // Description
        amount: data[i][3],     // Amount
        allocation: data[i][4], // Allocation
        type: data[i][5],       // Type
        subCategory: data[i][6] // SubCategory
      };
      transactions.push(transaction);
    }
  }
  
  return transactions;
}

// Hi·ªÉn th·ªã l·ªãch s·ª≠ giao d·ªãch theo allocation v·ªõi breakdown subcategories
function sendTransactionHistoryByAllocation(chatId, messageId, userId, allocation) {
  var transactions = getTransactionHistoryByAllocation(userId, allocation);
  
  if (transactions.length === 0) {
    var emptyMessage = "üì≠ <b>H≈© tr·ªëng:</b> " + allocation + "\n\n" +
      "Ch∆∞a c√≥ giao d·ªãch n√†o trong h≈© n√†y.";
    
    var emptyKeyboard = {
      "inline_keyboard": [
        [
          {
            text: "‚¨ÖÔ∏è Ch·ªçn h≈© kh√°c",
            callback_data: "view_by_allocation"
          },
          {
            text: "üè∫ T·ªïng t·∫•t c·∫£ h≈©",
            callback_data: "getTotalAllocationBalances"
          }
        ],
        [
          {
            text: "üè∑Ô∏è Xem theo nh√£n",
            callback_data: "view_subcategory_summary"
          },
          {
            text: "üìä T·ªïng quan",
            callback_data: "currentbalance"
          }
        ]
      ]
    };
    
    editText(chatId, messageId, emptyMessage, emptyKeyboard);
    return;
  }
  
  var message = "üè∫ <b>L·ªãch s·ª≠ h≈©: " + allocation + "</b>\n\n";
  var totalIncome = 0;
  var totalExpense = 0;
  var subCategoryBreakdown = {};
  
  // T√≠nh breakdown theo subcategory
  for (var i = 0; i < transactions.length; i++) {
    var transaction = transactions[i];
    var subCat = transaction.subCategory || "Ch∆∞a ph√¢n lo·∫°i";
    
    if (!subCategoryBreakdown[subCat]) {
      subCategoryBreakdown[subCat] = { income: 0, expense: 0, count: 0 };
    }
    
    if (transaction.type === "ThuNhap") {
      totalIncome += transaction.amount;
      subCategoryBreakdown[subCat].income += transaction.amount;
    } else if (transaction.type === "ChiTieu") {
      totalExpense += transaction.amount;
      subCategoryBreakdown[subCat].expense += transaction.amount;
    }
    subCategoryBreakdown[subCat].count++;
  }
  
  // Hi·ªÉn th·ªã breakdown theo subcategory
  message += "<b>üìä Ph√¢n t√≠ch theo nh√£n:</b>\n";
  for (var subCat in subCategoryBreakdown) {
    var data = subCategoryBreakdown[subCat];
    var net = data.income - data.expense;
    var netStr = net.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    var icon = net >= 0 ? "üí∞" : "üí∏";
    
    message += "‚Ä¢ " + subCat + " (" + data.count + " giao d·ªãch): " + icon + " " + netStr + "\n";
  }
  
  var balance = totalIncome - totalExpense;
  var balanceStr = balance.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  var balanceIcon = balance >= 0 ? "üí∞" : "üí∏";
  
  message += "\n<b>" + balanceIcon + " S·ªë d∆∞ h≈© '" + allocation + "': " + balanceStr + "</b>\n";
  message += "<i>üíµ Thu nh·∫≠p: +" + totalIncome.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</i>\n";
  message += "<i>üí∏ Chi ti√™u: -" + totalExpense.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</i>";
  
  var backKeyboard = {
    "inline_keyboard": [
      [
        {
          text: "üìã Chi ti·∫øt giao d·ªãch",
          callback_data: "view_allocation_transactions_" + allocation
        }
      ],
      [
        {
          text: "‚¨ÖÔ∏è Ch·ªçn h≈© kh√°c",
          callback_data: "view_by_allocation"
        },
        {
          text: "üè∫ T·ªïng t·∫•t c·∫£ h≈©",
          callback_data: "getTotalAllocationBalances"
        }
      ]
    ]
  };
  
  editText(chatId, messageId, message, backKeyboard);
}

// Hi·ªÉn th·ªã chi ti·∫øt t·ª´ng giao d·ªãch trong allocation
function sendAllocationTransactionDetails(chatId, messageId, userId, allocation) {
  var transactions = getTransactionHistoryByAllocation(userId, allocation);
  
  if (transactions.length === 0) {
    var emptyMessage = "üì≠ <b>H≈© tr·ªëng:</b> " + allocation + "\n\n" +
      "Ch∆∞a c√≥ giao d·ªãch n√†o trong h≈© n√†y.";
    
    var emptyKeyboard = {
      "inline_keyboard": [
        [
          {
            text: "üìä Ph√¢n t√≠ch theo nh√£n",
            callback_data: "view_allocation_detail_" + allocation
          }
        ],
        [
          {
            text: "‚¨ÖÔ∏è Ch·ªçn h≈© kh√°c",
            callback_data: "view_by_allocation"
          },
          {
            text: "üè∫ T·ªïng t·∫•t c·∫£ h≈©",
            callback_data: "getTotalAllocationBalances"
          }
        ]
      ]
    };
    
    editText(chatId, messageId, emptyMessage, emptyKeyboard);
    return;
  }
  
  var message = "üè∫ <b>Chi ti·∫øt giao d·ªãch - " + allocation + "</b>\n\n";
  var totalIncome = 0;
  var totalExpense = 0;
  
  // S·∫Øp x·∫øp theo date m·ªõi nh·∫•t tr∆∞·ªõc
  transactions.sort(function(a, b) {
    return new Date(b.date) - new Date(a.date);
  });
  
  // Hi·ªÉn th·ªã t·ªëi ƒëa 20 giao d·ªãch g·∫ßn nh·∫•t
  var displayCount = Math.min(transactions.length, 20);
  
  for (var i = 0; i < displayCount; i++) {
    var transaction = transactions[i];
    var formattedDate = formatDate(transaction.date);
    var formattedAmount = transaction.amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    var typeIcon = transaction.type === "ThuNhap" ? "üíµ" : "üí∏";
    var subCatDisplay = transaction.subCategory ? " ‚Ä¢ " + transaction.subCategory : "";
    
    message += transaction.stt + ". " + formattedDate + " " + typeIcon + "\n";
    message += "   " + transaction.description + "\n";
    message += "   " + formattedAmount + subCatDisplay + "\n\n";
    
    if (transaction.type === "ThuNhap") {
      totalIncome += transaction.amount;
    } else {
      totalExpense += transaction.amount;
    }
  }
  
  if (transactions.length > 20) {
    message += "<i>... v√† " + (transactions.length - 20) + " giao d·ªãch kh√°c\n\n</i>";
  }
  
  var balance = totalIncome - totalExpense;
  var balanceStr = balance.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  var balanceIcon = balance >= 0 ? "üí∞" : "üí∏";
  
  message += "<b>" + balanceIcon + " T·ªïng " + allocation + ": " + balanceStr + "</b>";
  
  var backKeyboard = {
    "inline_keyboard": [
      [
        {
          text: "üìä Ph√¢n t√≠ch theo nh√£n",
          callback_data: "view_allocation_detail_" + allocation
        }
      ],
      [
        {
          text: "‚¨ÖÔ∏è Ch·ªçn h≈© kh√°c",
          callback_data: "view_by_allocation"
        },
        {
          text: "üè∫ T·ªïng t·∫•t c·∫£ h≈©",
          callback_data: "getTotalAllocationBalances"
        }
      ]
    ]
  };
  
  editText(chatId, messageId, message, backKeyboard);
}

// T·∫°o keyboard ƒë·ªÉ ch·ªçn allocation xem chi ti·∫øt
function createAllocationViewKeyboard() {
  var keyboard = [];
  
  // T·∫°o buttons cho m·ªói allocation, 2 buttons per row
  for (var i = 0; i < allocations.length; i += 2) {
    var row = [];
    
    row.push({
      text: "üè∫ " + allocations[i],
      callback_data: "view_allocation_detail_" + allocations[i]
    });
    
    if (i + 1 < allocations.length) {
      row.push({
        text: "üè∫ " + allocations[i + 1],
        callback_data: "view_allocation_detail_" + allocations[i + 1]
      });
    }
    
    keyboard.push(row);
  }
  
  // Th√™m n√∫t quay l·∫°i
  keyboard.push([{
    text: "‚¨ÖÔ∏è Quay l·∫°i",
    callback_data: "back_to_main_view"
  }]);
  
  return {
    "inline_keyboard": keyboard
  };
}

/**
 * OPTIMIZED: Only read Amount, Type, and SubCategory columns instead of entire sheet
 */
function getTotalSubCategoryBalances(userId) {
  const sheet = getSheet(userId);
  const lastRow = sheet.getLastRow();
  
  if (lastRow < 2) return {}; // No data rows
  
  const balances = {};
  
  // Initialize balances cho t·∫•t c·∫£ subcategories
  for (const allocation in subCategories) {
    for (let i = 0; i < subCategories[allocation].length; i++) {
      const subCategory = subCategories[allocation][i];
      balances[subCategory] = 0;
    }
  }
  
  // Only read columns D, F, G (Amount, Type, SubCategory) from row 2 to last row
  const data = sheet.getRange(2, 4, lastRow - 1, 4).getValues(); // D, E, F, G columns
  
  // ƒê·ªçc data t·ª´ sheet v√† t√≠nh t·ªïng
  for (let i = 0; i < data.length; i++) {
    const amount = data[i][0];        // Amount ·ªü c·ªôt D (index 0 trong range)
    const type = data[i][2];          // Type ·ªü c·ªôt F (index 2 trong range)
    const subCategory = data[i][3];   // SubCategory ·ªü c·ªôt G (index 3 trong range)
    
    if (subCategory && balances.hasOwnProperty(subCategory)) {
      if (type === TRANSACTION_TYPE.EXPENSE) {
        balances[subCategory] += amount;
      }
      // Ch·ªâ t√≠nh chi ti√™u, kh√¥ng t√≠nh thu nh·∫≠p cho subcategories
    }
  }
  
  return balances;
}

/**
 * OPTIMIZED: Only read needed columns for specific allocation
 */
function getTotalSubCategoryBalancesByAllocation(userId, allocation) {
  const sheet = getSheet(userId);
  const lastRow = sheet.getLastRow();
  
  if (lastRow < 2) return {}; // No data rows
  
  const balances = {};
  
  // Initialize balances cho subcategories c·ªßa allocation n√†y
  if (subCategories[allocation]) {
    for (let i = 0; i < subCategories[allocation].length; i++) {
      const subCategory = subCategories[allocation][i];
      balances[subCategory] = 0;
    }
  }
  
  // Only read columns D, E, F, G (Amount, Allocation, Type, SubCategory) from row 2 to last row
  const data = sheet.getRange(2, 4, lastRow - 1, 4).getValues(); // D, E, F, G columns
  
  // ƒê·ªçc data v√† t√≠nh t·ªïng cho allocation c·ª• th·ªÉ
  for (let i = 0; i < data.length; i++) {
    const amount = data[i][0];           // Amount ·ªü c·ªôt D (index 0 trong range)
    const itemAllocation = data[i][1];   // Allocation ·ªü c·ªôt E (index 1 trong range)
    const type = data[i][2];             // Type ·ªü c·ªôt F (index 2 trong range)
    const subCategory = data[i][3];      // SubCategory ·ªü c·ªôt G (index 3 trong range)
    
    if (itemAllocation === allocation && subCategory && balances.hasOwnProperty(subCategory)) {
      if (type === TRANSACTION_TYPE.EXPENSE) {
        balances[subCategory] += amount;
      }
    }
  }
  
  return balances;
}

// Hi·ªÉn th·ªã t·ªïng chi ti√™u theo nh√£n
function sendTotalSubCategorySummary(chatId, userId, messageId) {
  var subCategoryBalances = getTotalSubCategoryBalances(userId);
  var message = "üè∑Ô∏è <b>T·ªïng chi ti√™u theo nh√£n:</b>\n\n";
  
  var totalByAllocation = {};
  
  // T√≠nh t·ªïng theo allocation ƒë·ªÉ group hi·ªÉn th·ªã
  for (var allocation in subCategories) {
    totalByAllocation[allocation] = 0;
    var hasData = false;
    
    for (var i = 0; i < subCategories[allocation].length; i++) {
      var subCategory = subCategories[allocation][i];
      if (subCategoryBalances[subCategory] > 0) {
        hasData = true;
        totalByAllocation[allocation] += subCategoryBalances[subCategory];
      }
    }
    
    if (hasData) {
      message += "<b>üìÅ " + allocation + ":</b>\n";
      for (var i = 0; i < subCategories[allocation].length; i++) {
        var subCategory = subCategories[allocation][i];
        if (subCategoryBalances[subCategory] > 0) {
          message += "  ‚Ä¢ " + subCategory + ": " + 
            subCategoryBalances[subCategory].toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "\n";
        }
      }
      message += "  <i>T·ªïng " + allocation + ": " + 
        totalByAllocation[allocation].toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</i>\n\n";
    }
  }
  
  // T√≠nh t·ªïng to√†n b·ªô
  var grandTotal = 0;
  for (var subCategory in subCategoryBalances) {
    grandTotal += subCategoryBalances[subCategory];
  }
  
  if (grandTotal > 0) {
    message += "<b>üí∏ T·ªïng t·∫•t c·∫£ nh√£n: " + grandTotal.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</b>";
  } else {
    message = "Ch∆∞a c√≥ chi ti√™u n√†o ƒë∆∞·ª£c g·∫Øn nh√£n.";
  }
  
  var subCategoryMenu = {
    "inline_keyboard": [
      [
        {
          text: 'üìã Xem l·ªãch s·ª≠ theo nh√£n',
          callback_data: 'view_by_subcategory'
        }
      ],
      [
        {
          text: 'üìà T·ªâ l·ªá % nh√£n',
          callback_data: 'percentage_subcategory'
        },
        {
          text: 'üìä Bi·ªÉu ƒë·ªì nh√£n',
          callback_data: 'chart_subcategory'
        }
      ],
      [
        {
          text: 'üè∫ Xem theo h≈©',
          callback_data: 'getTotalAllocationBalances'
        },
        {
          text: 'üìä T·ªïng quan',
          callback_data: 'currentbalance'
        }
      ]
    ]
  };
  
  // S·ª≠ d·ª•ng editText n·∫øu c√≥ messageId, ng∆∞·ª£c l·∫°i d√πng sendText
  if (messageId) {
    editText(chatId, messageId, message, subCategoryMenu);
  } else {
    sendText(chatId, message, subCategoryMenu);
  }
}

// L·∫•y l·ªãch s·ª≠ giao d·ªãch theo subcategory
function getTransactionHistoryBySubCategory(userId, subCategory) {
  var sheet = getSheet(userId);
  var data = sheet.getDataRange().getValues();
  var transactions = [];
  
  for (var i = 1; i < data.length; i++) {
    if (data[i][6] === subCategory) { // SubCategory ·ªü c·ªôt G (index 6)
      var transaction = {
        stt: data[i][0],        // STT
        date: data[i][1],       // Date
        description: data[i][2], // Description
        amount: data[i][3],     // Amount
        allocation: data[i][4], // Allocation
        type: data[i][5],       // Type
        subCategory: data[i][6] // SubCategory
      };
      transactions.push(transaction);
    }
  }
  
  return transactions;
}

// T·∫°o keyboard ƒë·ªÉ ch·ªçn subcategory xem l·ªãch s·ª≠
function createSubCategoryViewKeyboard() {
  var keyboard = [];
  
  for (var allocation in subCategories) {
    // Th√™m header cho m·ªói allocation
    keyboard.push([{
      text: "üìÅ " + allocation,
      callback_data: "view_allocation_subs_" + allocation
    }]);
    
    // Th√™m c√°c subcategories c·ªßa allocation n√†y
    var subCats = subCategories[allocation];
    for (var i = 0; i < subCats.length; i += 2) {
      var row = [];
      
      row.push({
        text: subCats[i],
        callback_data: "view_subcategory_" + subCats[i]
      });
      
      if (i + 1 < subCats.length) {
        row.push({
          text: subCats[i + 1],
          callback_data: "view_subcategory_" + subCats[i + 1]
        });
      }
      
      keyboard.push(row);
    }
  }
  
  // Th√™m n√∫t quay l·∫°i
  keyboard.push([{
    text: "‚¨ÖÔ∏è Quay l·∫°i",
    callback_data: "back_to_main_view"
  }]);
  
  return {
    "inline_keyboard": keyboard
  };
}

// Hi·ªÉn th·ªã l·ªãch s·ª≠ giao d·ªãch theo subcategory
function sendTransactionHistoryBySubCategory(chatId, messageId, userId, subCategory) {
  var transactions = getTransactionHistoryBySubCategory(userId, subCategory);
  
  if (transactions.length === 0) {
    var emptyMessage = "üè∑Ô∏è <b>Nh√£n tr·ªëng:</b> " + subCategory + "\n\n" +
      "Ch∆∞a c√≥ giao d·ªãch n√†o v·ªõi nh√£n n√†y.";
    
    var emptyKeyboard = {
      "inline_keyboard": [
        [
          {
            text: "‚¨ÖÔ∏è Ch·ªçn nh√£n kh√°c",
            callback_data: "view_by_subcategory"
          },
          {
            text: "üè∑Ô∏è T·ªïng theo nh√£n", 
            callback_data: "view_subcategory_summary"
          }
        ],
        [
          {
            text: "üè∫ Xem theo h≈©",
            callback_data: "getTotalAllocationBalances"
          },
          {
            text: "üìä T·ªïng quan",
            callback_data: "currentbalance"
          }
        ]
      ]
    };
    
    editText(chatId, messageId, emptyMessage, emptyKeyboard);
    return;
  }
  
  var message = "üè∑Ô∏è <b>L·ªãch s·ª≠ nh√£n: " + subCategory + "</b>\n\n";
  var total = 0;
  
  for (var i = 0; i < transactions.length; i++) {
    var transaction = transactions[i];
    var formattedDate = formatDate(transaction.date);
    var formattedAmount = transaction.amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    
    message += transaction.stt + ". " + formattedDate + "\n";
    message += "‚Ä¢ " + transaction.description + "\n";
    message += "‚Ä¢ " + formattedAmount + " (" + transaction.allocation + ")\n\n";
    
    if (transaction.type === "ChiTieu") {
      total += transaction.amount;
    }
  }
  
  message += "<b>üí∏ T·ªïng chi ti√™u nh√£n '" + subCategory + "': " + 
    total.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</b>";
  
  var backKeyboard = {
    "inline_keyboard": [
      [
        {
          text: "‚¨ÖÔ∏è Ch·ªçn nh√£n kh√°c",
          callback_data: "view_by_subcategory"
        },
        {
          text: "üè∑Ô∏è T·ªïng theo nh√£n", 
          callback_data: "view_subcategory_summary"
        }
      ]
    ]
  };
  
  editText(chatId, messageId, message, backKeyboard);
}

function getTransactionHistory(userId, timeframe) {
  var sheet = getSheet(userId);
  var data = sheet
    .getDataRange()
    .getValues();
  var transactions = [];
  var currentDate = new Date();
  for (var i = 1; i < data.length; i++) {
    var transactionDate = new Date(data[i][1]); // Date gi·ªù ·ªü index 1
    if (transactionDate >= timeframe.startDate && transactionDate < timeframe.endDate) {
      var transaction = {
        stt: data[i][0],        // STT
        date: data[i][1],       // Date  
        description: data[i][2], // Description
        amount: data[i][3],     // Amount
        allocation: data[i][4], // Allocation
        type: data[i][5],       // Type
        subCategory: data[i][6] // SubCategory
      };
      transactions.push(transaction);
    }
  }
  return transactions;
}
function getOrCreateFolder(folderName) {
  // T√¨m th∆∞ m·ª•c theo t√™n
  var folders = DriveApp.getFoldersByName(folderName);
  
  if (folders.hasNext()) {
    // N·∫øu t√¨m th·∫•y th∆∞ m·ª•c, tr·∫£ v·ªÅ th∆∞ m·ª•c ƒë·∫ßu ti√™n
    Logger.log("T√¨m th·∫•y th∆∞ m·ª•c: " + folderName);
    return folders.next();
  } else {
    // N·∫øu ch∆∞a c√≥, t·∫°o th∆∞ m·ª•c m·ªõi
    Logger.log("T·∫°o th∆∞ m·ª•c m·ªõi: " + folderName);
    return DriveApp.createFolder(folderName);
  }
}

// H√†m debug ƒë·ªÉ ki·ªÉm tra th∆∞ m·ª•c v√† file
function debugFolderAndFiles() {
  Logger.log("=== DEBUG FOLDER AND FILES ===");
  
  // Ki·ªÉm tra th∆∞ m·ª•c Money Capybara
  var folders = DriveApp.getFoldersByName('Money Capybara');
  if (folders.hasNext()) {
    var folder = folders.next();
    Logger.log("Th∆∞ m·ª•c Money Capybara t·ªìn t·∫°i. ID: " + folder.getId());
    
    // Li·ªát k√™ file trong th∆∞ m·ª•c
    var files = folder.getFiles();
    var fileCount = 0;
    while (files.hasNext()) {
      var file = files.next();
      Logger.log("File trong th∆∞ m·ª•c: " + file.getName() + " (ID: " + file.getId() + ")");
      fileCount++;
    }
    Logger.log("T·ªïng s·ªë file trong th∆∞ m·ª•c: " + fileCount);
  } else {
    Logger.log("Th∆∞ m·ª•c Money Capybara kh√¥ng t·ªìn t·∫°i");
  }
  
  // Ki·ªÉm tra file Expense Tracker ·ªü th∆∞ m·ª•c g·ªëc
  var rootFiles = DriveApp.getRootFolder().getFilesByName('Expense Tracker');
  var rootFileCount = 0;
  while (rootFiles.hasNext()) {
    var file = rootFiles.next();
    Logger.log("File Expense Tracker ·ªü th∆∞ m·ª•c g·ªëc: " + file.getName());
    rootFileCount++;
  }
  Logger.log("S·ªë file Expense Tracker ·ªü th∆∞ m·ª•c g·ªëc: " + rootFileCount);
}

// Temp transaction cache functions (Global scope)
function saveTempTransaction(userId, transactionData) {
  var cache = CacheService.getScriptCache();
  cache.put('temp_transaction_' + userId, JSON.stringify(transactionData), 600); // 10 ph√∫t
}

function getTempTransaction(userId) {
  var cache = CacheService.getScriptCache();
  var data = cache.get('temp_transaction_' + userId);
  return data ? JSON.parse(data) : null;
}

function clearTempTransaction(userId) {
  var cache = CacheService.getScriptCache();
  cache.remove('temp_transaction_' + userId);
}

// Qu·∫£n l√Ω cache cho ch·ªânh s·ª≠a giao d·ªãch (Global functions)
function saveTransactionForEdit(userId, transactionInfo, transactionId) {
  var cache = CacheService.getScriptCache();
  var cacheKey = transactionId ? 'edit_transaction_' + transactionId : 'edit_transaction_' + userId;
  Logger.log("CACHE SAVE: Key=" + cacheKey + ", TransactionInfo=" + JSON.stringify(transactionInfo));
  cache.put(cacheKey, JSON.stringify(transactionInfo), 1800); // 30 ph√∫t
}

function getTransactionForEdit(userId, transactionId) {
  var cache = CacheService.getScriptCache();
  var cacheKey = transactionId ? 'edit_transaction_' + transactionId : 'edit_transaction_' + userId;
  var data = cache.get(cacheKey);
  Logger.log("CACHE GET: Key=" + cacheKey + ", Found=" + (data ? "YES" : "NO"));
  if (data) {
    Logger.log("CACHE GET: Data=" + data);
  }
  return data ? JSON.parse(data) : null;
}

function clearTransactionForEdit(userId, transactionId) {
  var cache = CacheService.getScriptCache();
  var cacheKey = transactionId ? 'edit_transaction_' + transactionId : 'edit_transaction_' + userId;
  Logger.log("CACHE CLEAR: Key=" + cacheKey);
  cache.remove(cacheKey);
}

function getLastRowIndex(userId) {
  var sheet = getSheet(userId);
  return sheet.getLastRow();
}

// C·∫≠p nh·∫≠t giao d·ªãch trong sheet
function updateTransactionInSheet(transactionInfo) {
  var sheet = getSheet(transactionInfo.userId);
  var rowIndex = transactionInfo.rowIndex;
  
  // L·∫•y STT hi·ªán t·∫°i c·ªßa row ƒë·ªÉ gi·ªØ nguy√™n
  var currentSTT = sheet.getRange(rowIndex, 1).getValue();
  
  // C·∫≠p nh·∫≠t d·ªØ li·ªáu trong h√†ng (gi·ªù c√≥ 7 c·ªôt)
  sheet.getRange(rowIndex, 1, 1, 7).setValues([[
    currentSTT, // Gi·ªØ nguy√™n STT
    transactionInfo.date,
    transactionInfo.description,
    transactionInfo.amount,
    transactionInfo.allocation,
    transactionInfo.type,
    transactionInfo.subCategory
  ]]);
}

// H√†m debug callback ƒë·ªÉ ki·ªÉm tra
function debugCallback(callbackData, userId) {
  Logger.log("=== DEBUG CALLBACK ===");
  Logger.log("Callback data: " + callbackData);
  Logger.log("User ID: " + userId);
  
  if (callbackData === 'edit_transaction') {
    var transactionInfo = getTransactionForEdit(userId);
    Logger.log("Transaction info from cache: " + JSON.stringify(transactionInfo));
    if (!transactionInfo) {
      Logger.log("ERROR: No transaction info found in cache!");
    }
  } else if (callbackData.startsWith('edit_allocation_')) {
    var allocation = callbackData.replace('edit_allocation_', '');
    Logger.log("Selected allocation: " + allocation);
    var transactionInfo = getTransactionForEdit(userId);
    Logger.log("Transaction info: " + JSON.stringify(transactionInfo));
  } else if (callbackData.startsWith('edit_subcategory_')) {
    var parts = callbackData.split('_');
    var allocation = parts[2];
    var subCategory = parts.slice(3).join('_');
    Logger.log("Selected allocation: " + allocation + ", subCategory: " + subCategory);
  }
  
  Logger.log("=== END DEBUG ===");
}


// === SLASH COMMANDS SUPPORT FUNCTIONS ===

/* 
SETUP BOTFATHER COMMANDS:
ƒê·ªÉ hi·ªÉn th·ªã slash commands menu khi user g√µ "/", c·∫ßn setup trong BotFather:

1. M·ªü @BotFather tr√™n Telegram
2. G·ª≠i /setcommands  
3. Ch·ªçn bot c·ªßa b·∫°n
4. Copy v√† paste danh s√°ch commands sau:

chi - Nh·∫≠p chi ti√™u nhanh (VD: /chi ƒÉn s√°ng 25000)
thu - Nh·∫≠p thu nh·∫≠p nhanh (VD: /thu l∆∞∆°ng 10000000)
tongtien - Xem s·ªë ti·ªÅn hi·ªán t·∫°i
tongchi - Xem t·ªïng chi ti√™u
tongthunhap - Xem t·ªïng thu nh·∫≠p
xemhu - Xem chi ti·∫øt s·ªë d∆∞ c√°c h≈©
xemnhan - Xem chi ti√™u theo nh√£n
lichsu - Xem l·ªãch s·ª≠ giao d·ªãch
start - Kh·ªüi ƒë·ªông v√† gi·ªõi thi·ªáu bot
menu - Hi·ªÉn th·ªã menu ch√≠nh v·ªõi c√°c t√πy ch·ªçn
help - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng chi ti·∫øt
xoathunhap - X√≥a t·∫•t c·∫£ thu nh·∫≠p
xoachitieu - X√≥a t·∫•t c·∫£ chi ti√™u
xoatatca - X√≥a t·∫•t c·∫£ d·ªØ li·ªáu

5. G·ª≠i danh s√°ch commands tr√™n cho BotFather
6. BotFather s·∫Ω confirm setup th√†nh c√¥ng
7. Test b·∫±ng c√°ch g√µ "/" trong chat v·ªõi bot
*/

// Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ commands available
function sendCommandsList(chatId) {
  var commandsList = 
    "üêπ <b>H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG TH∆Ø K√ù CAPYBARA</b>\n\n" +
    
    "‚ö° <b>NH·∫¨P NHANH GIAO D·ªäCH:</b>\n" +
    "üí∏ <code>/chi [m√¥ t·∫£] [s·ªë ti·ªÅn]</code>\n" +
    "   V√≠ d·ª•: <code>/chi ƒÉn s√°ng 25000</code>\n" +
    "üíµ <code>/thu [m√¥ t·∫£] [s·ªë ti·ªÅn]</code>\n" +
    "   V√≠ d·ª•: <code>/thu l∆∞∆°ng 10000000</code>\n\n" +
    
    "üìä <b>XEM TH√îNG TIN:</b>\n" +
    "üí∞ <code>/tongtien</code> - Xem s·ªë ti·ªÅn hi·ªán t·∫°i\n" +
    "üí∏ <code>/tongchi</code> - Xem t·ªïng chi ti√™u\n" +
    "üíµ <code>/tongthunhap</code> - Xem t·ªïng thu nh·∫≠p\n" +
    "üè∫ <code>/xemhu</code> - Xem chi ti·∫øt s·ªë d∆∞ c√°c h≈©\n" +
    "üè∑Ô∏è <code>/xemnhan</code> - Xem chi ti√™u theo nh√£n\n" +
    "üìã <code>/lichsu</code> - Xem l·ªãch s·ª≠ giao d·ªãch\n\n" +
    
    "üìà <b>PH√ÇN T√çCH & BI·ªÇU ƒê·ªí:</b>\n" +
    "üìä <code>/tile</code> - Menu xem t·ªâ l·ªá % (h≈© & nh√£n)\n" +
    "ÔøΩ <code>/bieudo</code> - Menu xem bi·ªÉu ƒë·ªì (h≈© & nh√£n)\n\n" +
    
    "üõ† <b>QU·∫¢N L√ù D·ªÆ LI·ªÜU:</b>\n" +
    "üóë <code>/xoathunhap</code> - X√≥a t·∫•t c·∫£ thu nh·∫≠p\n" +
    "üóë <code>/xoachitieu</code> - X√≥a t·∫•t c·∫£ chi ti√™u\n" +
    "üóë <code>/xoatatca</code> - X√≥a t·∫•t c·∫£ d·ªØ li·ªáu\n\n" +
    
    "‚ÑπÔ∏è <b>KH√ÅC:</b>\n" +
    "üè† <code>/start</code> - Gi·ªõi thi·ªáu bot\n" +
    "üìã <code>/menu</code> - Hi·ªÉn th·ªã menu t∆∞∆°ng t√°c\n" +
    "‚ùì <code>/help</code> - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y\n\n" +
    
    "üí° <b>L∆ØU √ù:</b>\n" +
    "‚Ä¢ Sau khi nh·∫≠p <code>/chi</code> ho·∫∑c <code>/thu</code>, b·∫°n s·∫Ω ch·ªçn h≈© v√† nh√£n chi ti·∫øt\n" +
    "‚Ä¢ B·∫°n v·∫´n c√≥ th·ªÉ d√πng c√°ch c≈©: <code>m√¥ t·∫£ - s·ªë ti·ªÅn</code> (chi ti√™u) ho·∫∑c <code>m√¥ t·∫£ + s·ªë ti·ªÅn</code> (thu nh·∫≠p)\n" +
    "‚Ä¢ G√µ <code>/</code> ƒë·ªÉ xem menu l·ªánh nhanh";
    
  sendText(chatId, commandsList);
}

// X·ª≠ l√Ω command /chi [description] [amount] 
function handleQuickExpense(chatId, userId, input, userName) {
  try {
    // Parse input: "description amount" ho·∫∑c "description - amount"
    var parts;
    if (input.includes(' - ')) {
      parts = input.split(' - ');
    } else {
      // T√°ch description v√† amount b·∫±ng space cu·ªëi c√πng
      var lastSpaceIndex = input.lastIndexOf(' ');
      if (lastSpaceIndex === -1) {
        sendText(chatId, "‚ùå Sai ƒë·ªãnh d·∫°ng! S·ª≠ d·ª•ng: <code>/chi m√¥ t·∫£ s·ªë_ti·ªÅn</code>\nV√≠ d·ª•: <code>/chi ƒÉn s√°ng 25000</code>");
        return;
      }
      parts = [
        input.substring(0, lastSpaceIndex).trim(),
        input.substring(lastSpaceIndex + 1).trim()
      ];
    }
    
    if (parts.length !== 2) {
      sendText(chatId, "‚ùå Sai ƒë·ªãnh d·∫°ng! S·ª≠ d·ª•ng: <code>/chi m√¥ t·∫£ s·ªë_ti·ªÅn</code>\nV√≠ d·ª•: <code>/chi ƒÉn s√°ng 25000</code>");
      return;
    }
    
    var description = parts[0].trim();
    var amountStr = parts[1].trim();
    
    // Validate amount
    if (!amountStr.match(/^\d+$/)) {
      sendText(chatId, "‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá! Ch·ªâ nh·∫≠p s·ªë, v√≠ d·ª•: 25000");
      return;
    }
    
    var amount = parseInt(amountStr);
    if (amount <= 0) {
      sendText(chatId, "‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!");
      return;
    }
    
    // S·ª≠ d·ª•ng default allocation (c√≥ th·ªÉ n√¢ng c·∫•p th√†nh smart allocation sau)
    var allocation = "Chi ti√™u thi·∫øt y·∫øu";
    
    // L∆∞u temp transaction ƒë·ªÉ ch·ªçn subcategory
    var tempTransaction = {
      userId: userId,
      date: new Date().toISOString().split('T')[0],
      description: description,
      amount: amount,
      allocation: allocation,  
      type: "ChiTieu"
    };
    
    saveTempTransaction(userId, tempTransaction);
    
    // Hi·ªÉn th·ªã keyboard ch·ªçn nh√£n con v·ªõi allocationIndex
    var allocationIndex = allocations.indexOf(allocation);
    var keyboard = createSubCategoryKeyboard(allocation, false, null, allocationIndex);
    
    sendText(chatId,
      "‚ö° Chi ti√™u nhanh: " + description + " " + formatNumberWithSeparator(amount) + 
      " v√†o h≈© " + allocation + "\nVui l√≤ng ch·ªçn nh√£n c·ª• th·ªÉ:",
      keyboard
    );
    
  } catch (error) {
    Logger.log("Error in handleQuickExpense: " + error.toString());
    sendText(chatId, "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ªánh. Vui l√≤ng th·ª≠ l·∫°i!");
  }
}

// X·ª≠ l√Ω command /thu [description] [amount]
function handleQuickIncome(chatId, userId, input, userName) {
  try {
    // Parse input: "description amount" ho·∫∑c "description + amount"  
    var parts;
    if (input.includes(' + ')) {
      parts = input.split(' + ');
    } else {
      // T√°ch description v√† amount b·∫±ng space cu·ªëi c√πng
      var lastSpaceIndex = input.lastIndexOf(' ');
      if (lastSpaceIndex === -1) {
        sendText(chatId, "‚ùå Sai ƒë·ªãnh d·∫°ng! S·ª≠ d·ª•ng: <code>/thu m√¥ t·∫£ s·ªë_ti·ªÅn</code>\nV√≠ d·ª•: <code>/thu l∆∞∆°ng 10000000</code>");
        return;
      }
      parts = [
        input.substring(0, lastSpaceIndex).trim(),
        input.substring(lastSpaceIndex + 1).trim()
      ];
    }
    
    if (parts.length !== 2) {
      sendText(chatId, "‚ùå Sai ƒë·ªãnh d·∫°ng! S·ª≠ d·ª•ng: <code>/thu m√¥ t·∫£ s·ªë_ti·ªÅn</code>\nV√≠ d·ª•: <code>/thu l∆∞∆°ng 10000000</code>");
      return;
    }
    
    var description = parts[0].trim();
    var amountStr = parts[1].trim();
    
    // Validate amount
    if (!amountStr.match(/^\d+$/)) {
      sendText(chatId, "‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá! Ch·ªâ nh·∫≠p s·ªë, v√≠ d·ª•: 10000000");
      return;
    }
    
    var amount = parseInt(amountStr);
    if (amount <= 0) {
      sendText(chatId, "‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!");
      return;
    }
    
    // S·ª≠ d·ª•ng default allocation (c√≥ th·ªÉ n√¢ng c·∫•p th√†nh smart allocation sau)
    var allocation = "Chi ti√™u thi·∫øt y·∫øu";
    
    // L∆∞u temp transaction ƒë·ªÉ ch·ªçn subcategory
    var tempTransaction = {
      userId: userId,
      date: new Date().toISOString().split('T')[0],
      description: description,
      amount: amount,
      allocation: allocation,
      type: "ThuNhap"
    };
    
    saveTempTransaction(userId, tempTransaction);
    
    // Hi·ªÉn th·ªã keyboard ch·ªçn nh√£n con v·ªõi allocationIndex
    var allocationIndex = allocations.indexOf(allocation);
    var keyboard = createSubCategoryKeyboard(allocation, false, null, allocationIndex);
    
    sendText(chatId,
      "‚ö° Thu nh·∫≠p nhanh: " + description + " " + formatNumberWithSeparator(amount) + 
      " v√†o h≈© " + allocation + "\nVui l√≤ng ch·ªçn nh√£n c·ª• th·ªÉ:",
      keyboard
    );
    
  } catch (error) {
    Logger.log("Error in handleQuickIncome: " + error.toString());
    sendText(chatId, "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ªánh. Vui l√≤ng th·ª≠ l·∫°i!");
  }
}


function getSheet(userId) {
  

  
  var usersSpreadsheet = SpreadsheetApp.openById(main_sheet);
  var usersSheet = usersSpreadsheet.getSheetByName('UserList'); 

  
  var userData = usersSheet.getDataRange().getValues();
  var sheetId = null;
  for (var i = 0; i < userData.length; i++) {
    if (userData[i][0] === userId) {
      sheetId = userData[i][1];
      break;
    }
  }

  if (!sheetId) {
    
    var newSpreadsheet = SpreadsheetApp.create('Expense Tracker for ' + userId);
    sheetId = newSpreadsheet.getId();
    
    // L·∫•y th∆∞ m·ª•c "Money Capybara"
    var targetFolder = getOrCreateFolder('Money Capybara');
    
    // Di chuy·ªÉn file v√†o th∆∞ m·ª•c
    var file = DriveApp.getFileById(sheetId);
    
    // Th√™m file v√†o th∆∞ m·ª•c ƒë√≠ch
    targetFolder.addFile(file);
    
    // X√≥a file kh·ªèi th∆∞ m·ª•c g·ªëc (My Drive)
    var rootFolder = DriveApp.getRootFolder();
    rootFolder.removeFile(file);

    
    usersSheet.appendRow([userId, sheetId]);

    
    var sheet = newSpreadsheet.getActiveSheet();
    sheet.getRange('A1:G1').setValues([
      ["STT", "Date", "Description", "Amount", "Allocation", "Type", "SubCategory"]
    ]);

    
    sheet.deleteColumns(8, 19); 

    
    var numRows = sheet.getMaxRows();
    if (numRows > 2) {
      sheet.deleteRows(3, numRows - 2); 
    }
  }

  
  var sheet = SpreadsheetApp.openById(sheetId).getActiveSheet();
  return sheet;
}


function sendTotalIncomeSummary(context) {
  const totalIncome = getTotalAmountByType(context.chatId, TRANSACTION_TYPE.INCOME);
  const totalExpenses = getTotalAmountByType(context.chatId, TRANSACTION_TYPE.EXPENSE);
  const currentBalance = getCurrentBalance(context.chatId);

  let message = `üí∞ T·ªïng thu nh·∫≠p c·ªßa b·∫°n l√†: ${formatNumberWithSeparator(totalIncome)}ƒë\n`;
  message += `üíπ S·ªë ti·ªÅn hi·ªán t·∫°i c·ªßa b·∫°n l√†: ${formatNumberWithSeparator(currentBalance)}ƒë\n`;

  const menu = {
    inline_keyboard: [
      [
        { text: 'üí∏ Xem T·ªïng Chi Ti√™u', callback_data: 'totalchi' },
        { text: 'üè∫ Xem Chi Ti·∫øt C√°c H≈©', callback_data: 'getTotalAllocationBalances' }
      ]
    ]
  };

  sendText(context.chatId, message, menu);
}

/**
 * OPTIMIZED: Only read Amount (D) and Type (F) columns instead of entire sheet
 */
function getTotalAmountByType(userId, type) {
  const sheet = getSheet(userId);
  const lastRow = sheet.getLastRow();
  
  if (lastRow < 2) return 0; // No data rows
  
  // Only read columns D and F (Amount and Type) from row 2 to last row
  const data = sheet.getRange(2, 4, lastRow - 1, 1).getValues(); // Amount column (D)
  const typeData = sheet.getRange(2, 6, lastRow - 1, 1).getValues(); // Type column (F)
  
  let total = 0;
  for (let i = 0; i < data.length; i++) {
    if (typeData[i][0] === type) {
      total += data[i][0];
    }
  }
  return total;
}

function sendTransactionHistoryPart(chatId, userId, transactions, chunkIndex, chunkSize, totalChunks, totalThuNhap, totalChiTieu) {
  var startIndex = chunkIndex * chunkSize;
  var endIndex = Math.min((chunkIndex + 1) * chunkSize, transactions.length);
  var message = "L·ªãch s·ª≠ chi ti√™u c·ªßa b·∫°n (Trang " + (chunkIndex + 1) + " / " + totalChunks + "):\n";

  function formatTransaction(transaction, index) {
    var formattedDate = new Intl.DateTimeFormat('vi-VN', { day: 'numeric', month: 'numeric', year: 'numeric' }).format(transaction.date);
    var formattedAmount = formatNumberWithSeparator(transaction.amount);

    var typeLabel = "";
    var transactionAmount = transaction.amount;

    if (transaction.type === "ChiTieu") {
      typeLabel = "Chi ti√™uüí∏";
      transactionAmount = "<s>-" + formattedAmount + "</s>";
      totalChiTieu += transaction.amount;
    } else if (transaction.type === "ThuNhap") {
      typeLabel = "Thu nh·∫≠püí∞";
      transactionAmount = "<b>+" + formattedAmount + "</b>";
      totalThuNhap += transaction.amount;
    } else {
      typeLabel = transaction.type;
    }

    var transactionString = `
${transaction.stt}. Ng√†y: ${formattedDate}
- M√¥ t·∫£: ${transaction.description}
- S·ªë ti·ªÅn: ${transactionAmount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
- H≈©: ${transaction.allocation}
<i>- Lo·∫°i:</i> ${typeLabel}
`;

    return transactionString;
  }

  for (var i = startIndex; i < endIndex; i++) {
    var transaction = transactions[i];
    message += formatTransaction(transaction, i);
  }

  
  if (chunkIndex == totalChunks - 1) {
    var currentBalance = getCurrentBalance(userId);
    message += "<b>üí∏ T·ªïng Chi ti√™u: <s>" + totalChiTieu.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</s></b>\n";
    message += "<b>üí∞ T·ªïng Thu nh·∫≠p: " + totalThuNhap.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</b>\n";
    message += "<b>üíπ S·ªë ti·ªÅn hi·ªán t·∫°i c·ªßa b·∫°n l√†: " + currentBalance.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</b>\n";

  }

  
  sendText(chatId, message);

  
  if (chunkIndex < totalChunks - 1) {
    Utilities.sleep(3000); 
    sendTransactionHistoryPart(chatId, userId, transactions, chunkIndex + 1, chunkSize, totalChunks, totalThuNhap, totalChiTieu);
  }
}


function sendTransactionHistory(chatId, userId) {
  var transactions = getTransactionHistory(userId);
  if (transactions.length === 0) {
    sendText(chatId, "B·∫°n ch∆∞a c√≥ chi ti√™u n√†o.");
    return;
  }

  var chunkSize = 16; 
  var totalChunks = Math.ceil(transactions.length / chunkSize);
  var totalThuNhap = 0; 
  var totalChiTieu = 0; 

  sendTransactionHistoryPart(chatId, userId, transactions, 0, chunkSize, totalChunks, totalThuNhap, totalChiTieu);
}

function getTransactionHistory(userId) {
  var sheet = getSheet(userId);
  var data = sheet
    .getDataRange()
    .getValues();
  var transactions = [];
  for (var i = 1; i < data.length; i++) {
    var transaction = {
      stt: data[i][0],        // STT
      date: data[i][1],       // Date
      description: data[i][2], // Description  
      amount: data[i][3],     // Amount
      allocation: data[i][4], // Allocation
      type: data[i][5],       // Type
      subCategory: data[i][6] // SubCategory
    };
    transactions.push(transaction);
  }
  return transactions;
}


function formatDate(dateStr) {
  var date = new Date(dateStr);
  var day = date.getDate();
  var month = date.getMonth() + 1;
  var year = date.getFullYear();
  return day + "/" + month + "/" + year;
}


function sendTransactionHistoryByDateRange(chatId, userId, startDate, endDate) {
  var transactions = getTransactionHistoryByDateRange(userId, startDate, endDate);
  var chunkSize = 16;
  var totalChunks = Math.ceil(transactions.length / chunkSize);

  
  var totalChiTieu = 0;
  var totalThuNhap = 0;

  function sendTransactionHistoryPart(chunkIndex) {
    var message = "L·ªãch s·ª≠ chi ti√™u t·ª´ " + formatDate(startDate) + " ƒë·∫øn " + formatDate(endDate) +
      " (Trang " + (chunkIndex + 1) + " / " + totalChunks + "):\n\n";

    var startIndex = chunkIndex * chunkSize;
    var endIndex = Math.min((chunkIndex + 1) * chunkSize, transactions.length);

    for (var i = startIndex; i < endIndex; i++) {
      var transaction = transactions[i];
      var formattedDate = formatDate(transaction.date);
      var typeLabel = "";
      var transactionAmount = transaction.amount;
      var formatTransactionAmount = new Intl.NumberFormat('vi-VN').format(transactionAmount);

      if (transaction.type === "ChiTieu") {
        typeLabel = "Chi ti√™uüí∏";
        transactionAmount = "<s>-" + formatTransactionAmount + "ƒë</s>";
        totalChiTieu += transaction.amount;
      } else if (transaction.type === "ThuNhap") {
        typeLabel = "Thu nh·∫≠püí∞";
        transactionAmount = "<b>+" + formatTransactionAmount + "ƒë</b>";
        totalThuNhap += transaction.amount;
      } else {
        typeLabel = transaction.type;
      }

      message += `${i + 1}. Ng√†y: ${formattedDate}\n`;
      message += "- M√¥ t·∫£: " + transaction.description + "\n";
      message += "- S·ªë ti·ªÅn: " + transactionAmount + "\n";
      message += "- H≈©: " + transaction.allocation + "\n";
      message += "<i>- Lo·∫°i: " + typeLabel + "</i>\n\n";
    }

    
    if (chunkIndex === totalChunks - 1) {
      var currentBalance = getCurrentBalance(userId);
      message += "<b>üí∏ T·ªïng Chi ti√™u: <s>" + totalChiTieu.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</s></b>\n";
      message += "<b>üí∞ T·ªïng Thu nh·∫≠p: " + totalThuNhap.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</b>\n";
      message += "<b>üíπ S·ªë ti·ªÅn hi·ªán t·∫°i: " + currentBalance.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</b>\n";
    }

    sendText(chatId, message);

    if (chunkIndex < totalChunks - 1) {
      Utilities.sleep(3000);
      sendTransactionHistoryPart(chunkIndex + 1);
    }
  }

  if (transactions.length === 0) {
    sendText(chatId, "Kh√¥ng c√≥ giao d·ªãch n√†o trong kho·∫£ng th·ªùi gian n√†y.");
  } else {
    sendTransactionHistoryPart(0);
  }
}






function getTransactionHistoryByDateRange(userId, startDate, endDate) {
  var sheet = getSheet(userId);
  var data = sheet
    .getDataRange()
    .getValues();
  var transactions = [];
  for (var i = 1; i < data.length; i++) {
    var transactionDate = new Date(data[i][1]); // Date gi·ªù ·ªü index 1
    if (transactionDate >= startDate && transactionDate < endDate) {
      var transaction = {
        stt: data[i][0],        // STT
        date: data[i][1],       // Date
        description: data[i][2], // Description
        amount: data[i][3],     // Amount
        allocation: data[i][4], // Allocation
        type: data[i][5],       // Type
        subCategory: data[i][6] // SubCategory
      };
      transactions.push(transaction);
    }
  }
  return transactions;
}

function formatDate(date) {
  var day = date.getDate();
  var month = date.getMonth() + 1;
  var year = date.getFullYear();
  return day + "/" + month + "/" + year;
}

function deleteTransactionByRow(userId, rowToDelete) {
  var sheet = getSheet(userId);
  var data = sheet.getDataRange().getValues();

  
  var rowIndex = rowToDelete - 1; 

  if (rowIndex >= 0 && rowIndex < data.length) {
    
    sheet.deleteRow(rowIndex + 2); 
    return true; 
  } else {
    return false; 
  }
}


function isValidEmail(email) {
  var re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return re.test(email);
}



function saveEmailToSheet(userId, email) {
  var usersSpreadsheet = SpreadsheetApp.openById(main_sheet);
  var usersSheet = usersSpreadsheet.getSheetByName('UserList'); 

  var data = usersSheet.getDataRange().getValues();

  for (var i = 0; i < data.length; i++) {
    if (data[i][0] === userId) { 
      usersSheet.getRange(i + 1, 3).setValue(email); 
      break;
    }
  }
}

function sendBankOptions(chatId) {
  var bankKeyboard = {
    "inline_keyboard": [
      [
        { text: 'VIB', callback_data: 'bank_VIB' },
        { text: 'CAKE', callback_data: 'bank_CAKE' },
        { text: 'VPBank', callback_data: 'bank_VPBank' },
        { text: 'ACB', callback_data: 'bank_ACB' }
      ]
    ]
  };
  sendText(chatId, "Vui l√≤ng ch·ªçn ng√¢n h√†ng c·ªßa b·∫°n:", bankKeyboard);
}


function saveBankToSheet(userId, bankName) {
  var usersSpreadsheet = SpreadsheetApp.openById(main_sheet);
  var usersSheet = usersSpreadsheet.getSheetByName('UserList'); 

  var data = usersSheet.getDataRange().getValues();

  for (var i = 0; i < data.length; i++) {
    if (data[i][0] === userId) { 
      usersSheet.getRange(i + 1, 4).setValue(bankName); 
      break;
    }
  }
}


function stripHtml(html) {
  var doc = DocumentApp.create('temp');
  doc.getBody().setText(html);
  var text = doc.getBody().getText();
  DriveApp.getFileById(doc.getId()).setTrashed(true); 
  return text;
}

function sendToGeminiAPI(emailBody) {
  const url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=" + gemini_token;

  const payload = JSON.stringify({
    contents: [
      {
        parts: [
          {
            text: "B·∫°n l√† m·ªôt AI Chi ti√™u, h√£y cho t√¥i ti·ªÅn chi ti√™u, n·ªôi dung(N·ªôi dung, di·ªÖn gi·∫£i) giao d·ªãch v√† lo·∫°i ThuNhap hay ChiTieu, n·∫øu kh√¥ng ph·∫£i c√≥ r√µ s·ªë ti·ªÅn, n·ªôi dung v√† lo·∫°i Thu nh·∫≠p/Chi ti√™u th√¨ ph·∫£n h·ªìi l·∫°i tr·ªëng cho t√¥i, ƒë√¢y l√† mail: " + emailBody
          }
        ]
      }
    ],
    generationConfig: {
      temperature: 0.55,
      topP: 0.95,
      topK: 40,
      maxOutputTokens: 8192,
      responseMimeType: "application/json",
      responseSchema: {
        type: "object",
        properties: {
          amount: { type: "string" },
          type: { type: "string" },
          description: { type: "string" }
        }
      }
    }
  });

  const options = {
    method: "POST",
    contentType: "application/json",
    payload: payload
  };

  try {
    const response = UrlFetchApp.fetch(url, options); 
    const responseData = JSON.parse(response.getContentText()); 

    
    const candidates = responseData.candidates;
    if (candidates && candidates.length > 0) {
      const content = candidates[0].content; 
      const parts = content.parts;
      if (parts && parts.length > 0) {
        const text = parts[0].text; 
        return JSON.parse(text); 
      }
    }
    return null; 
  } catch (error) {
    Logger.log("L·ªói khi g·ªçi API: " + error.message);
    return null; 
  }
}



var geminiApiKeys = getApiKeys();


function getRandomGeminiApiKey() {
  var randomIndex = Math.floor(Math.random() * geminiApiKeys.length);
  return geminiApiKeys[randomIndex];
}




function processVoiceMessage(fileId, context) {
  var telegramUrl = "https://api.telegram.org/bot" + token;

  
  var getFileUrl = telegramUrl + "/getFile?file_id=" + fileId;
  var getFileResponse = UrlFetchApp.fetch(getFileUrl);
  var fileInfo = JSON.parse(getFileResponse.getContentText());
  if (!fileInfo.ok) {
    Logger.log("Kh√¥ng l·∫•y ƒë∆∞·ª£c file t·ª´ Telegram.");
    sendText(context.chatId, "Xin l·ªói, kh√¥ng th·ªÉ x·ª≠ l√Ω tin nh·∫Øn voice c·ªßa b·∫°n.");
    return;
  }
  var filePath = fileInfo.result.file_path;
  var voiceUrl = "https://api.telegram.org/file/bot" + token + "/" + filePath;

  
  var voiceResponse = UrlFetchApp.fetch(voiceUrl);
  var blob = voiceResponse.getBlob();
  var mimeType = blob.getContentType();
  if (mimeType === "application/octet-stream") {
    mimeType = "audio/ogg";
  }
  var numBytes = blob.getBytes().length;
  var displayName = "voice_file";

  
  var apiKey = getRandomGeminiApiKey();
  var initUrl = "https://generativelanguage.googleapis.com/upload/v1beta/files?key=" + apiKey;
  var initHeaders = {
    "X-Goog-Upload-Protocol": "resumable",
    "X-Goog-Upload-Command": "start",
    "X-Goog-Upload-Header-Content-Length": String(numBytes),
    "X-Goog-Upload-Header-Content-Type": mimeType,
    "Content-Type": "application/json"
  };
  var initPayload = JSON.stringify({ file: { display_name: displayName } });
  var initOptions = {
    "method": "post",
    "headers": initHeaders,
    "payload": initPayload,
    "muteHttpExceptions": true
  };

  var initResponse = UrlFetchApp.fetch(initUrl, initOptions);
  var initResponseHeaders = initResponse.getAllHeaders();
  var uploadUrl = initResponseHeaders["X-Goog-Upload-Url"] || initResponseHeaders["x-goog-upload-url"];
  if (!uploadUrl) {
    Logger.log("Kh√¥ng l·∫•y ƒë∆∞·ª£c upload URL: " + initResponse.getContentText());
    sendText(context.chatId, "L·ªói khi x·ª≠ l√Ω file voice.");
    return;
  }

  
  var uploadHeaders = {
    "X-Goog-Upload-Offset": "0",
    "X-Goog-Upload-Command": "upload, finalize"
  };
  var uploadOptions = {
    "method": "post",
    "headers": uploadHeaders,
    "payload": blob.getBytes(),
    "muteHttpExceptions": true
  };

  var uploadResponse = UrlFetchApp.fetch(uploadUrl, uploadOptions);
  var uploadResult = JSON.parse(uploadResponse.getContentText());
  var fileUri = uploadResult.file.uri;
  if (!fileUri) {
    Logger.log("Upload th·∫•t b·∫°i: " + uploadResponse.getContentText());
    sendText(context.chatId, "Upload file voice th·∫•t b·∫°i.");
    return;
  }
  Logger.log("File URI: " + fileUri);

  
  var generateUrl = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=" + apiKey;
  var generatePayload = JSON.stringify({
    contents: [{
      parts: [
        { "text": 'B·∫°n l√† m·ªôt AI Chi ti√™u. H√£y tr√≠ch xu·∫•t th√¥ng tin v·ªÅ s·ªë ti·ªÅn, n·ªôi dung v√† lo·∫°i giao d·ªãch (type lu√¥n ƒë·∫∑t l√†: Thu nh·∫≠p ho·∫∑c Chi ti√™u) t·ª´ gi·ªçng n√≥i. L∆∞u √Ω: nh·∫≠n di·ªán c√°c bi·ªÉu th·ª©c r√∫t g·ªçn v√† c√°c t·ª´ l√≥ng/ƒë·ªãa ph∆∞∆°ng li√™n quan ƒë·∫øn ti·ªÅn t·ªá. V√≠ d·ª•: "c·ªß" t∆∞∆°ng ƒë∆∞∆°ng v·ªõi "tri·ªáu", "k ho·∫∑c ca ho·∫∑c ka" t∆∞∆°ng ƒë∆∞∆°ng v·ªõi "trƒÉm", "ngh√¨n" ho·∫∑c "ng√†n" t∆∞∆°ng ƒë∆∞∆°ng v·ªõi "ngh√¨n", "ty" ho·∫∑c "t·ªâ" t∆∞∆°ng ƒë∆∞∆°ng v·ªõi "t·ª∑", "l√≠t" t∆∞∆°ng ƒë∆∞∆°ng v·ªõi "trƒÉm" (c√°c t·ª´ r√∫t g·ªçn n√†y ch·ªâ √°p d·ª•ng khi ƒëi k√®m v·ªõi gi√° ti·ªÅn). N·∫øu kh√¥ng nghe r√µ ho·∫∑c kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c s·ªë ti·ªÅn, h√£y tr·∫£ v·ªÅ r·ªóng {}. Tuy·ªát ƒë·ªëi kh√¥ng ƒë∆∞·ª£c t·ª± suy ƒëo√°n hay ch·∫ø th√¥ng tin.' },
        { "file_data": { "mime_type": mimeType, "file_uri": fileUri } }
      ]
    }],
    generationConfig: {
      "temperature": 0.2,
      "topK": 64,
      "topP": 0.95,
      "maxOutputTokens": 8192,
      "responseMimeType": "application/json",
      "responseSchema": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "amount": { "type": "string" },
            "type": { "type": "string" },
            "description": { "type": "string" }
          }
        }
      }
    }
  });

  var generateOptions = {
    "method": "post",
    "contentType": "application/json",
    "payload": generatePayload,
    "muteHttpExceptions": true
  };

  var generateResponse = UrlFetchApp.fetch(generateUrl, generateOptions);
  Logger.log("Response: " + generateResponse.getContentText());

  
  
  try {
    var responseData = JSON.parse(generateResponse.getContentText());
    if (responseData && responseData.candidates && responseData.candidates.length > 0) {
      var content = responseData.candidates[0].content;
      if (content.parts && content.parts.length > 0) {
        var resultText = content.parts[0].text;
        
        
        var transactions = JSON.parse(resultText);

        
        recordTransactionsFromAI(context.chatId, transactions, context.chatType, context.userName);
      } else {
        sendText(context.chatId, "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c n·ªôi dung ph·∫£n h·ªìi t·ª´ h·ªá th·ªëng AI.");
      }
    } else {
      sendText(context.chatId, "AI kh√¥ng nghe r√µ ƒë∆∞·ª£c Voice, vui l√≤ng th·ª≠ l·∫°i.");
    }
  } catch (err) {
    Logger.log("L·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi: " + err);
    sendText(context.chatId, "AI kh√¥ng nghe r√µ ƒë∆∞·ª£c Voice, vui l√≤ng th·ª≠ l·∫°i.");
  }
}

function recordTransactionsFromAI(chatId, transactions, chatType = 'private', senderName = null) {
  
  var isInvalid = transactions.some(function(tx) {
    return !tx.amount || tx.amount.trim() === "";
  });
  
  if (isInvalid) {
    sendText(chatId, "AI kh√¥ng nghe r√µ ƒë∆∞·ª£c Voice, vui l√≤ng th·ª≠ l·∫°i.");
    return;
  }
  
  var userId = chatId; 
  var date = new Date();
  var formattedDate = formatDate(date); 
  var messages = [];
  
  transactions.forEach(function (tx) {
    
    var amount = parseInt(tx.amount.replace(/,/g, ''), 10);
    var description = tx.description;
    
    
    var typeLower = tx.type.toLowerCase();
    var transactionType = typeLower.includes("thu") ? "ThuNhap" : typeLower.includes("chi") ? "ChiTieu" : tx.type;
    
    
    var allocation = "Chi ti√™u thi·∫øt y·∫øu";
    
    
    var sequenceNumber = addTransactionData(userId, date, description, amount, allocation, transactionType, "", chatType, senderName);
    
    
    if (transactionType === "ThuNhap") {
      messages.push("‚úÖ Giao d·ªãch #" + sequenceNumber + " - B·∫°n ƒë√£ thu nh·∫≠p: " + description + " " + amount.toLocaleString("vi-VN") +
        " v√†o ng√†y " + formattedDate + " v√† ph√¢n b·ªï thu nh·∫≠p c·ªßa b·∫°n v√†o h≈© " + allocation + ".");
    } else if (transactionType === "ChiTieu") {
      messages.push("‚úÖ Giao d·ªãch #" + sequenceNumber + " - B·∫°n ƒë√£ chi ti√™u: " + description + " " + amount.toLocaleString("vi-VN") +
        " v√†o ng√†y " + formattedDate + " v√† ph√¢n b·ªï chi ti√™u c·ªßa b·∫°n v√†o h≈© " + allocation + ".");
    } else {
      messages.push("‚úÖ Giao d·ªãch #" + sequenceNumber + " - Giao d·ªãch: " + description + " " + amount.toLocaleString("vi-VN") +
        " v√†o ng√†y " + formattedDate + ".");
    }
  });
  
  
  sendText(chatId, messages.join("\n"));
}






const bankDomains = {
  "VIB": "vib.com.vn",
  "CAKE": "no-reply@cake.vn",
  "VPBank": ["vpbankonline@vpb.com.vn", "customercare@care.vpb.com.vn"],
  "ACB": "mailalert@acb.com.vn"
};

// =================== NEW REFACTORED HANDLER FUNCTIONS ===================

/**
 * Main entry point - Router pattern (NEW VERSION)
 */
function doPost(e) {
  try {
    const contents = JSON.parse(e.postData.contents);
    Logger.log("=== DOPOST DEBUG ===");
    Logger.log("Request contents: " + JSON.stringify(contents));

    if (contents.callback_query) {
      const chatType = contents.callback_query.message.chat.type;
      handleCallbackQuery({ ...contents.callback_query, chatType: chatType });
    } else if (contents.message) {
      const chatType = contents.message.chat.type;
      handleMessage({ ...contents.message, chatType: chatType });
    }
  } catch (err) {
    Logger.log("Error in doPost: " + err.toString());
  }
}

/**
 * Handle all callback queries with improved context pattern
 */
function handleCallbackQuery(callbackQuery) {
  const context = {
    chatId: callbackQuery.from.id, // User ID for temp transaction storage
    groupChatId: callbackQuery.message.chat.id, // Group ID for sending messages
    userName: callbackQuery.from.first_name,
    data: callbackQuery.data,
    messageId: callbackQuery.message.message_id,
    chatType: callbackQuery.chatType // Add chatType to context
  };
  
  Logger.log("CALLBACK QUERY: " + context.data + " from user " + context.chatId + " in chat type: " + context.chatType + " group: " + context.groupChatId);

  // Route to specific handlers based on callback data
  if (context.data === 'connect_email') {
    processConnectEmail(context);
  } else if (context.data.startsWith(CALLBACK_PREFIX.BANK)) {
    processBankSelection(context);
  } else if (context.data.startsWith(CALLBACK_PREFIX.SUBCATEGORY) || context.data.startsWith(CALLBACK_PREFIX.SUB)) {
    processSubcategorySelection(context);
  } else if (context.data === 'edit_transaction' || context.data.startsWith(CALLBACK_PREFIX.EDIT_TRANSACTION)) {
    processEditTransaction(context);
  } else if (context.data.startsWith(CALLBACK_PREFIX.EDIT_ALLOCATION) || context.data.startsWith(CALLBACK_PREFIX.EDIT_ALLOC)) {
    processEditAllocation(context);
  } else if (context.data.startsWith(CALLBACK_PREFIX.EDIT_SUBCATEGORY) || context.data.startsWith(CALLBACK_PREFIX.EDIT_SUB)) {
    processEditSubcategory(context);
  } else if (context.data.startsWith(CALLBACK_PREFIX.ALLOCATION)) {
    processAllocationSelection(context);
  } else if (context.data === 'back_to_allocation') {
    processBackToAllocation(context);
  } else if (context.data === 'cancel_new') {
    processCancelNew(context);
  } else if (context.data.startsWith(CALLBACK_PREFIX.CANCEL_EDIT)) {
    processCancelEdit(context);
  } else if (context.data === 'totalchi') {
    processShowTotalExpenses(context);
  } else if (context.data === 'totalthunhap') {
    processShowTotalIncome(context);
  } else if (context.data === 'currentbalance') {
    processShowCurrentBalance(context);
  } else if (context.data === 'getTotalAllocationBalances') {
    processShowAllocationBalances(context);
  } else if (context.data === 'show_percentage_menu') {
    sendPercentageSelectionMenu(context.chatId, null, context.messageId);
  } else if (context.data === 'show_chart_menu') {
    sendChartSelectionMenu(context.chatId, null, context.messageId);
  } else if (context.data === 'percentage_allocation_expense') {
    sendAllocationPercentages(context.chatId, null, context.messageId);
  } else if (context.data === 'percentage_allocation_income') {
    sendIncomePercentages(context.chatId, null, context.messageId);
  } else if (context.data === 'percentage_subcategory') {
    sendSubCategoryPercentages(context.chatId, null, context.messageId);
  } else if (context.data === 'chart_allocation_expense') {
    sendAllocationChart(context.chatId, null, context.messageId);
  } else if (context.data === 'chart_allocation_income') {
    sendIncomeChart(context.chatId, null, context.messageId);
  } else if (context.data === 'chart_subcategory') {
    sendSubCategoryChart(context.chatId, null, context.messageId);
  } else if (context.data === 'history') {
    processTransactionHistoryWithPagination(context, 1); // Default to page 1
  } else if (context.data.startsWith('history_page_')) {
    const page = parseInt(context.data.replace('history_page_', ''));
    processTransactionHistoryWithPagination(context, page);
  } else if (context.data === 'view_subcategory_summary') {
    sendTotalSubCategorySummary(context.chatId, null, context.messageId);
  } else if (context.data === 'view_by_subcategory') {
    processViewBySubcategory(context);
  } else if (context.data === 'view_by_allocation') {
    processViewByAllocation(context);
  } else if (context.data.startsWith(CALLBACK_PREFIX.VIEW_ALLOCATION_DETAIL)) {
    processViewAllocationDetail(context);
  } else if (context.data.startsWith(CALLBACK_PREFIX.VIEW_ALLOCATION_TRANSACTIONS)) {
    processViewAllocationTransactions(context);
  } else if (context.data.startsWith(CALLBACK_PREFIX.VIEW_SUBCATEGORY)) {
    processViewSubcategory(context);
  } else if (context.data.startsWith(CALLBACK_PREFIX.VIEW_ALLOCATION_SUBS)) {
    processViewAllocationSubs(context);
  } else if (context.data === 'back_to_main_view') {
    processBackToMainView(context);
  } else if (context.data === 'export_this_month') {
    processExportRequest(context, 'this_month');
  } else if (context.data === 'export_last_month') {
    processExportRequest(context, 'last_month');
  } else if (context.data === 'export_all_time') {
    processExportRequest(context, 'all_time');
  } else if (context.data === 'view_budget_status') {
    processViewBudgetStatus(context);
  } else if (context.data === 'add_edit_budget') {
    processAddEditBudget(context);
  } else if (context.data === 'delete_budget') {
    processDeleteBudget(context);
  } else {
    Logger.log("Unhandled callback: " + context.data);
  }
}

/**
 * Handle all text messages and commands
 */
/**
 * Handle all text messages and commands - IMPROVED with Context & Unified Parser
 */
function handleMessage(message) {
  const context = {
    chatId: message.chat.id,
    userName: message.from.first_name,
    text: message.text,
    message: message, // Pass full message object if needed
    chatType: message.chat.type // Add chatType to context
  };

  Logger.log("MESSAGE: " + context.text + " from user " + context.chatId + " in chat type: " + context.chatType);

  // Handle voice messages with loading indicator
  if (message.voice) {
    sendLoadingMessage(context.chatId, "x·ª≠ l√Ω tin nh·∫Øn voice");
    // Schedule the long-running task to run asynchronously
    ScriptApp.newTrigger('triggerProcessVoiceMessage')
      .timeBased()
      .after(1000) // Run after 1 second
      .create();
    
    // Store context and fileId temporarily for the triggered function to access
    const properties = PropertiesService.getScriptProperties();
    properties.setProperty('VOICE_MESSAGE_FILE_ID', message.voice.file_id);
    properties.setProperty('VOICE_MESSAGE_CONTEXT', JSON.stringify(context));

    return;
  }

  // Handle email validation
  if (isValidEmail(context.text)) {
    saveEmailToSheet(context.chatId, context.text);
    sendBankOptions(context.chatId);
    return;
  }

  // Route commands and text
  if (context.text === '/start') {
    processStartCommand(context);
  } else if (context.text === '/startgroup') {
    processStartGroupCommand(context);
  } else if (context.text === '/menu') {
    processMenuCommand(context);
  } else if (context.text === '/help' || context.text === '/commands') {
    sendCommandsList(context.chatId);
  } else if (context.text === '/tongtien') {
    processShowTotalMoney(context.chatId);
  } else if (context.text === '/tongchi') {
    processShowTotalExpenseCommand(context);
  } else if (context.text === '/tongthunhap') {
    sendTotalIncomeSummary(context);
  } else if (context.text === '/xemhu') {
    sendLoadingMessage(context.chatId, "t√≠nh to√°n s·ªë d∆∞ c√°c h≈©");
    sendTotalPhanboSummary(context);
  } else if (context.text === '/xemnhan') {
    sendLoadingMessage(context.chatId, "t√≠nh to√°n chi ti√™u theo nh√£n");
    sendTotalSubCategorySummary(context);
  } else if (context.text === '/tile' || context.text === '/tyl–µ') {
    sendPercentageSelectionMenu(context.chatId, context.chatId);
  } else if (context.text === '/bi–µudo' || context.text === '/chart') {
    sendChartSelectionMenu(context.chatId, context.chatId);
  } else if (context.text === '/lichsu') {
    processTransactionHistoryCommand(context);
  } else if (context.text.startsWith('/chi ')) {
    processQuickExpenseCommand(context);
  } else if (context.text.startsWith('/thu ')) {
    processQuickIncomeCommand(context);
  } else if (context.text.startsWith('/del')) {
    processDeleteCommand(context.chatId, context.text);
  } else if (context.text === '/xoathunhap') {
    processDeleteIncome(context.chatId);
  } else if (context.text === '/xoachitieu') {
    processDeleteExpenses(context.chatId);
  } else if (context.text === '/xoatatca') {
    processDeleteAll(context.chatId);
  } else if (context.text.startsWith("/history")) {
    processHistoryCommand(context.chatId, context.text);
  } else if (context.text === '/export') {
    processExportCommand(context);
  } else if (context.text === '/budget' || context.text === '/ngansach') {
    processBudgetCommand(context);
  } else if (context.text.includes(" + ") || context.text.includes(" - ")) {
    processTransactionText(context);
  } else {
    processDefaultMessage(context);
  }
}

// =================== UX HELPERS ===================

/**
 * Send loading message for long-running operations
 */
function sendLoadingMessage(chatId, operation = "x·ª≠ l√Ω") {
  sendText(chatId, "‚è≥ ƒêang " + operation + ", vui l√≤ng ch·ªù...");
}

/**
 * Edit loading message to show result
 */
function updateLoadingMessage(chatId, messageId, result) {
  if (messageId) {
    editText(chatId, messageId, result, null);
  } else {
    sendText(chatId, result);
  }
}

/**
 * IMPROVED PAGINATION: Create keyboard for transaction history navigation
 */
function createPaginationKeyboard(currentPage, totalPages, commandPrefix = "page") {
  if (totalPages <= 1) return null;
  
  const keyboard = [];
  const buttonsRow = [];
  
  // Previous page button
  if (currentPage > 1) {
    buttonsRow.push({
      text: "‚¨ÖÔ∏è Trang tr∆∞·ªõc",
      callback_data: commandPrefix + "_" + (currentPage - 1)
    });
  }
  
  // Page indicator
  buttonsRow.push({
    text: `üìÑ ${currentPage}/${totalPages}`,
    callback_data: "page_info" // Non-functional, just for display
  });
  
  // Next page button  
  if (currentPage < totalPages) {
    buttonsRow.push({
      text: "Trang sau ‚û°Ô∏è",
      callback_data: commandPrefix + "_" + (currentPage + 1)
    });
  }
  
  keyboard.push(buttonsRow);
  
  // Back to main menu button
  keyboard.push([{
    text: "üè† V·ªÅ menu ch√≠nh",
    callback_data: "back_to_main_view"
  }]);
  
  return {
    "inline_keyboard": keyboard
  };
}

// =================== OPTIMIZED DATABASE FUNCTIONS ===================

/**
 * OPTIMIZED: Get transaction history page directly from database
 * Avoids loading all transactions for pagination - much faster for large datasets
 * @param {string} userId
 * @param {number} page - Page number (1-based)
 * @param {number} pageSize - Number of transactions per page
 * @returns {{transactions: Array, totalTransactions: number}}
 */
function getTransactionHistoryPage(userId, page, pageSize) {
  try {
    const sheet = getSheet(userId);
    const lastRow = sheet.getLastRow();
    const totalTransactions = lastRow > 1 ? lastRow - 1 : 0;
    
    if (totalTransactions === 0) {
      return { transactions: [], totalTransactions: 0 };
    }

    // Calculate range for current page
    const startIndex = (page - 1) * pageSize;
    
    // Get ALL data first for sorting (still need to sort by date)
    // Note: This is a trade-off - we need sorting but want to limit data fetching
    const allData = sheet.getRange("A2:G" + lastRow).getValues();
    
    // Sort by date (column 1, index 1) - newest first
    allData.sort((a, b) => new Date(b[1]) - new Date(a[1]));
    
    // Now get the page slice
    const endIndex = Math.min(startIndex + pageSize, totalTransactions);
    const pageTransactions = allData.slice(startIndex, endIndex);

    return { 
      transactions: pageTransactions, 
      totalTransactions: totalTransactions 
    };
    
  } catch (err) {
    Logger.log("Error in getTransactionHistoryPage: " + err.toString());
    return { transactions: [], totalTransactions: 0 };
  }
}

// =================== TRANSACTION PARSER ===================

/**
 * ENHANCED PARSER: Ph√¢n t√≠ch c√∫ ph√°p v·ªõi smart suggestions
 * H·ªó tr·ª£ nhi·ªÅu ƒë·ªãnh d·∫°ng: /chi, /thu, "n·ªôi dung + s·ªë ti·ªÅn", "n·ªôi dung - s·ªë ti·ªÅn"
 * @param {string} text - Chu·ªói vƒÉn b·∫£n ƒë·∫ßu v√†o
 * @param {string} defaultType - Lo·∫°i giao d·ªãch m·∫∑c ƒë·ªãnh (cho /chi, /thu)
 * @returns {object} - Object ch·ª©a {description, amount, type, success, suggestion}
 */
function parseTransactionText(text, defaultType = null) {
  try {
    let type, delimiter, parts;
    
    // Format 1: "n·ªôi dung + s·ªë ti·ªÅn" (thu nh·∫≠p)
    if (text.includes(' + ')) {
      type = TRANSACTION_TYPE.INCOME;
      delimiter = ' + ';
      parts = text.split(delimiter);
    } 
    // Format 2: "n·ªôi dung - s·ªë ti·ªÅn" (chi ti√™u)
    else if (text.includes(' - ')) {
      type = TRANSACTION_TYPE.EXPENSE;
      delimiter = ' - ';
      parts = text.split(delimiter);
    } 
    // Format 3: "/chi n·ªôi dung s·ªë ti·ªÅn" ho·∫∑c "/thu n·ªôi dung s·ªë ti·ªÅn"
    else {
      const lastSpaceIndex = text.lastIndexOf(' ');
      if (lastSpaceIndex === -1) {
        return { success: false, suggestion: generateSmartSuggestion(text, defaultType) };
      }
      
      parts = [
        text.substring(0, lastSpaceIndex).trim(),
        text.substring(lastSpaceIndex + 1).trim()
      ];
      type = defaultType; // S·ª≠ d·ª•ng type ƒë∆∞·ª£c truy·ªÅn v√†o t·ª´ command
    }

    if (parts.length < 2) {
      return { success: false, suggestion: generateSmartSuggestion(text, defaultType) };
    }

    const description = parts[0].trim();
    const amountStr = parts[1].trim();

    // Validation: Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë
    if (!amountStr.match(/^\d+$/)) {
      return { 
        success: false, 
        suggestion: generateAmountSuggestion(text, description, amountStr, defaultType) 
      };
    }
    
    const amount = parseInt(amountStr);
    if (amount <= 0) {
      return { 
        success: false, 
        suggestion: "‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0. Vui l√≤ng nh·∫≠p l·∫°i!" 
      };
    }

    // Validation: Ki·ªÉm tra description kh√¥ng r·ªóng
    if (!description || description.length === 0) {
      return { 
        success: false, 
        suggestion: "‚ùå Vui l√≤ng nh·∫≠p m√¥ t·∫£ cho giao d·ªãch!" 
      };
    }

    return { 
      description, 
      amount, 
      type,
      success: true
    };
    
  } catch (err) {
    Logger.log("Error in parseTransactionText: " + err.toString());
    return { 
      success: false, 
      suggestion: "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i!" 
    };
  }
}

/**
 * SMART SUGGESTION: Generate intelligent suggestions for common input mistakes
 */
function generateSmartSuggestion(text, defaultType) {
  try {
    // Case 1: Missing space around + or -
    if (text.includes('+') && !text.includes(' + ')) {
      const corrected = text.replace('+', ' + ');
      return `üí° <b>G·ª£i √Ω th√¥ng minh:</b> C√≥ ph·∫£i b·∫°n mu·ªën nh·∫≠p:\n<code>${corrected}</code>\n\n‚ö†Ô∏è <b>L∆∞u √Ω:</b> C·∫ßn c√≥ d·∫•u c√°ch tr∆∞·ªõc v√† sau d·∫•u +/-`;
    }
    
    if (text.includes('-') && !text.includes(' - ')) {
      const corrected = text.replace('-', ' - ');
      return `üí° <b>G·ª£i √Ω th√¥ng minh:</b> C√≥ ph·∫£i b·∫°n mu·ªën nh·∫≠p:\n<code>${corrected}</code>\n\n‚ö†Ô∏è <b>L∆∞u √Ω:</b> C·∫ßn c√≥ d·∫•u c√°ch tr∆∞·ªõc v√† sau d·∫•u +/-`;
    }
    
    // Case 2: Number at beginning instead of end
    const numberAtStart = text.match(/^(\d+)\s+(.+)$/);
    if (numberAtStart && defaultType) {
      const amount = numberAtStart[1];
      const description = numberAtStart[2];
      const typeText = defaultType === TRANSACTION_TYPE.EXPENSE ? 'chi' : 'thu';
      return `üí° <b>G·ª£i √Ω th√¥ng minh:</b> C√≥ ph·∫£i b·∫°n mu·ªën nh·∫≠p:\n<code>/${typeText} ${description} ${amount}</code>\n\n‚ö†Ô∏è <b>L∆∞u √Ω:</b> S·ªë ti·ªÅn n√™n ·ªü cu·ªëi`;
    }
    
    // Case 3: Missing space before amount
    const missingSpace = text.match(/^(.+?)(\d+)$/);
    if (missingSpace && defaultType) {
      const description = missingSpace[1].trim();
      const amount = missingSpace[2];
      const typeText = defaultType === TRANSACTION_TYPE.EXPENSE ? 'chi' : 'thu';
      return `üí° <b>G·ª£i √Ω th√¥ng minh:</b> C√≥ ph·∫£i b·∫°n mu·ªën nh·∫≠p:\n<code>/${typeText} ${description} ${amount}</code>\n\n‚ö†Ô∏è <b>L∆∞u √Ω:</b> C·∫ßn c√≥ d·∫•u c√°ch tr∆∞·ªõc s·ªë ti·ªÅn`;
    }
    
    // Default suggestion based on type
    if (defaultType === TRANSACTION_TYPE.EXPENSE) {
      return `‚ùå <b>Sai ƒë·ªãnh d·∫°ng!</b>\n\n‚úÖ <b>C√°ch s·ª≠ d·ª•ng ƒë√∫ng:</b>\n‚Ä¢ <code>/chi ƒÉn s√°ng 25000</code>\n‚Ä¢ <code>/chi cafe 15000</code>\n‚Ä¢ <code>ƒÉn tr∆∞a - 50000</code>\n\nüìù <b>L∆∞u √Ω:</b> M√¥ t·∫£ + d·∫•u c√°ch + s·ªë ti·ªÅn`;
    } else if (defaultType === TRANSACTION_TYPE.INCOME) {
      return `‚ùå <b>Sai ƒë·ªãnh d·∫°ng!</b>\n\n‚úÖ <b>C√°ch s·ª≠ d·ª•ng ƒë√∫ng:</b>\n‚Ä¢ <code>/thu l∆∞∆°ng 10000000</code>\n‚Ä¢ <code>/thu bonus 500000</code>\n‚Ä¢ <code>th∆∞·ªüng + 1000000</code>\n\nüìù <b>L∆∞u √Ω:</b> M√¥ t·∫£ + d·∫•u c√°ch + s·ªë ti·ªÅn`;
    } else {
      return `‚ùå <b>Sai ƒë·ªãnh d·∫°ng!</b>\n\n‚úÖ <b>C√°ch s·ª≠ d·ª•ng ƒë√∫ng:</b>\n‚Ä¢ <code>ƒÉn s√°ng - 25000</code> (chi ti√™u)\n‚Ä¢ <code>th∆∞·ªüng + 1000000</code> (thu nh·∫≠p)\n\nüìù <b>L∆∞u √Ω:</b> C√≥ d·∫•u c√°ch tr∆∞·ªõc v√† sau d·∫•u +/-`;
    }
    
  } catch (err) {
    Logger.log("Error in generateSmartSuggestion: " + err.toString());
    return "‚ùå ƒê·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i!";
  }
}

/**
 * AMOUNT SUGGESTION: Handle common amount format mistakes
 */
function generateAmountSuggestion(originalText, description, amountStr, defaultType) {
  try {
    // Case 1: Amount has commas or dots
    if (amountStr.includes(',') || amountStr.includes('.')) {
      const cleanAmount = amountStr.replace(/[,\.]/g, '');
      if (cleanAmount.match(/^\d+$/)) {
        const typeText = defaultType === TRANSACTION_TYPE.EXPENSE ? 'chi' : 'thu';
        const corrected = defaultType ? `/${typeText} ${description} ${cleanAmount}` : 
                         (originalText.includes('+') ? `${description} + ${cleanAmount}` : `${description} - ${cleanAmount}`);
        return `üí° <b>G·ª£i √Ω th√¥ng minh:</b> C√≥ ph·∫£i b·∫°n mu·ªën nh·∫≠p:\n<code>${corrected}</code>\n\n‚ö†Ô∏è <b>L∆∞u √Ω:</b> S·ªë ti·ªÅn kh√¥ng ƒë∆∞·ª£c c√≥ d·∫•u ph·∫©y ho·∫∑c ch·∫•m`;
      }
    }
    
    // Case 2: Amount has currency symbols
    const currencyMatch = amountStr.match(/(\d+).*?[ƒëvnd‚Ç´]/i);
    if (currencyMatch) {
      const cleanAmount = currencyMatch[1];
      const typeText = defaultType === TRANSACTION_TYPE.EXPENSE ? 'chi' : 'thu';
      const corrected = defaultType ? `/${typeText} ${description} ${cleanAmount}` : 
                       (originalText.includes('+') ? `${description} + ${cleanAmount}` : `${description} - ${cleanAmount}`);
      return `üí° <b>G·ª£i √Ω th√¥ng minh:</b> C√≥ ph·∫£i b·∫°n mu·ªën nh·∫≠p:\n<code>${corrected}</code>\n\n‚ö†Ô∏è <b>L∆∞u √Ω:</b> Ch·ªâ nh·∫≠p s·ªë, kh√¥ng c·∫ßn k√Ω hi·ªáu ti·ªÅn t·ªá`;
    }
    
    // Case 3: Non-numeric characters mixed with numbers
    const numbersOnly = amountStr.replace(/\D/g, '');
    if (numbersOnly.length > 0) {
      const typeText = defaultType === TRANSACTION_TYPE.EXPENSE ? 'chi' : 'thu';
      const corrected = defaultType ? `/${typeText} ${description} ${numbersOnly}` : 
                       (originalText.includes('+') ? `${description} + ${numbersOnly}` : `${description} - ${numbersOnly}`);
      return `üí° <b>G·ª£i √Ω th√¥ng minh:</b> C√≥ ph·∫£i b·∫°n mu·ªën nh·∫≠p:\n<code>${corrected}</code>\n\n‚ö†Ô∏è <b>L∆∞u √Ω:</b> S·ªë ti·ªÅn ch·ªâ ƒë∆∞·ª£c ch·ª©a c√°c ch·ªØ s·ªë`;
    }
    
    return `‚ùå <b>S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá:</b> <code>${amountStr}</code>\n\n‚úÖ <b>V√≠ d·ª• ƒë√∫ng:</b> 25000, 1500000, 50000\n\n‚ö†Ô∏è <b>L∆∞u √Ω:</b> Ch·ªâ nh·∫≠p s·ªë nguy√™n, kh√¥ng c√≥ d·∫•u ph·∫©y/ch·∫•m`;
    
  } catch (err) {
    Logger.log("Error in generateAmountSuggestion: " + err.toString());
    return "‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i!";
  }
}

/**
 * UNIFIED PROCESS: B·∫Øt ƒë·∫ßu quy tr√¨nh ghi nh·∫≠n giao d·ªãch sau khi parse th√†nh c√¥ng
 * @param {number} chatId - ID c·ªßa chat
 * @param {object} transactionData - D·ªØ li·ªáu giao d·ªãch ƒë√£ parse
 * @param {number} messageId - ID tin nh·∫Øn ƒë·ªÉ edit (optional)
 */
function initiateTransactionProcess(chatId, transactionData, messageId = null, chatType = 'private', senderName = null, userId = null) {
  try {
    // Use userId if provided (for group chat), otherwise use chatId (for private chat)
    const actualUserId = userId || chatId;
    
    const tempTransaction = {
      userId: actualUserId, // Use the correct user ID
      chatId: chatId, // Keep chatId for sending messages
      date: new Date().toISOString().split('T')[0],
      description: transactionData.description,
      amount: transactionData.amount,
      allocation: "Chi ti√™u thi·∫øt y·∫øu", // Default allocation
      type: transactionData.type,
      chatType: chatType, // Add chatType to tempTransaction
      senderName: senderName // Add senderName to tempTransaction
    };
    
    // L∆∞u transaction t·∫°m v√†o cache v·ªõi actualUserId
    saveTempTransaction(actualUserId, tempTransaction);

    // T·∫°o keyboard ƒë·ªÉ ch·ªçn subcategory
    const allocationIndex = allocations.indexOf(tempTransaction.allocation);
    const keyboard = createSubCategoryKeyboard(tempTransaction.allocation, false, null, allocationIndex);
    
    // T·∫°o th√¥ng b√°o cho ng∆∞·ªùi d√πng
    const typeText = transactionData.type === TRANSACTION_TYPE.INCOME ? 'Thu nh·∫≠p' : 'Chi ti√™u';
    let message = `‚ö° <b>${typeText} nhanh:</b> ${transactionData.description} ` +
      `<code>${transactionData.amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}</code>` +
      ` v√†o h≈© <b>${tempTransaction.allocation}</b>.\n\n` +
      `üè∑Ô∏è Vui l√≤ng ch·ªçn nh√£n c·ª• th·ªÉ:`;
    
    // Add sender name for group chats
    if (chatType === 'group' || chatType === 'supergroup') {
      message = "üë§ " + senderName + "\n" + message;
    }
    
    // G·ª≠i ho·∫∑c edit message
    if (messageId) {
      editText(chatId, messageId, message, keyboard);
    } else {
      sendText(chatId, message, keyboard);
    }
    
  } catch (err) {
    Logger.log("Error in initiateTransactionProcess: " + err.toString());
    const errorMessage = "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω giao d·ªãch. Vui l√≤ng th·ª≠ l·∫°i.";
    
    if (messageId) {
      editText(chatId, messageId, errorMessage, null);
    } else {
      sendText(chatId, errorMessage);
    }
  }
}

// =================== CALLBACK HANDLERS ===================

/**
 * OPTIMIZED: Transaction history with database-level pagination
 */
function processTransactionHistoryWithPagination(context, page = 1) {
  try {
    // Show loading message immediately
    if (context.messageId) {
      editText(context.chatId, context.messageId, "‚è≥ ƒêang t·∫£i l·ªãch s·ª≠ giao d·ªãch...", null);
    }
    
    const pageSize = 10; // 10 transactions per page
    
    // ‚ú® OPTIMIZED: Get only the page we need from database
    const historyData = getTransactionHistoryPage(context.chatId, page, pageSize);
    const { transactions, totalTransactions } = historyData;
    
    if (!transactions || transactions.length === 0) {
      const message = totalTransactions === 0 ? 
        "üì≠ <b>Ch∆∞a c√≥ giao d·ªãch n√†o!</b>\n\n" +
        "H√£y b·∫Øt ƒë·∫ßu ghi nh·∫≠n thu chi c·ªßa b·∫°n b·∫±ng c√°ch:\n" +
        "‚Ä¢ G√µ <code>/chi ƒÉn s√°ng 25000</code> cho chi ti√™u\n" +
        "‚Ä¢ G√µ <code>/thu l∆∞∆°ng 10000000</code> cho thu nh·∫≠p" :
        `üì≠ <b>Trang ${page} kh√¥ng c√≥ d·ªØ li·ªáu!</b>\n\nVui l√≤ng ch·ªçn trang kh√°c.`;
      
      if (context.messageId) {
        editText(context.chatId, context.messageId, message, null);
      } else {
        sendText(context.chatId, message);
      }
      return;
    }
    
    const totalPages = Math.ceil(totalTransactions / pageSize);
    
    // Build message with pagination info
    let message = `üìã <b>L·ªãch s·ª≠ giao d·ªãch (Trang ${page}/${totalPages})</b>\n`;
    message += `üìä T·ªïng: ${totalTransactions} giao d·ªãch\n\n`;
    
    // Calculate totals for this page
    let pageThuNhap = 0;
    let pageChiTieu = 0;
    
    transactions.forEach((transaction, index) => {
      const sequenceNumber = transaction[0];
      const date = formatDate(transaction[1]);
      const description = transaction[2];
      const amount = transaction[3];
      const allocation = transaction[4];
      const type = transaction[5];
      const subCategory = transaction[6] || '';
      
      const emoji = type === TRANSACTION_TYPE.INCOME ? 'üí∞' : 'üí∏';
      const formattedAmount = amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      
      message += `${emoji} <b>#${sequenceNumber}</b> - ${description}\n`;
      message += `üíµ ${formattedAmount} | üè∫ ${allocation}`;
      if (subCategory) {
        message += ` | üè∑Ô∏è ${subCategory}`;
      }
      message += `\nüìÖ ${date}\n\n`;
      
      if (type === TRANSACTION_TYPE.INCOME) {
        pageThuNhap += amount;
      } else {
        pageChiTieu += amount;
      }
    });
    
    // Add page summary
    message += `üìà <b>Trang ${page} - T√≥m t·∫Øt:</b>\n`;
    message += `üí∞ Thu nh·∫≠p: ${pageThuNhap.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}\n`;
    message += `üí∏ Chi ti√™u: ${pageChiTieu.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}\n`;
    message += `üíπ Ch√™nh l·ªách: ${(pageThuNhap - pageChiTieu).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}`;
    
    // Create pagination keyboard
    const keyboard = createPaginationKeyboard(page, totalPages, 'history_page');
    
    // Send or edit message
    if (context.messageId) {
      editText(context.chatId, context.messageId, message, keyboard);
    } else {
      sendText(context.chatId, message, keyboard);
    }
    
  } catch (err) {
    Logger.log("Error in processTransactionHistoryWithPagination: " + err.toString());
    const errorMessage = "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫£i l·ªãch s·ª≠ giao d·ªãch. Vui l√≤ng th·ª≠ l·∫°i sau.";
    
    if (context.messageId) {
      editText(context.chatId, context.messageId, errorMessage, null);
    } else {
      sendText(context.chatId, errorMessage);
    }
  }
}

function processConnectEmail(context) {
  sendText(context.chatId, "Vui l√≤ng nh·∫≠p email c·ªßa b·∫°n:");
}

function processBankSelection(context) {
  try {
    const bankName = context.data.split('_')[1]; 
    saveBankToSheet(context.chatId, bankName); 
    sendText(context.chatId, "Ng√¢n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi th√†nh c√¥ng: " + bankName);
  } catch (err) {
    Logger.log("Error in processBankSelection: " + err.toString());
    sendText(context.chatId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi ng√¢n h√†ng. Vui l√≤ng th·ª≠ l·∫°i.");
  }
}

function processSubcategorySelection(context) {
  try {
    let allocation = '';
    let subCategory = '';
    
    if (context.data.startsWith(CALLBACK_PREFIX.SUB)) {
      // Format m·ªõi ng·∫Øn: sub_0_1 (allocationIndex_subIndex)
      const parts = context.data.split('_');
      if (parts.length >= 3) {
        const allocationIndex = parseInt(parts[1]);
        const subCategoryIndex = parseInt(parts[2]);
        
        if (!isNaN(allocationIndex) && !isNaN(subCategoryIndex) && allocationIndex >= 0 && subCategoryIndex >= 0) {
          allocation = allocations[allocationIndex];
          if (allocation && subCategories[allocation] && subCategories[allocation][subCategoryIndex]) {
            subCategory = subCategories[allocation][subCategoryIndex];
          }
        }
      }
    } else {
      // Format c≈© d√†i: subcategory_AllocationName_SubCategoryName
      const parts = context.data.split('_');
      allocation = parts[1];
      subCategory = parts.slice(2).join('_');
    }
    
    // Validation: ƒê·∫£m b·∫£o allocation v√† subCategory ƒë∆∞·ª£c parse th√†nh c√¥ng
    if (!allocation || !subCategory) {
      const targetChatId = context.groupChatId || context.chatId; // Use group chat for groups, user chat for private
      editText(targetChatId, context.messageId, "‚ùå L·ªói x·ª≠ l√Ω l·ª±a ch·ªçn. Vui l√≤ng th·ª≠ l·∫°i.", null);
      return;
    }
    
    // L·∫•y th√¥ng tin giao d·ªãch t·∫°m t·ª´ cache (s·ª≠ d·ª•ng user ID)
    const tempTransaction = getTempTransaction(context.chatId);
    if (tempTransaction) {
      // Use the correct entity ID for transaction storage
      const entityId = tempTransaction.chatId || context.groupChatId || context.chatId;
      
      // L∆∞u giao d·ªãch v·ªõi subcategory v√† l·∫•y sequence number
      const sequenceNumber = addTransactionData(
        entityId, 
        tempTransaction.date, 
        tempTransaction.description, 
        tempTransaction.amount, 
        allocation, 
        tempTransaction.type,
        subCategory,
        context.chatType,
        context.userName
      );
      
      // L∆∞u th√¥ng tin giao d·ªãch v·ª´a t·∫°o ƒë·ªÉ c√≥ th·ªÉ ch·ªânh s·ª≠a
      const transactionId = 'tx_' + Date.now(); // Unique ID cho transaction
      const transactionInfo = {
        userId: context.chatId,
        transactionId: transactionId,
        date: tempTransaction.date,
        description: tempTransaction.description,
        amount: tempTransaction.amount,
        allocation: allocation,
        type: tempTransaction.type,
        subCategory: subCategory,
        sequenceNumber: sequenceNumber, // Th√™m STT v√†o transaction info
        rowIndex: getLastRowIndex(entityId) // L·∫•y index c·ªßa row v·ª´a th√™m
      };
      saveTransactionForEdit(context.chatId, transactionInfo, transactionId);
      
      // X√≥a cache t·∫°m
      clearTempTransaction(context.chatId);
      
      // Th√¥ng b√°o th√†nh c√¥ng v·ªõi keyboard ch·ªânh s·ª≠a (bao g·ªìm STT)
      const typeText = tempTransaction.type === TRANSACTION_TYPE.INCOME ? "thu nh·∫≠p" : "chi ti√™u";
      const editKeyboard = createEditKeyboard(transactionId);
      
      // Use the correct chat ID for sending message
      const targetChatId = context.groupChatId || context.chatId; // Use group chat for groups, user chat for private
      
      let successMessage = "‚úÖ Giao d·ªãch #" + sequenceNumber + " - ƒê√£ ghi nh·∫≠n " + typeText + ": " + tempTransaction.description + 
        " " + tempTransaction.amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + 
        " v√†o h≈© " + allocation + " v·ªõi nh√£n " + subCategory;
      
      // Add sender name for group chats
      if (context.chatType === 'group' || context.chatType === 'supergroup') {
        successMessage = "üë§ " + context.userName + "\n" + successMessage;
      }
      
      editText(targetChatId, context.messageId, successMessage, editKeyboard
      );
    } else {
      // No temp transaction found
      const targetChatId = context.groupChatId || context.chatId;
      editText(targetChatId, context.messageId, "‚ùå Kh√¥ng t√¨m th·∫•y giao d·ªãch t·∫°m. Vui l√≤ng th·ª≠ l·∫°i.", null);
    }
  } catch (err) {
    Logger.log("Error in processSubcategorySelection: " + err.toString());
    const targetChatId = context.groupChatId || context.chatId;
    editText(targetChatId, context.messageId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ª±a ch·ªçn. Vui l√≤ng th·ª≠ l·∫°i.", null);
  }
}

function processEditTransaction(context) {
  try {
    Logger.log("DEBUG: edit_transaction callback received for user: " + context.chatId);
    const transactionId = context.data.startsWith(CALLBACK_PREFIX.EDIT_TRANSACTION) ? context.data.replace(CALLBACK_PREFIX.EDIT_TRANSACTION, '') : null;
    Logger.log("DEBUG: Transaction ID: " + transactionId);
    const transactionInfo = getTransactionForEdit(context.chatId, transactionId);
    Logger.log("DEBUG: transactionInfo from cache: " + JSON.stringify(transactionInfo));
    
    if (transactionInfo) {
      // Hi·ªÉn th·ªã keyboard ch·ªçn h≈© m·ªõi v·ªõi transactionId
      const allocationKeyboard = createAllocationKeyboard(transactionInfo.transactionId);
      Logger.log("DEBUG: Allocation keyboard created with " + allocationKeyboard.inline_keyboard.length + " rows");
      
      editText(context.chatId, context.messageId,
        "üîÑ Ch·ªânh s·ª≠a giao d·ªãch: " + transactionInfo.description + 
        " " + transactionInfo.amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + 
        "\n\nVui l√≤ng ch·ªçn h≈© m·ªõi:",
        allocationKeyboard
      );
      Logger.log("DEBUG: Edit message sent");
    } else {
      Logger.log("DEBUG: No transaction info found in cache");
      editText(context.chatId, context.messageId, "‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin giao d·ªãch ƒë·ªÉ ch·ªânh s·ª≠a. Vui l√≤ng th·ª≠ l·∫°i.", null);
    }
  } catch (err) {
    Logger.log("Error in processEditTransaction: " + err.toString());
    editText(context.chatId, context.messageId, "‚ùå R·∫•t ti·∫øc, ƒë√£ c√≥ l·ªói x·∫£y ra khi c·ªë g·∫Øng ch·ªânh s·ª≠a giao d·ªãch. Vui l√≤ng th·ª≠ l·∫°i sau.", null);
  }
}

function processShowTotalExpenses(context) {
  try {
    const totalExpenses = getTotalAmountByType(context.chatId, TRANSACTION_TYPE.EXPENSE);
    sendText(context.chatId, "T·ªïng chi ti√™u c·ªßa b·∫°n l√†: " + totalExpenses.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","), menuchi);
  } catch (err) {
    Logger.log("Error in processShowTotalExpenses: " + err.toString());
    sendText(context.chatId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi t√≠nh t·ªïng chi ti√™u. Vui l√≤ng th·ª≠ l·∫°i.");
  }
}

function processShowTotalIncome(context) {
  try {
    sendTotalIncomeSummary(context);
  } catch (err) {
    Logger.log("Error in processShowTotalIncome: " + err.toString());
    sendText(context.chatId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi t√≠nh t·ªïng thu nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i.");
  }
}

function processShowCurrentBalance(context) {
  try {
    const currentBalance = getCurrentBalance(context.chatId);
    const balanceMessage = "üí∞ <b>T·ªïng quan t√†i ch√≠nh:</b>\n\n" +
      "üíπ S·ªë ti·ªÅn hi·ªán t·∫°i c·ªßa b·∫°n l√†: " + currentBalance.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    
    const overviewKeyboard = {
      "inline_keyboard": [
        [
          {
            text: "üè∫ Xem theo h≈©",
            callback_data: "getTotalAllocationBalances"
          },
          {
            text: "üè∑Ô∏è Xem theo nh√£n",
            callback_data: "view_subcategory_summary"
          }
        ],
        [
          {
            text: "üìã L·ªãch s·ª≠ giao d·ªãch",
            callback_data: "history"
          }
        ]
      ]
    };
    
    editText(context.chatId, context.messageId, balanceMessage, overviewKeyboard);
  } catch (err) {
    Logger.log("Error in processShowCurrentBalance: " + err.toString());
    editText(context.chatId, context.messageId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi t√≠nh s·ªë d∆∞. Vui l√≤ng th·ª≠ l·∫°i.", null);
  }
}

function processShowAllocationBalances(context) {
  try {
    // Send loading message before heavy calculation
    if (context.messageId) {
      editText(context.chatId, context.messageId, "‚è≥ ƒêang t√≠nh to√°n s·ªë d∆∞ c√°c h≈©...", null);
    }
    sendTotalPhanboSummary(context); // Updated to pass context directly
  } catch (err) {
    Logger.log("Error in processShowAllocationBalances: " + err.toString());
    editText(context.chatId, context.messageId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi t√≠nh s·ªë d∆∞ c√°c h≈©. Vui l√≤ng th·ª≠ l·∫°i.", null);
  }
}

// =================== MESSAGE HANDLERS ===================

/**
 * IMPROVED: Start command with context pattern
 */
function processStartCommand(context) {
  try {
    sendText(context.chatId, 
      'üéØ Ch√†o ' + context.userName + '! T√¥i l√† <b>MoneyNe Bot</b> - tr·ª£ l√Ω t√†i ch√≠nh th√¥ng minh c·ªßa b·∫°n!\n\n' +
      'üî• <b>C√°ch s·ª≠ d·ª•ng nhanh:</b>\n' +
      '‚Ä¢ <code>/chi ƒÉn s√°ng 25000</code> - Ghi nh·∫≠n chi ti√™u\n' +
      '‚Ä¢ <code>/thu l∆∞∆°ng 10000000</code> - Ghi nh·∫≠n thu nh·∫≠p\n' +
      '‚Ä¢ <code>ƒÉn tr∆∞a - 50000</code> - Chi ti√™u nhanh\n' +
      '‚Ä¢ <code>bonus + 2000000</code> - Thu nh·∫≠p nhanh\n\n' +
      'üìä <b>Xem b√°o c√°o:</b>\n' +
      '‚Ä¢ <code>/xemhu</code> - S·ªë d∆∞ t·ª´ng h≈©\n' +
      '‚Ä¢ <code>/lichsu</code> - L·ªãch s·ª≠ giao d·ªãch\n' +
      '‚Ä¢ <code>/menu</code> - To√†n b·ªô ch·ª©c nƒÉng\n\n' +
      '‚ú® H√£y b·∫Øt ƒë·∫ßu ghi nh·∫≠n t√†i ch√≠nh c·ªßa b·∫°n ngay nh√©!',
      menuchi
    );
  } catch (err) {
    Logger.log("Error in processStartCommand: " + err.toString());
    sendText(context.chatId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.");
  }
}

/**
 * IMPROVED: Menu command with context pattern
 */
function processMenuCommand(context) {
  try {
    sendText(context.chatId, "Ch√†o " + context.userName + "! Ch·ªçn ch·ª©c nƒÉng:", menuchi);
  } catch (err) {
    Logger.log("Error in processMenuCommand: " + err.toString());
    sendText(context.chatId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.");
  }
}

function processShowTotalMoney(context) {
  const currentBalance = getCurrentBalance(context.chatId);
  sendText(context.chatId, "üí∞ S·ªë ti·ªÅn hi·ªán t·∫°i c·ªßa b·∫°n l√†: " + formatNumberWithSeparator(currentBalance));
}

function processShowTotalExpenseCommand(context) {
  const totalExpenses = getTotalAmountByType(context.chatId, TRANSACTION_TYPE.EXPENSE);
  sendText(context.chatId, "üí∏ T·ªïng chi ti√™u c·ªßa b·∫°n l√†: " + formatNumberWithSeparator(totalExpenses));
}

/**
 * IMPROVED: Default message with context pattern
 */
function processDefaultMessage(context) {
  try {
    sendText(context.chatId, 
      "Xin ch√†o " + context.userName + "! T√¥i l√† MoneyNe Bot, tr·ª£ l√Ω t√†i ch√≠nh c·ªßa b·∫°n.\n\n" +
      "üî• <b>Ghi nh·∫≠n nhanh:</b>\n" +
      "‚Ä¢ <code>/chi ƒÉn s√°ng 25000</code>\n" +
      "‚Ä¢ <code>cafe - 15000</code>\n" +
      "‚Ä¢ <code>/thu bonus 500000</code>\n\n" +
      "G√µ <code>/menu</code> ƒë·ªÉ xem ƒë·∫ßy ƒë·ªß ch·ª©c nƒÉng!", 
      menuchi
    );
  } catch (err) {
    Logger.log("Error in processDefaultMessage: " + err.toString());
    sendText(context.chatId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.");
  }
}

/**
 * ENHANCED: Quick expense command with smart suggestions
 */
function processQuickExpenseCommand(context) {
  try {
    const input = context.text.substring(5); // Remove '/chi '
    const parseResult = parseTransactionText(input, TRANSACTION_TYPE.EXPENSE);
    
    if (parseResult.success) {
      // For group chat, we need both chat ID (group) and user ID (sender)
      const userId = context.chatType === 'private' ? context.chatId : context.message.from.id;
      const chatId = context.chatId; // Always use this for sending messages
      
      // Pass all needed parameters to initiateTransactionProcess
      initiateTransactionProcess(chatId, parseResult, null, context.chatType, context.userName, userId);
    } else {
      // ‚ú® SMART SUGGESTION: Send intelligent error message
      sendText(context.chatId, parseResult.suggestion);
    }
  } catch (err) {
    Logger.log("Error in processQuickExpenseCommand: " + err.toString());
    sendText(context.chatId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω chi ti√™u. Vui l√≤ng th·ª≠ l·∫°i.");
  }
}

/**
 * ENHANCED: Quick income command with smart suggestions
 */
function processQuickIncomeCommand(context) {
  try {
    const input = context.text.substring(5); // Remove '/thu '
    const parseResult = parseTransactionText(input, TRANSACTION_TYPE.INCOME);
    
    if (parseResult.success) {
      // For group chat, we need both chat ID (group) and user ID (sender)
      const userId = context.chatType === 'private' ? context.chatId : context.message.from.id;
      const chatId = context.chatId; // Always use this for sending messages
      
      // Pass all needed parameters to initiateTransactionProcess
      initiateTransactionProcess(chatId, parseResult, null, context.chatType, context.userName, userId);
    } else {
      // ‚ú® SMART SUGGESTION: Send intelligent error message
      sendText(context.chatId, parseResult.suggestion);
    }
  } catch (err) {
    Logger.log("Error in processQuickIncomeCommand: " + err.toString());
    sendText(context.chatId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω thu nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i.");
  }
}

/**
 * ENHANCED: Process transaction text with smart suggestions
 */
function processTransactionText(context) {
  try {
    const parseResult = parseTransactionText(context.text);
    
    if (parseResult.success) {
      // For group chat, we need both chat ID (group) and user ID (sender)
      const userId = context.chatType === 'private' ? context.chatId : context.message.from.id;
      const chatId = context.chatId; // Always use this for sending messages
      
      // Pass all needed parameters to initiateTransactionProcess
      initiateTransactionProcess(chatId, parseResult, null, context.chatType, context.userName, userId);
    } else {
      // ‚ú® SMART SUGGESTION: Send intelligent error message
      sendText(context.chatId, parseResult.suggestion);
    }
  } catch (err) {
    Logger.log("Error in processTransactionText: " + err.toString());
    sendText(context.chatId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω giao d·ªãch. Vui l√≤ng th·ª≠ l·∫°i.");
  }
}

/**
 * IMPROVED: Transaction history command with pagination
 */
function processTransactionHistoryCommand(context) {
  try {
    // Create a pseudo message context for pagination that doesn't require messageId initially
    const paginationContext = {
      chatId: context.chatId,
      userName: context.userName,
      data: 'history',
      messageId: null, // Will start fresh
      chatType: context.chatType // Add chatType to pagination context
    };
    
    // Call pagination function directly
    processTransactionHistoryWithPagination(paginationContext, 1);
  } catch (err) {
    Logger.log("Error in processTransactionHistoryCommand: " + err.toString());
    sendText(context.chatId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫£i l·ªãch s·ª≠. Vui l√≤ng th·ª≠ l·∫°i.");
  }
}

function checkEmail() {
  const usersSpreadsheet = SpreadsheetApp.openById(main_sheet);
  const usersSheet = usersSpreadsheet.getSheetByName('UserList');
  const data = usersSheet.getDataRange().getValues();

  for (let k = 1; k < data.length; k++) { 
    const emailToCheck = data[k][2]; 
    if (emailToCheck) {
      const bank = data[k][3]; 
      
      if (!bankDomains.hasOwnProperty(bank)) {
        Logger.log("Kh√¥ng c√≥ ng√¢n h√†ng ph√π h·ª£p: " + bank);
        continue;
      }
      
      let searchQuery = '';
      const domain = bankDomains[bank];
      
      if (bank === "VPBank" && Array.isArray(domain)) {
        searchQuery = '(' + domain.join(' OR ') + ') to:' + emailToCheck;
      } else {
        searchQuery = domain + ' to:' + emailToCheck;
      }
      
      
      searchQuery += " is:unread";
      
      const threads = GmailApp.search(searchQuery);
      for (let i = 0; i < threads.length; i++) {
        const messages = threads[i].getMessages();
        for (let j = 0; j < messages.length; j++) {
          const message = messages[j];
          const emailBody = message.getBody();
          const timestamp = message.getDate();
          const timestampEpoch = timestamp.getTime();

          const apiResponse = sendToGeminiAPI(emailBody); 
          if (apiResponse && apiResponse.amount && apiResponse.type && apiResponse.description) {
            const amount = parseInt(apiResponse.amount.replace(/,/g, '').trim(), 10);
            const explanation = apiResponse.description;
            const type = apiResponse.type;

            const targetSpreadsheetId = data[k][1];
            const targetSpreadsheet = SpreadsheetApp.openById(targetSpreadsheetId);
            const targetSheet = targetSpreadsheet.getActiveSheet();
            const targetData = targetSheet.getDataRange().getValues();

            let alreadyRecorded = false;
            for (let m = 1; m < targetData.length; m++) { 
              const recordedTimestamp = targetData[m][5];
              if (recordedTimestamp === timestampEpoch) {
                alreadyRecorded = true;
                break;
              }
            }
            if (!alreadyRecorded) {
              // T√≠nh s·ªë th·ª© t·ª± trong ng√†y cho Gmail auto-import
              var sequenceNumber = getNextSequenceNumber(data[k][0], timestamp); // userId, date
              targetSheet.appendRow([sequenceNumber, timestamp, explanation, amount, "Chi ti√™u thi·∫øt y·∫øu", type, "", timestampEpoch]);
              Logger.log("ƒê√£ ghi n·ªôi dung v√†o sheet.");
            } else {
              Logger.log("N·ªôi dung ƒë√£ ƒë∆∞·ª£c ghi tr∆∞·ªõc ƒë√≥.");
            }
          } else {
            Logger.log("API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá ho·∫∑c n·ªôi dung tr·ªëng.");
          }
        }
        threads[i].markRead();
      }
    } else {
      Logger.log("B·ªè qua h√†ng r·ªóng ·ªü d√≤ng: " + (k + 1));
    }
  }
}

/**
 * Handle the /export command to show export options.
 */
function processExportCommand(context) {
  try {
    const keyboard = {
      inline_keyboard: [
        [{ text: "Th√°ng n√†y", callback_data: "export_this_month" }],
        [{ text: "Th√°ng tr∆∞·ªõc", callback_data: "export_last_month" }],
        [{ text: "To√†n b·ªô l·ªãch s·ª≠", callback_data: "export_all_time" }],
        [{ text: "‚¨ÖÔ∏è Quay l·∫°i menu ch√≠nh", callback_data: "back_to_main_menu" }]
      ]
    };
    sendText(context.chatId, "B·∫°n mu·ªën xu·∫•t b√°o c√°o trong kho·∫£ng th·ªùi gian n√†o?", keyboard);
  } catch (err) {
    Logger.log("Error in processExportCommand: " + err.toString());
    sendText(context.chatId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi hi·ªÉn th·ªã t√πy ch·ªçn xu·∫•t b√°o c√°o. Vui l√≤ng th·ª≠ l·∫°i.");
  }
}

/**
 * Handles the export request based on the selected period.
 */
function processExportRequest(context, period) {
  try {
    sendLoadingMessage(context.chatId, `xu·∫•t b√°o c√°o ${period === 'this_month' ? 'th√°ng n√†y' : period === 'last_month' ? 'th√°ng tr∆∞·ªõc' : 'to√†n b·ªô l·ªãch s·ª≠'}`);
    generateAndSendReport(context, period);
  } catch (err) {
    Logger.log("Error in processExportRequest: " + err.toString());
    updateLoadingMessage(context.chatId, context.messageId, `‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi xu·∫•t b√°o c√°o ${period === 'this_month' ? 'th√°ng n√†y' : period === 'last_month' ? 'th√°ng tr∆∞·ªõc' : 'to√†n b·ªô l·ªãch s·ª≠'}. Vui l√≤ng th·ª≠ l·∫°i.`);
  }
}

/**
 * Generates a CSV report and sends it to the user via Telegram.
 */
function generateAndSendReport(context, period) {
  const sheet = getSheet(context.chatId);
  const allData = sheet.getDataRange().getValues();

  if (allData.length < 2) {
    updateLoadingMessage(context.chatId, context.messageId, "üìä Kh√¥ng c√≥ d·ªØ li·ªáu giao d·ªãch ƒë·ªÉ xu·∫•t b√°o c√°o.");
    return;
  }

  const header = allData[0];
  let transactions = allData.slice(1); // Exclude header row

  // Filter by period
  const now = new Date();
  const currentMonth = now.getMonth();
  const currentYear = now.getFullYear();

  if (period === 'this_month') {
    transactions = transactions.filter(row => {
      const date = new Date(row[1]); // Assuming date is in column B (index 1)
      return date.getMonth() === currentMonth && date.getFullYear() === currentYear;
    });
  } else if (period === 'last_month') {
    let lastMonth = currentMonth - 1;
    let lastMonthYear = currentYear;
    if (lastMonth < 0) {
      lastMonth = 11; // December
      lastMonthYear -= 1;
    }
    transactions = transactions.filter(row => {
      const date = new Date(row[1]);
      return date.getMonth() === lastMonth && date.getFullYear() === lastMonthYear;
    });
  }

  if (transactions.length === 0) {
    updateLoadingMessage(context.chatId, context.messageId, `üìä Kh√¥ng c√≥ giao d·ªãch n√†o trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.`);
    return;
  }

  // Format data for CSV
  let csvContent = header.map(h => `"${h.replace(/"/g, '""')}"`).join(',') + '\n';
  transactions.forEach(row => {
    const formattedRow = row.map((cell, index) => {
      if (index === 1) { // Date column
        return `"${new Date(cell).toLocaleDateString('vi-VN')}"`;
      } else if (typeof cell === 'string') {
        return `"${cell.replace(/"/g, '""')}"`;
      } else {
        return `"${cell}"`;
      }
    });
    csvContent += formattedRow.join(',') + '\n';
  });

  const fileName = `MoneyNe_Report_${context.chatId}_${new Date().getTime()}.csv`;
  let file = DriveApp.createFile(fileName, csvContent, MimeType.CSV);

  const telegramUrl = `https://api.telegram.org/bot${token}`; // Assuming telegramToken is available globally
  const url = telegramUrl + "/sendDocument";
  
  const payload = {
    method: "post",
    payload: {
      chat_id: String(context.chatId),
      document: file.getBlob(),
      caption: `üìä ƒê√¢y l√† b√°o c√°o thu chi c·ªßa b·∫°n (${period === 'this_month' ? 'Th√°ng n√†y' : period === 'last_month' ? 'Th√°ng tr∆∞·ªõc' : 'To√†n b·ªô'})!`,
    }
  };

  UrlFetchApp.fetch(url, payload);

  // Clean up: move the file to trash
  DriveApp.getFileById(file.getId()).setTrashed(true);

  updateLoadingMessage(context.chatId, context.messageId, `‚úÖ ƒê√£ g·ª≠i b√°o c√°o th√†nh c√¥ng!`);
}

/**
 * Handles the /budget command to show budget options.
 */
function processBudgetCommand(context) {
  try {
    const keyboard = {
      inline_keyboard: [
        [{ text: "üìä Xem T√¨nh h√¨nh Ng√¢n s√°ch", callback_data: "view_budget_status" }],
        [{ text: "‚úèÔ∏è Th√™m / S·ª≠a Ng√¢n s√°ch", callback_data: "add_edit_budget" }],
        [{ text: "üóëÔ∏è X√≥a Ng√¢n s√°ch", callback_data: "delete_budget" }],
        [{ text: "‚¨ÖÔ∏è Quay l·∫°i menu ch√≠nh", callback_data: "back_to_main_menu" }]
      ]
    };
    sendText(context.chatId, "B·∫°n mu·ªën l√†m g√¨ v·ªõi ng√¢n s√°ch?", keyboard);
  } catch (err) {
    Logger.log("Error in processBudgetCommand: " + err.toString());
    sendText(context.chatId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi hi·ªÉn th·ªã t√πy ch·ªçn ng√¢n s√°ch. Vui l√≤ng th·ª≠ l·∫°i.");
  }
}

/**
 * Handles the 'view_budget_status' callback.
 */
function processViewBudgetStatus(context) {
  try {
    sendLoadingMessage(context.chatId, "xem t√¨nh h√¨nh ng√¢n s√°ch");

    const userSpreadsheet = SpreadsheetApp.openById(getSpreadsheetId(context.chatId));
    const budgetsSheet = userSpreadsheet.getSheetByName('Budgets');

    if (!budgetsSheet || budgetsSheet.getLastRow() < 2) {
      updateLoadingMessage(context.chatId, context.messageId, "üìä B·∫°n ch∆∞a c√≥ ng√¢n s√°ch n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p. Vui l√≤ng th√™m ng√¢n s√°ch tr∆∞·ªõc.");
      return;
    }

    const budgetData = budgetsSheet.getDataRange().getValues(); // ["Th√°ng", "Lo·∫°i", "T√™n", "H·∫°n M·ª©c"]
    const mainSheet = getSheet(context.chatId); // Get the main transaction sheet
    const allTransactions = mainSheet.getDataRange().getValues(); // Get all transaction data
    const currentMonthYear = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "MM/yyyy");

    let budgetReport = `üìä **T√¨nh h√¨nh Ng√¢n s√°ch Th√°ng ${currentMonthYear}:**\n\n`;
    let hasActiveBudgets = false;

    for (let i = 1; i < budgetData.length; i++) {
      const row = budgetData[i];
      const month = row[0];
      const budgetType = row[1];
      const budgetName = row[2];
      const limit = parseFloat(row[3]);

      if (month === currentMonthYear && !isNaN(limit) && limit > 0) {
        hasActiveBudgets = true;
        const spent = calculateSpent(allTransactions, currentMonthYear, budgetType, budgetName);
        const remaining = limit - spent;
        const percentage = (spent / limit) * 100;

        budgetReport += `**${budgetType} ${budgetName}:**\n`;
        budgetReport += `   H·∫°n m·ª©c: ${formatNumberWithSeparator(limit)}ƒë\n`;
        budgetReport += `   ƒê√£ chi: ${formatNumberWithSeparator(spent)}ƒë (${percentage.toFixed(1)}%)\n`;
        budgetReport += `   C√≤n l·∫°i: ${formatNumberWithSeparator(remaining)}ƒë\n`;
        budgetReport += `   ${createPercentageBar(percentage)}\n\n`;
      }
    }

    if (!hasActiveBudgets) {
      updateLoadingMessage(context.chatId, context.messageId, `üìä Kh√¥ng c√≥ ng√¢n s√°ch ho·∫°t ƒë·ªông cho Th√°ng ${currentMonthYear}.`);
      return;
    }

    updateLoadingMessage(context.chatId, context.messageId, budgetReport);

  } catch (err) {
    Logger.log("Error in processViewBudgetStatus: " + err.toString());
    updateLoadingMessage(context.chatId, context.messageId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi xem t√¨nh h√¨nh ng√¢n s√°ch. Vui l√≤ng th·ª≠ l·∫°i.");
  }
}

/**
 * Helper function to create a percentage bar for visual representation.
 */
function createPercentageBar(percentage) {
  const barLength = 10; // Length of the bar in characters
  const filledBlocks = Math.round(percentage / 10);
  const emptyBlocks = barLength - filledBlocks;

  let bar = "[";
  for (let i = 0; i < filledBlocks; i++) {
    bar += "‚ñà";
  }
  for (let i = 0; i < emptyBlocks; i++) {
    bar += "‚ñë";
  }
  bar += "]";

  return bar;
}

/**
 * Handles the 'add_edit_budget' callback.
 */
function processAddEditBudget(context) {
  try {
    sendText(context.chatId, "Ch·ª©c nƒÉng th√™m/s·ª≠a ng√¢n s√°ch ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.");
  } catch (err) {
    Logger.log("Error in processAddEditBudget: " + err.toString());
    sendText(context.chatId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi th√™m/s·ª≠a ng√¢n s√°ch. Vui l√≤ng th·ª≠ l·∫°i.");
  }
}

/**
 * Handles the 'delete_budget' callback.
 */
function processDeleteBudget(context) {
  try {
    sendText(context.chatId, "Ch·ª©c nƒÉng x√≥a ng√¢n s√°ch ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.");
  } catch (err) {
    Logger.log("Error in processDeleteBudget: " + err.toString());
    sendText(context.chatId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi x√≥a ng√¢n s√°ch. Vui l√≤ng th·ª≠ l·∫°i.");
  }
}

/**
 * Checks budgets and sends alerts if thresholds are crossed.
 * Only for EXPENSE transactions.
 */
function checkAndSendBudgetAlerts(userId, allocation, subCategory, newAmount, type) {
  if (type !== TRANSACTION_TYPE.EXPENSE) {
    return; // Only check budgets for expenses
  }

  try {
    const userSpreadsheet = SpreadsheetApp.openById(getSpreadsheetId(userId));
    const budgetsSheet = userSpreadsheet.getSheetByName('Budgets');
    if (!budgetsSheet || budgetsSheet.getLastRow() < 2) {
      Logger.log("No budget data found for user " + userId);
      return;
    }

    const budgetData = budgetsSheet.getDataRange().getValues(); // ["Th√°ng", "Lo·∫°i", "T√™n", "H·∫°n M·ª©c"]
    const currentMonthYear = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "MM/yyyy");

    let allocationBudget = 0;
    let subCategoryBudget = 0;

    // Find relevant budgets for current month
    for (let i = 1; i < budgetData.length; i++) {
      const row = budgetData[i];
      const month = row[0];
      const budgetType = row[1];
      const budgetName = row[2];
      const limit = parseFloat(row[3]);

      if (month === currentMonthYear && !isNaN(limit)) {
        if (budgetType === 'H≈©' && budgetName === allocation) {
          allocationBudget = limit;
        } else if (budgetType === 'Nh√£n' && budgetName === subCategory) {
          subCategoryBudget = limit;
        }
      }
    }

    const mainSheet = getSheet(userId); // Get the main transaction sheet
    const allTransactions = mainSheet.getDataRange().getValues(); // Get all transaction data

    // Check allocation budget
    if (allocationBudget > 0) {
      const spentOnAllocation = calculateSpent(allTransactions, currentMonthYear, 'H≈©', allocation);
      sendBudgetAlert(userId, allocation, allocationBudget, spentOnAllocation, 'H≈©');
    }

    // Check subCategory budget
    if (subCategoryBudget > 0) {
      const spentOnSubCategory = calculateSpent(allTransactions, currentMonthYear, 'Nh√£n', subCategory);
      sendBudgetAlert(userId, subCategory, subCategoryBudget, spentOnSubCategory, 'Nh√£n');
    }
  } catch (err) {
    Logger.log("Error in checkAndSendBudgetAlerts: " + err.toString());
  }
}

/**
 * Helper function to calculate total spent for a given budget item.
 */
function calculateSpent(transactionsData, monthYear, budgetType, budgetName) {
  let totalSpent = 0;
  for (let i = 1; i < transactionsData.length; i++) { // Start from 1 to skip header
    const row = transactionsData[i];
    const date = new Date(row[1]); // Date column (index 1)
    const type = row[5]; // Type column (index 5) - "ChiTieu" or "ThuNhap"
    const amount = parseFloat(row[3]); // Amount column (index 3)
    const allocation = row[4]; // Allocation column (index 4)
    const subCategory = row[6]; // SubCategory column (index 6)

    const transactionMonthYear = Utilities.formatDate(date, Session.getScriptTimeZone(), "MM/yyyy");

    if (transactionMonthYear === monthYear && type === TRANSACTION_TYPE.EXPENSE && !isNaN(amount)) {
      if (budgetType === 'H≈©' && allocation === budgetName) {
        totalSpent += amount;
      } else if (budgetType === 'Nh√£n' && subCategory === budgetName) {
        totalSpent += amount;
      }
    }
  }
  return totalSpent;
}

/**
 * Helper function to send budget alerts.
 */
function sendBudgetAlert(userId, budgetName, limit, spent, budgetType) {
  const percentage = (spent / limit) * 100;
  let alertMessage = '';

  if (percentage >= 100) {
    alertMessage = `üö® B√°o ƒë·ªông: B·∫°n ƒë√£ V∆Ø·ª¢T ng√¢n s√°ch cho '${budgetName}' (${budgetType}) th√°ng n√†y! ƒê√£ chi ti√™u ${formatNumberWithSeparator(spent)}ƒë / ${formatNumberWithSeparator(limit)}ƒë.`;
  } else if (percentage >= 90) {
    alertMessage = `‚ö†Ô∏è C·∫£nh b√°o: B·∫°n ƒë√£ chi ti√™u ${Math.round(percentage)}% ng√¢n s√°ch cho '${budgetName}' (${budgetType}) th√°ng n√†y! ƒê√£ chi ti√™u ${formatNumberWithSeparator(spent)}ƒë / ${formatNumberWithSeparator(limit)}ƒë.`;
  }

  if (alertMessage) {
    sendText(userId, alertMessage);
  }
}

// Helper to get spreadsheet ID from userId (duplicate logic from getSheet, but necessary for checkAndSendBudgetAlerts)
function getSpreadsheetId(entityId) {
  const cache = CacheService.getScriptCache();
  const cachedId = cache.get(entityId.toString());
  
  if (cachedId) {
    Logger.log("Sheet ID found in cache for: " + entityId);
    return cachedId;
  }

  Logger.log("Sheet ID not in cache, fetching from UserList for: " + entityId);
  const usersSpreadsheet = SpreadsheetApp.openById(main_sheet);
  const usersSheet = usersSpreadsheet.getSheetByName('UserList'); 
  const userData = usersSheet.getDataRange().getValues();
  
  for (let i = 1; i < userData.length; i++) { // Start from 1 to skip header
    if (userData[i][0] == entityId) {
      const sheetId = userData[i][1];
      cache.put(entityId.toString(), sheetId, 21600); // L∆∞u trong 6 ti·∫øng
      return sheetId;
    }
  }
  return null;
}

/**
 * Handles the /startgroup command to initialize bot for a group chat.
 */
function processStartGroupCommand(context) {
  try {
    // Ensure it's a group chat
    if (context.chatType !== 'group' && context.chatType !== 'supergroup') {
      sendText(context.chatId, "L·ªánh n√†y ch·ªâ c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong nh√≥m chat.");
      return;
    }

    sendLoadingMessage(context.chatId, "kh·ªüi t·∫°o bot cho nh√≥m c·ªßa b·∫°n");

    // Use the updated getSheet to create a group spreadsheet
    // getSheet(entityId, entityType, senderId = null)
    const groupSpreadsheet = getSheet(context.chatId, context.chatType, context.message.from.id);

    if (groupSpreadsheet) {
      const welcomeMessage = `üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi MoneyNe Bot, nh√≥m **${context.message.chat.title}**!
T√¥i s·∫Ω gi√∫p c·∫£ nh√≥m qu·∫£n l√Ω thu chi chung.

ƒê·ªÉ b·∫Øt ƒë·∫ßu, m·ªçi ng∆∞·ªùi c√≥ th·ªÉ d√πng c√°c l·ªánh sau:

*   \`/chi n·ªôi dung s·ªë_ti·ªÅn\` (VD: \`/chi ƒÉn tr∆∞a 50000\`)
*   \`/thu n·ªôi dung s·ªë_ti·ªÅn\` (VD: \`/thu g√≥p qu·ªπ 100000\`)

M·ªói giao d·ªãch s·∫Ω ƒë∆∞·ª£c ghi nh·∫≠n k√®m theo t√™n c·ªßa ng∆∞·ªùi g·ª≠i.

B·∫°n c√≥ th·ªÉ xem t·ªïng quan b·∫±ng l·ªánh \`/tongtien\` ho·∫∑c \`/lichsu\`.
Ch√∫c nh√≥m b·∫°n qu·∫£n l√Ω t√†i ch√≠nh hi·ªáu qu·∫£!`;
      updateLoadingMessage(context.chatId, context.messageId, welcomeMessage);
    } else {
      updateLoadingMessage(context.chatId, context.messageId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi kh·ªüi t·∫°o bot cho nh√≥m. Vui l√≤ng th·ª≠ l·∫°i.");
    }

  } catch (err) {
    Logger.log("Error in processStartGroupCommand: " + err.toString());
    updateLoadingMessage(context.chatId, context.messageId, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi kh·ªüi t·∫°o bot cho nh√≥m. Vui l√≤ng th·ª≠ l·∫°i.");
  }
}

function triggerProcessVoiceMessage() {
  const properties = PropertiesService.getScriptProperties();
  const fileId = properties.getProperty('VOICE_MESSAGE_FILE_ID');
  const context = JSON.parse(properties.getProperty('VOICE_MESSAGE_CONTEXT'));

  if (fileId && context) {
    processVoiceMessage(fileId, context);
    // Clean up properties after use
    properties.deleteProperty('VOICE_MESSAGE_FILE_ID');
    properties.deleteProperty('VOICE_MESSAGE_CONTEXT');
  } else {
    Logger.log("Error: Missing fileId or context for triggerProcessVoiceMessage.");
  }
}

// Test function to check if bot can send messages
function testBotConnection() {
  try {
    const testChatId = "YOUR_CHAT_ID"; // Replace with your actual chat ID
    const response = sendText(testChatId, "ü§ñ Bot test - n·∫øu b·∫°n nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn n√†y th√¨ bot ƒë√£ ho·∫°t ƒë·ªông!");
    Logger.log("Test message result: " + JSON.stringify(response));
    return "Test completed - check logs and Telegram";
  } catch (err) {
    Logger.log("Test failed: " + err.toString());
    return "Test failed: " + err.toString();
  }
}
