var token = PropertiesService.getScriptProperties().getProperty('BOT_TOKEN');
var gemini_token = PropertiesService.getScriptProperties().getProperty('GEMINI_TOKEN');
var main_sheet = PropertiesService.getScriptProperties().getProperty('ID_MAINSHEET');

function getApiKeys() {
  var keysString = PropertiesService.getScriptProperties().getProperty('GEMINI_LISTKEY');
  if (!keysString) return [];
  return JSON.parse(keysString);
}


var telegramUrl = "https://api.telegram.org/bot" + token;
var webAppUrl = "CHANGE_YOU_URL_APPSCRIP";


function setWebhook() {
  var url = telegramUrl + "/setWebhook?url=" + webAppUrl;
  var response = UrlFetchApp.fetch(url);
  Logger.log("Webhook response: " + response.getContentText());
  return response.getContentText();
}

// Function ƒë·ªÉ set webhook v·ªõi URL c·ª• th·ªÉ
function setWebhookWithURL(newWebAppUrl) {
  var url = telegramUrl + "/setWebhook?url=" + newWebAppUrl;
  var response = UrlFetchApp.fetch(url);
  Logger.log("Webhook set to: " + newWebAppUrl);
  Logger.log("Response: " + response.getContentText());
  return response.getContentText();
}

function formatNumberWithSeparator(number) {
  return number
    .toString()
}

// Global allocations array (s·ª≠ d·ª•ng cho to√†n b·ªô ·ª©ng d·ª•ng)
var allocations = [
  'Chi ti√™u thi·∫øt y·∫øu',
  'H∆∞·ªüng th·ª•',
  'Ti·∫øt ki·ªám d√†i h·∫°n',
  'Gi√°o d·ª•c',
  'T·ª± do t√†i ch√≠nh',
  'Cho ƒëi'
];

// Global subcategories object
var subCategories = {
  'Chi ti√™u thi·∫øt y·∫øu': ['Nh√† ·ªü', 'ƒÇn ngo√†i', 'H√≥a ƒë∆°n', 'ƒêi ch·ª£ si√™u th·ªã', 'Di chuy·ªÉn', 'S·ª©c kh·ªèe'],
  'H∆∞·ªüng th·ª•': ['Gi·∫£i tr√≠', 'Th·ª©c u·ªëng', 'Nh√† h√†ng', 'Mua s·∫Øm', 'ChƒÉm s√≥c b·∫£n th√¢n', 'Du l·ªãch', 'Th·ªÉ thao'],
  'Ti·∫øt ki·ªám d√†i h·∫°n': ['Mua s·∫Øm nh·ªØng m√≥n ƒë·ªì gi√° tr·ªã', 'Nh·ªØng k·ª≥ ngh·ªâ l·ªõn', 'C√°c m·ª•c ti√™u c√° nh√¢n kh√°c', 'Qu·ªπ d·ª± ph√≤ng kh·∫©n c·∫•p'],
  'Gi√°o d·ª•c': ['S√°ch', 'Kh√≥a h·ªçc', 'S·ª± ki·ªán'],
  'T·ª± do t√†i ch√≠nh': ['ƒê·∫ßu t∆∞', 'Kinh doanh', 'B·∫•t ƒë·ªông s·∫£n', 'G·ª≠i ti·∫øt ki·ªám sinh l·ªùi'],
  'Cho ƒëi': ['T·ª´ thi·ªán', 'Gi√∫p ƒë·ª° ng∆∞·ªùi th√¢n', 'Qu√† t·∫∑ng', 'ƒê√≥ng g√≥p cho c·ªông ƒë·ªìng']
};

// Global createAllocationKeyboard function
function createAllocationKeyboard(transactionId) {
  var keyboard = [];
  
  // T·∫°o h√†ng keyboard, m·ªói h√†ng 2 button
  for (var i = 0; i < allocations.length; i += 2) {
    var row = [];
    
    // Ph√¢n bi·ªát format cho transaction m·ªõi vs edit
    var callbackPrefix = '';
    if (transactionId) {
      // Edit transaction: edit_alloc_tx_123456_0
      callbackPrefix = 'edit_alloc_' + transactionId + '_';
    } else {
      // Transaction m·ªõi: allocation_0
      callbackPrefix = 'allocation_';
    }
    
    row.push({
      text: allocations[i],
      callback_data: callbackPrefix + i // D√πng index thay t√™n
    });
    
    if (i + 1 < allocations.length) {
      row.push({
        text: allocations[i + 1],
        callback_data: callbackPrefix + (i + 1) // D√πng index thay t√™n
      });
    }
    
    keyboard.push(row);
  }
  
  return {
    "inline_keyboard": keyboard
  };
}

// Helper function ƒë·ªÉ t·∫°o edit keyboard
function createEditKeyboard(transactionId) {
  var callbackData = transactionId ? 'edit_transaction_' + transactionId : 'edit_transaction';
  return {
    "inline_keyboard": [
      [
        {
          text: '‚úèÔ∏è Ch·ªânh s·ª≠a',
          callback_data: callbackData
        }
      ]
    ]
  };
}

// Global createSubCategoryKeyboard function
function createSubCategoryKeyboard(allocation, isEdit, transactionId, allocationIndex) {
  if (!subCategories[allocation]) return null;
  
  var keyboard = [];
  var subs = subCategories[allocation];
  var prefix = '';
  
  if (isEdit && transactionId && (allocationIndex !== undefined && allocationIndex >= 0)) {
    // Format m·ªõi ng·∫Øn: edit_sub_tx_123456_0_1 (allocationIndex_subIndex)
    prefix = 'edit_sub_' + transactionId + '_' + allocationIndex + '_';
  } else if (isEdit && transactionId) {
    // Format c≈© d√†i: edit_subcategory_tx_123456_AllocationName_
    prefix = 'edit_subcategory_' + transactionId + '_' + allocation + '_';
  } else if (isEdit) {
    // Format c≈© kh√¥ng c√≥ transactionId
    prefix = 'edit_subcategory_' + allocation + '_';
  } else {
    // Format th∆∞·ªùng cho transaction m·ªõi
    prefix = 'subcategory_' + allocation + '_';
  }
  
  // T·∫°o h√†ng keyboard, m·ªói h√†ng 2 button
  for (var i = 0; i < subs.length; i += 2) {
    var row = [];
    
    if (isEdit && transactionId && (allocationIndex !== undefined && allocationIndex >= 0)) {
      // D√πng index cho subcategory ƒë·ªÉ r√∫t ng·∫Øn
      row.push({
        text: subs[i],
        callback_data: prefix + i // subcategory index
      });
      
      if (i + 1 < subs.length) {
        row.push({
          text: subs[i + 1],
          callback_data: prefix + (i + 1) // subcategory index
        });
      }
    } else {
      // D√πng t√™n subcategory (format c≈©)
      row.push({
        text: subs[i],
        callback_data: prefix + subs[i]
      });
      
      if (i + 1 < subs.length) {
        row.push({
          text: subs[i + 1],
          callback_data: prefix + subs[i + 1]
        });
      }
    }
    
    keyboard.push(row);
  }
  
  // Th√™m n√∫t "Quay l·∫°i" ·ªü h√†ng cu·ªëi
  var backButtonData = '';
  if (isEdit && transactionId) {
    // Cho edit flow: quay l·∫°i ch·ªçn h≈©
    backButtonData = 'edit_transaction_' + transactionId;
  } else {
    // Cho transaction m·ªõi: quay l·∫°i ch·ªçn h≈©  
    backButtonData = 'back_to_allocation';
  }
  
  keyboard.push([{
    text: "üîô Quay l·∫°i ch·ªçn h≈©",
    callback_data: backButtonData
  }]);
  
  return {
    "inline_keyboard": keyboard
  };
}

function addTransactionData(userId, date, description, amount, allocation, type, subCategory) {
  var sheet = getSheet(userId); 
  subCategory = subCategory || ""; // M·∫∑c ƒë·ªãnh r·ªóng n·∫øu kh√¥ng c√≥
  
  sheet.appendRow([date, description, amount, allocation, type, subCategory]);
}


function sendText(chatId, text, keyBoard) {
  var formattedText = formatNumberWithSeparator(text);
  var data = {
    method: "post",
    payload: {
      method: "sendMessage",
      chat_id: String(chatId),
      text: formattedText,
      parse_mode: "HTML",
      reply_markup: JSON.stringify(keyBoard)
    }
  };
  UrlFetchApp.fetch('https://api.telegram.org/bot' + token + '/', data);
}

// Function ƒë·ªÉ edit tin nh·∫Øn hi·ªán t·∫°i thay v√¨ g·ª≠i tin nh·∫Øn m·ªõi
function editText(chatId, messageId, text, keyBoard) {
  var formattedText = formatNumberWithSeparator(text);
  var data = {
    method: "post",
    payload: {
      method: "editMessageText",
      chat_id: String(chatId),
      message_id: String(messageId),
      text: formattedText,
      parse_mode: "HTML",
      reply_markup: JSON.stringify(keyBoard)
    }
  };
  
  try {
    UrlFetchApp.fetch('https://api.telegram.org/bot' + token + '/', data);
    Logger.log("DEBUG: Message edited successfully");
    return true;
  } catch (error) {
    Logger.log("DEBUG: Failed to edit message: " + error.toString());
    // Fallback: g·ª≠i tin nh·∫Øn m·ªõi n·∫øu kh√¥ng edit ƒë∆∞·ª£c
    sendText(chatId, text, keyBoard);
    return false;
  }
}

var keyBoard = {
  "inline_keyboard": [
    [
      {
        text: 'Xem T·ªïng Chi Ti√™u',
        callback_data: 'totalchi'
      }
    ],
    [
      {
        text: 'Xem T·ªïng Thu Nh·∫≠p',
        callback_data: 'totalthunhap'
      }
    ],
    [
      {
        text: 'Xem S·ªë Ti·ªÅn Hi·ªán T·∫°i',
        callback_data: 'currentbalance'
      }
    ],
    [
      {
        text: 'Xem Chi Ti·∫øt C√°c H≈©',
        callback_data: 'getTotalAllocationBalances'
      }
    ],
    [
      {
        text: 'Xem L·ªãch S·ª≠ Thu/Chi',
        callback_data: 'history'
      }
    ],
    [
      {
        text: 'Open App',
        web_app: {
          url: 'https://moneynebot.blogspot.com/?m=1'
        }
      }
    ],
    [
      {
        text: 'Connect Email',
        callback_data: 'connect_email'
      }
    ]
  ]
};
var menuchi = {
  "inline_keyboard": [
    [
      {
        text: 'Xem T·ªïng Thu Nh·∫≠p',
        callback_data: 'totalthunhap'
      },
      {
        text: 'Xem Chi Ti·∫øt C√°c H≈©',
        callback_data: 'getTotalAllocationBalances'
      }
    ]
  ]
};

function doPost(e) {
  var contents = JSON.parse(e.postData.contents);
  var chatId;
  var userName;

  // DEBUG: Log to√†n b·ªô request
  Logger.log("=== DOPOST DEBUG ===");
  Logger.log("Request contents: " + JSON.stringify(contents));
  
  if (contents.callback_query) {
    chatId = contents.callback_query.from.id;
    userName = contents.callback_query.from.first_name;
    var data = contents.callback_query.data;
    var messageId = contents.callback_query.message.message_id;
    
    Logger.log("CALLBACK QUERY DETECTED:");
    Logger.log("Chat ID: " + chatId);
    Logger.log("Message ID: " + messageId);
    Logger.log("Callback data: " + data);

    if (data === 'connect_email') {
      sendText(chatId, "Vui l√≤ng nh·∫≠p email c·ªßa b·∫°n:");
      return;
    } else if (data.startsWith('bank_')) {
      var bankName = data.split('_')[1]; 
      saveBankToSheet(chatId, bankName); 
      sendText(chatId, "Ng√¢n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi th√†nh c√¥ng: " + bankName);
      return;
    } else if (data.startsWith('subcategory_')) {
      // X·ª≠ l√Ω ch·ªçn nh√£n con
      var parts = data.split('_');
      var allocation = parts[1];
      var subCategory = parts.slice(2).join('_');
      
      // L·∫•y th√¥ng tin giao d·ªãch t·∫°m t·ª´ cache
      var tempTransaction = getTempTransaction(chatId);
      if (tempTransaction) {
        // L∆∞u giao d·ªãch v·ªõi subcategory
        addTransactionData(
          chatId, 
          tempTransaction.date, 
          tempTransaction.description, 
          tempTransaction.amount, 
          allocation, 
          tempTransaction.type,
          subCategory
        );
        
        // L∆∞u th√¥ng tin giao d·ªãch v·ª´a t·∫°o ƒë·ªÉ c√≥ th·ªÉ ch·ªânh s·ª≠a
        var transactionId = 'tx_' + Date.now(); // Unique ID cho transaction
        var transactionInfo = {
          userId: chatId,
          transactionId: transactionId,
          date: tempTransaction.date,
          description: tempTransaction.description,
          amount: tempTransaction.amount,
          allocation: allocation,
          type: tempTransaction.type,
          subCategory: subCategory,
          rowIndex: getLastRowIndex(chatId) // L·∫•y index c·ªßa row v·ª´a th√™m
        };
        saveTransactionForEdit(chatId, transactionInfo, transactionId);
        
        // X√≥a cache t·∫°m
        clearTempTransaction(chatId);
        
        // Th√¥ng b√°o th√†nh c√¥ng v·ªõi keyboard ch·ªânh s·ª≠a
        var typeText = tempTransaction.type === "ThuNhap" ? "thu nh·∫≠p" : "chi ti√™u";
        var editKeyboard = createEditKeyboard(transactionId);
        
        editText(chatId, messageId,
          "‚úÖ ƒê√£ ghi nh·∫≠n " + typeText + ": " + tempTransaction.description + 
          " " + tempTransaction.amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + 
          " v√†o h≈© " + allocation + " v·ªõi nh√£n " + subCategory,
          editKeyboard
        );
      }
      return;
    } else if (data === 'edit_transaction' || data.startsWith('edit_transaction_')) {
      // X·ª≠ l√Ω ch·ªânh s·ª≠a giao d·ªãch
      Logger.log("DEBUG: edit_transaction callback received for user: " + chatId);
      var transactionId = data.startsWith('edit_transaction_') ? data.replace('edit_transaction_', '') : null;
      Logger.log("DEBUG: Transaction ID: " + transactionId);
      var transactionInfo = getTransactionForEdit(chatId, transactionId);
      Logger.log("DEBUG: transactionInfo from cache: " + JSON.stringify(transactionInfo));
      
      if (transactionInfo) {
        // Hi·ªÉn th·ªã keyboard ch·ªçn h≈© m·ªõi v·ªõi transactionId
        var allocationKeyboard = createAllocationKeyboard(transactionInfo.transactionId);
        Logger.log("DEBUG: Allocation keyboard created with " + allocationKeyboard.inline_keyboard.length + " rows");
        
        // Debug keyboard content
        for (var i = 0; i < allocationKeyboard.inline_keyboard.length; i++) {
          var row = allocationKeyboard.inline_keyboard[i];
          Logger.log("Keyboard row " + (i+1) + ": " + JSON.stringify(row));
        }
        
        editText(chatId, messageId,
          "üîÑ Ch·ªânh s·ª≠a giao d·ªãch: " + transactionInfo.description + 
          " " + transactionInfo.amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + 
          "\n\nVui l√≤ng ch·ªçn h≈© m·ªõi:",
          allocationKeyboard
        );
        Logger.log("DEBUG: Edit message sent");
      } else {
        Logger.log("DEBUG: No transaction info found in cache");
        editText(chatId, messageId, "‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin giao d·ªãch ƒë·ªÉ ch·ªânh s·ª≠a. Vui l√≤ng th·ª≠ l·∫°i.", null);
      }
      return;
    } else if (data.startsWith('edit_allocation_') || data.startsWith('edit_alloc_')) {
      // X·ª≠ l√Ω ch·ªçn h≈© m·ªõi khi ch·ªânh s·ª≠a (format m·ªõi ng·∫Øn h∆°n)
      Logger.log("DEBUG: edit_allocation callback: " + data);
      
      // Parse transactionId v√† allocation index t·ª´ callback_data
      var parts = data.split('_');
      var transactionId = null;
      var allocationIndex = -1;
      var allocation = '';
      
      if (data.startsWith('edit_alloc_') && parts.length >= 4 && parts[2] === 'tx') {
        // Format m·ªõi: edit_alloc_tx_123456_0
        // parts = ['edit', 'alloc', 'tx', '123456', '0']
        transactionId = parts[2] + '_' + parts[3]; // T√°i t·∫°o 'tx_123456'
        allocationIndex = parseInt(parts[4]);
        allocation = allocations[allocationIndex]; // L·∫•y t√™n t·ª´ index
      } else if (data.startsWith('edit_allocation_') && parts.length > 3 && parts[2] === 'tx') {
        // Format c≈©: edit_allocation_tx_123456_AllocationName (backward compatibility)
        transactionId = parts[2] + '_' + parts[3];
        allocation = parts.slice(4).join('_');
      } else {
        // Format c≈© nh·∫•t: edit_allocation_AllocationName (backward compatibility)
        allocation = parts.slice(2).join('_');
      }
      
      Logger.log("DEBUG: Parsed transactionId: " + transactionId + ", allocationIndex: " + allocationIndex + ", allocation: " + allocation);
      Logger.log("DEBUG: ChatId: " + chatId);
      
      // Lu√¥n s·ª≠ d·ª•ng transactionId n·∫øu c√≥, kh√¥ng fallback sang userId
      var transactionInfo = null;
      if (transactionId) {
        transactionInfo = getTransactionForEdit(chatId, transactionId);
      } else {
        // Backward compatibility - ch·ªâ khi kh√¥ng c√≥ transactionId
        transactionInfo = getTransactionForEdit(chatId);
      }
      Logger.log("DEBUG: Retrieved transaction for edit: " + JSON.stringify(transactionInfo));
      
      if (transactionInfo) {
        // C·∫≠p nh·∫≠t allocation
        transactionInfo.allocation = allocation;
        saveTransactionForEdit(chatId, transactionInfo, transactionInfo.transactionId);
        Logger.log("DEBUG: Updated allocation to: " + allocation);
        
        // Hi·ªÉn th·ªã keyboard ch·ªçn nh√£n con cho edit
        var keyboard = createSubCategoryKeyboard(allocation, true, transactionInfo.transactionId, allocationIndex);
        editText(chatId, messageId,
          "ƒê√£ ch·ªçn h≈©: " + allocation + 
          "\nVui l√≤ng ch·ªçn nh√£n c·ª• th·ªÉ:",
          keyboard
        );
        Logger.log("DEBUG: Subcategory keyboard sent");
      } else {
        Logger.log("DEBUG: No transaction info found for edit_allocation");
        editText(chatId, messageId, "‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin giao d·ªãch ƒë·ªÉ ch·ªânh s·ª≠a. Vui l√≤ng th·ª≠ l·∫°i.", null);
      }
      return;
    } else if (data.startsWith('edit_subcategory_') || data.startsWith('edit_sub_')) {
      // X·ª≠ l√Ω ch·ªçn nh√£n con m·ªõi khi ch·ªânh s·ª≠a
      Logger.log("DEBUG: edit_subcategory callback: " + data);
      var parts = data.split('_');
      var transactionId = null;
      var allocation = '';
      var subCategory = '';
      var allocationIndex = -1;
      var subCategoryIndex = -1;
      
      if (data.startsWith('edit_sub_') && parts.length >= 6 && parts[2] === 'tx') {
        // Format m·ªõi ng·∫Øn: edit_sub_tx_123456_0_1 (allocationIndex_subCategoryIndex)
        // parts = ['edit', 'sub', 'tx', '123456', '0', '1']
        transactionId = parts[2] + '_' + parts[3]; // T√°i t·∫°o 'tx_123456'
        allocationIndex = parseInt(parts[4]);
        subCategoryIndex = parseInt(parts[5]);
        allocation = allocations[allocationIndex];
        subCategory = subCategories[allocation][subCategoryIndex];
      } else if (data.startsWith('edit_subcategory_') && parts.length > 4 && parts[2] === 'tx') {
        // Format c≈© d√†i: edit_subcategory_tx_123456_AllocationName_SubCategory
        transactionId = parts[2] + '_' + parts[3];
        allocation = parts[4];
        subCategory = parts.slice(5).join('_');
      } else {
        // Format c≈© nh·∫•t: edit_subcategory_AllocationName_SubCategory (backward compatibility)
        allocation = parts[2];
        subCategory = parts.slice(3).join('_');
      }
      
      Logger.log("DEBUG: Parsed transactionId: " + transactionId + ", allocationIndex: " + allocationIndex + ", subCategoryIndex: " + subCategoryIndex);
      Logger.log("DEBUG: allocation: " + allocation + ", subCategory: " + subCategory);
      Logger.log("DEBUG: ChatId: " + chatId);
      
      // Lu√¥n s·ª≠ d·ª•ng transactionId n·∫øu c√≥, kh√¥ng fallback sang userId  
      var transactionInfo = null;
      if (transactionId) {
        transactionInfo = getTransactionForEdit(chatId, transactionId);
      } else {
        // Backward compatibility - ch·ªâ khi kh√¥ng c√≥ transactionId
        transactionInfo = getTransactionForEdit(chatId);
      }
      Logger.log("DEBUG: Retrieved transaction: " + JSON.stringify(transactionInfo));
      
      if (transactionInfo) {
        // C·∫≠p nh·∫≠t subcategory
        transactionInfo.allocation = allocation;
        transactionInfo.subCategory = subCategory;
        Logger.log("DEBUG: Updated transaction info: " + JSON.stringify(transactionInfo));
        
        // C·∫≠p nh·∫≠t giao d·ªãch trong sheet
        updateTransactionInSheet(transactionInfo);
        Logger.log("DEBUG: Updated transaction in sheet");
        
        // Kh√¥ng x√≥a cache ƒë·ªÉ c√≥ th·ªÉ ch·ªânh s·ª≠a ti·∫øp
        Logger.log("DEBUG: Keeping cache for future edits");
        
        // L∆∞u l·∫°i th√¥ng tin giao d·ªãch v·ª´a c·∫≠p nh·∫≠t ƒë·ªÉ c√≥ th·ªÉ ch·ªânh s·ª≠a ti·∫øp
        saveTransactionForEdit(chatId, transactionInfo, transactionInfo.transactionId);
        
        // Th√¥ng b√°o th√†nh c√¥ng v·ªõi n√∫t ch·ªânh s·ª≠a
        var typeText = transactionInfo.type === "ThuNhap" ? "thu nh·∫≠p" : "chi ti√™u";
        var editKeyboard = createEditKeyboard(transactionInfo.transactionId);
        
        editText(chatId, messageId,
          "‚úÖ ƒê√£ c·∫≠p nh·∫≠t " + typeText + ": " + transactionInfo.description + 
          " " + transactionInfo.amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + 
          " v√†o h≈© " + allocation + " v·ªõi nh√£n " + subCategory,
          editKeyboard
        );
        Logger.log("DEBUG: Success message with edit button sent");
      } else {
        Logger.log("DEBUG: No transaction info found for edit_subcategory");
        editText(chatId, messageId, "‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin giao d·ªãch ƒë·ªÉ ch·ªânh s·ª≠a. Vui l√≤ng th·ª≠ l·∫°i.", null);
      }
      return;
    } else if (data.startsWith('allocation_')) {
      // X·ª≠ l√Ω ch·ªçn h≈© cho transaction m·ªõi
      Logger.log("DEBUG: allocation callback: " + data);
      
      // Parse allocation index t·ª´ callback_data: allocation_0
      var parts = data.split('_');
      var allocationIndex = parseInt(parts[1]);
      var allocation = allocations[allocationIndex];
      
      Logger.log("DEBUG: Parsed allocationIndex: " + allocationIndex + ", allocation: " + allocation);
      
      // L·∫•y th√¥ng tin transaction t·∫°m t·ª´ cache
      var tempTransaction = getTempTransaction(chatId);
      Logger.log("DEBUG: Retrieved temp transaction: " + JSON.stringify(tempTransaction));
      
      if (tempTransaction) {
        // C·∫≠p nh·∫≠t allocation
        tempTransaction.allocation = allocation;
        saveTempTransaction(chatId, tempTransaction);
        Logger.log("DEBUG: Updated temp transaction allocation to: " + allocation);
        
        // Hi·ªÉn th·ªã keyboard ch·ªçn nh√£n con
        var keyboard = createSubCategoryKeyboard(allocation, false, null, null);
        editText(chatId, messageId,
          (tempTransaction.type === 'ThuNhap' ? 'Thu nh·∫≠p: ' : 'Chi ti√™u: ') + 
          tempTransaction.description + " " + 
          formatNumberWithSeparator(tempTransaction.amount) + " v√†o h≈© " + allocation + 
          "\nVui l√≤ng ch·ªçn nh√£n c·ª• th·ªÉ:",
          keyboard
        );
        Logger.log("DEBUG: Subcategory keyboard sent for new transaction");
      } else {
        Logger.log("DEBUG: No temp transaction found for allocation selection");
        editText(chatId, messageId, "‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin giao d·ªãch. Vui l√≤ng nh·∫≠p l·∫°i giao d·ªãch c·ªßa b·∫°n.", null);
      }
      return;
    } else if (data === 'back_to_allocation') {
      // X·ª≠ l√Ω n√∫t "Quay l·∫°i" cho transaction m·ªõi
      Logger.log("DEBUG: back_to_allocation callback");
      
      // L·∫•y th√¥ng tin transaction t·∫°m t·ª´ cache
      var tempTransaction = getTempTransaction(chatId);
      Logger.log("DEBUG: Retrieved temp transaction: " + JSON.stringify(tempTransaction));
      
      if (tempTransaction) {
        // Hi·ªÉn th·ªã l·∫°i keyboard ch·ªçn h≈©
        var keyboard = createAllocationKeyboard(null); // Kh√¥ng c√≥ transactionId cho transaction m·ªõi
        editText(chatId, messageId,
          "üîÑ Quay l·∫°i ch·ªçn h≈©\n" +
          (tempTransaction.type === 'ThuNhap' ? 'Thu nh·∫≠p: ' : 'Chi ti√™u: ') + 
          tempTransaction.description + " " + 
          formatNumberWithSeparator(tempTransaction.amount) + 
          "\n\nVui l√≤ng ch·ªçn h≈©:",
          keyboard
        );
        Logger.log("DEBUG: Back to allocation keyboard sent");
      } else {
        Logger.log("DEBUG: No temp transaction found for back_to_allocation");
        editText(chatId, messageId, "‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin giao d·ªãch. Vui l√≤ng nh·∫≠p l·∫°i giao d·ªãch c·ªßa b·∫°n.", null);
      }
      return;
    } else {
      // Log unhandled callback
      Logger.log("DEBUG: Unhandled callback in first block: " + data);
      Logger.log("Available handlers: connect_email, bank_, subcategory_, edit_transaction, edit_allocation_, edit_subcategory_");
    }
  } else if (contents.message) {
    chatId = contents.message.chat.id;
    userName = contents.message.from.first_name;
    var text = contents.message.text;
    if (contents.message.voice) {
      var fileId = contents.message.voice.file_id;
      processVoiceMessage(fileId, chatId);
      return;
    }

    
    if (isValidEmail(text)) {
      var userId = chatId;
      saveEmailToSheet(userId, text);
      sendBankOptions(chatId); 
      return;
    }
  }

  // (Allocations v√† functions ƒë√£ di chuy·ªÉn th√†nh global)

  // (Cache functions moved to global scope for reusability)

    // (updateTransactionInSheet function moved to global scope)

  if (contents.callback_query) {
    var id_callback = chatId;
    var data = contents.callback_query.data;
    var messageId = contents.callback_query.message.message_id;
    
    Logger.log("SECOND CALLBACK BLOCK:");
    Logger.log("Chat ID: " + id_callback);
    Logger.log("Message ID: " + messageId);
    Logger.log("Callback data: " + data);

    if (data === 'totalchi') {
      var userId = chatId;
      var totalExpenses = getTotalAmountByType(userId, "ChiTieu");
      sendText(id_callback, "T·ªïng chi ti√™u c·ªßa b·∫°n l√†: " + totalExpenses.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","), menuchi);
    } else if (data === 'totalthunhap') {
      var userId = chatId;
      sendTotalIncomeSummary(id_callback, userId);
    } else if (data === 'currentbalance') {
      var userId = chatId;
      var currentBalance = getCurrentBalance(userId);
      sendText(id_callback, "S·ªë ti·ªÅn hi·ªán t·∫°i c·ªßa b·∫°n l√†: " + currentBalance.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","));
    } else if (data === 'getTotalAllocationBalances') {
      var userId = chatId;
      sendTotalPhanboSummary(id_callback, userId);
    } else if (data === 'history') {
      var userId = chatId;
      sendTransactionHistory(id_callback, userId);
    } else {
      Logger.log("DEBUG: Unhandled callback in second block: " + data);
    }
  } else if (contents.message) {
    var id_message = chatId;
    var text = contents.message.text;
    if (text === '/clearthunhap') {
      var userId = chatId;
      var sheet = getSheet(userId);
      var data = sheet
        .getDataRange()
        .getValues();
      var newData = [];

      for (var i = 0; i < data.length; i++) {
        if (data[i][4] !== "ThuNhap") {
          newData.push(data[i]);
        }
      }
      
      sheet
        .getDataRange()
        .clearContent();

      
      if (newData.length > 0) {
        sheet
          .getRange(1, 1, newData.length, newData[0].length)
          .setValues(newData);
      }
      sendText(chatId, "ƒê√£ xo√° c√°c thu nh·∫≠p.");
      return;
    } else if (text === '/clearchitieu') {
      var userId = chatId;
      var sheet = getSheet(userId);
      var data = sheet
        .getDataRange()
        .getValues();
      var newData = [];

      for (var i = 0; i < data.length; i++) {
        if (data[i][4] !== "ChiTieu") {
          newData.push(data[i]);
        }
      }
      
      sheet
        .getDataRange()
        .clearContent();

      
      if (newData.length > 0) {
        sheet
          .getRange(1, 1, newData.length, newData[0].length)
          .setValues(newData);
      }
      sendText(chatId, "ƒê√£ xo√° c√°c giao d·ªãch chi ti√™u.");
      return;
    } else if (text === '/clearall') {
      var userId = chatId;
      var sheet = getSheet(userId);
      var data = sheet
        .getDataRange()
        .getValues();
      var newData = [];

      for (var i = 0; i < data.length; i++) {
        if (data[i][4] !== "ChiTieu" && data[i][4] !== "ThuNhap") {
          newData.push(data[i]);
        }
      }
      
      sheet
        .getDataRange()
        .clearContent();

      
      if (newData.length > 0) {
        sheet
          .getRange(1, 1, newData.length, newData[0].length)
          .setValues(newData);
      }
      sendText(chatId, "ƒê√£ xo√° c√°c giao d·ªãch chi ti√™u v√† thu nh·∫≠p.");
      
      return;
    } else if (text.includes("+")) {
      var parts = text.split(" + ");
      if (parts.length >= 2) {
        var itemWithAllocation = parts[0].trim();
        var amountWithDate = parts[1].trim();
        var allocationAndDate = parts
          .slice(2)
          .join(" ")
          .trim() || "Chi ti√™u thi·∫øt y·∫øu";
        var allocationParts = itemWithAllocation.split("+");
        var currentDate = new Date(year, month, day);
        var date;

        if (allocationParts.length >= 2) {
          item = allocationParts[0].trim();
          allocationAndDate = allocationParts[1].trim();
        } else {
          item = itemWithAllocation;
        }
        
        var dateRegex = /(\d{1,2}[/-]\d{1,2}[/-]\d{4})/;
        var dateMatch = allocationAndDate.match(dateRegex);

        if (dateMatch) {
          
          var dateParts = dateMatch[0].split(/[/-]/);
          var day = parseInt(dateParts[0]);
          var month = parseInt(dateParts[1]) - 1;
          var year = parseInt(dateParts[2]);
          date = new Date(year, month, day);
          allocationAndDate = allocationAndDate
            .replace(dateRegex, "")
            .trim();
        } else {
          
          var currentDate = new Date();
          var day = currentDate.getDate();
          var month = currentDate.getMonth();
          var year = currentDate.getFullYear();
          date = new Date(year, month, day);
        }
        var amount = parseFloat(amountWithDate);
        var allocation = allocationAndDate || "Chi ti√™u thi·∫øt y·∫øu";
        var type = "ThuNhap"; 
        if (!isNaN(amount) && allocations.includes(allocation)) {
          // L∆∞u th√¥ng tin giao d·ªãch t·∫°m
          saveTempTransaction(chatId, {
            date: date,
            description: item,
            amount: amount,
            allocation: allocation,
            type: type
          });
          
          // Hi·ªÉn th·ªã keyboard ch·ªçn nh√£n con
          var keyboard = createSubCategoryKeyboard(allocation, false, null, null);
          sendText(
            id_message,
            "Thu nh·∫≠p: " + item + " " + amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + 
            " v√†o h≈© " + allocation + "\nVui l√≤ng ch·ªçn nh√£n c·ª• th·ªÉ:",
            keyboard
          );
          return;
        } else {
          sendText(
            id_message,
            "Vui l√≤ng cung c·∫•p th√¥ng tin thu nh·∫≠p v√† s·ªë ti·ªÅn theo c√∫ ph√°p l·ªánh sau:\n<b>1. Th√™m th√¥ng tin Thu nh·∫≠p:</b>\n   - <code>n·ªôi dung + s·ªë ti·ªÅn</code>\n\n<b>2. Th√™m th√¥ng tin Thu nh·∫≠p v√†o ng√†y/th√°ng/nƒÉm c·ª• th·ªÉ:</b>\n   - <code>n·ªôi dung + s·ªë ti·ªÅn + ng√†y/th√°ng/nƒÉm</code>\n\n<b>3. Th√™m th√¥ng tin Thu nh·∫≠p v√†o ng√†y/th√°ng/nƒÉm c·ª• th·ªÉ v√† H≈© c·ª• th·ªÉ:</b>\n   - <code>n·ªôi dung + s·ªë ti·ªÅn + ng√†y/th√°ng/nƒÉm + h≈© (Chi ti√™u thi·∫øt y·∫øu, H∆∞·ªüng th·ª•, Ti·∫øt ki·ªám d√†i h·∫°n, Gi√°o d·ª•c, T·ª± do t√†i ch√≠nh, Cho ƒëi)</code>"
          ); return;
        }
      } else {
        sendText(
          id_message,
          "Vui l√≤ng cung c·∫•p th√¥ng tin thu nh·∫≠p v√† s·ªë ti·ªÅn theo c√∫ ph√°p l·ªánh sau:\n<b>1. Th√™m th√¥ng tin Thu nh·∫≠p:</b>\n   - <code>n·ªôi dung + s·ªë ti·ªÅn</code>\n\n<b>2. Th√™m th√¥ng tin Thu nh·∫≠p v√†o ng√†y/th√°ng/nƒÉm c·ª• th·ªÉ:</b>\n   - <code>n·ªôi dung + s·ªë ti·ªÅn + ng√†y/th√°ng/nƒÉm</code>\n\n<b>3. Th√™m th√¥ng tin Thu nh·∫≠p v√†o ng√†y/th√°ng/nƒÉm c·ª• th·ªÉ v√† H≈© c·ª• th·ªÉ:</b>\n   - <code>n·ªôi dung + s·ªë ti·ªÅn + ng√†y/th√°ng/nƒÉm + h≈© (Chi ti√™u thi·∫øt y·∫øu, H∆∞·ªüng th·ª•, Ti·∫øt ki·ªám d√†i h·∫°n, Gi√°o d·ª•c, T·ª± do t√†i ch√≠nh, Cho ƒëi)</code>"
        ); return;
        
      }
    } else if (text.includes("-")) {
      var parts = text.split(" - ");
      if (parts.length >= 2) {
        var itemWithAllocation = parts[0].trim();
        var amountWithDate = parts[1].trim();
        var allocationAndDate = parts
          .slice(2)
          .join(" ")
          .trim() || "Chi ti√™u thi·∫øt y·∫øu";
        var allocationParts = itemWithAllocation.split("-");
        var currentDate = new Date(year, month, day);
        var date;

        if (allocationParts.length >= 2) {
          item = allocationParts[0].trim();
          allocationAndDate = allocationParts[1].trim();
        } else {
          item = itemWithAllocation;
        }
        
        var dateRegex = /(\d{1,2}[/-]\d{1,2}[/-]\d{4})/;
        var dateMatch = allocationAndDate.match(dateRegex);
        if (dateMatch) {
          
          var dateParts = dateMatch[0].split(/[/-]/);
          var day = parseInt(dateParts[0]);
          var month = parseInt(dateParts[1]) - 1;
          var year = parseInt(dateParts[2]);
          date = new Date(year, month, day);
          allocationAndDate = allocationAndDate
            .replace(dateRegex, "")
            .trim();
        } else {
          
          var currentDate = new Date();
          var day = currentDate.getDate();
          var month = currentDate.getMonth();
          var year = currentDate.getFullYear();
          date = new Date(year, month, day);
        }
        var amount = parseFloat(amountWithDate) 
        var allocation = allocationAndDate || "Chi ti√™u thi·∫øt y·∫øu";
        var type = "ChiTieu"; 
        if (!isNaN(amount) && allocations.includes(allocation)) {
          // L∆∞u th√¥ng tin giao d·ªãch t·∫°m
          saveTempTransaction(chatId, {
            date: date,
            description: item,
            amount: amount,
            allocation: allocation,
            type: type
          });
          
          // Hi·ªÉn th·ªã keyboard ch·ªçn nh√£n con
          var keyboard = createSubCategoryKeyboard(allocation, false, null, null);
          sendText(
            id_message,
            "Chi ti√™u: " + item + " " + amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + 
            " v√†o h≈© " + allocation + "\nVui l√≤ng ch·ªçn nh√£n c·ª• th·ªÉ:",
            keyboard
          );
          return;
        } else {
          sendText(
            id_message,
            "Vui l√≤ng cung c·∫•p th√¥ng tin Chi ti√™u v√† s·ªë ti·ªÅn theo c√∫ ph√°p l·ªánh sau:\n<b>1. Th√™m th√¥ng tin Chi ti√™u:</b>\n   - <code>n·ªôi dung - s·ªë ti·ªÅn</code>\n\n<b>2. Th√™m th√¥ng tin Chi ti√™u v√†o ng√†y/th√°ng/nƒÉm c·ª• th·ªÉ:</b>\n   - <code>n·ªôi dung - s·ªë ti·ªÅn - ng√†y/th√°ng/nƒÉm</code>\n\n<b>3. Th√™m th√¥ng tin Chi ti√™u v√†o ng√†y/th√°ng/nƒÉm c·ª• th·ªÉ v√† H≈© c·ª• th·ªÉ:</b>\n   - <code>n·ªôi dung - s·ªë ti·ªÅn - ng√†y/th√°ng/nƒÉm - h≈© (Chi ti√™u thi·∫øt y·∫øu, H∆∞·ªüng th·ª•, Ti·∫øt ki·ªám d√†i h·∫°n, Gi√°o d·ª•c, T·ª± do t√†i ch√≠nh, Cho ƒëi)</code>"
          ); return;

        }
      } else {
        sendText(
          id_message,
          "Vui l√≤ng cung c·∫•p th√¥ng tin Chi ti√™u v√† s·ªë ti·ªÅn theo c√∫ ph√°p l·ªánh sau:\n<b>1. Th√™m th√¥ng tin Chi ti√™u:</b>\n   - <code>n·ªôi dung - s·ªë ti·ªÅn</code>\n\n<b>2. Th√™m th√¥ng tin Chi ti√™u v√†o ng√†y/th√°ng/nƒÉm c·ª• th·ªÉ:</b>\n   - <code>n·ªôi dung - s·ªë ti·ªÅn - ng√†y/th√°ng/nƒÉm</code>\n\n<b>3. Th√™m th√¥ng tin Chi ti√™u v√†o ng√†y/th√°ng/nƒÉm c·ª• th·ªÉ v√† H≈© c·ª• th·ªÉ:</b>\n   - <code>n·ªôi dung - s·ªë ti·ªÅn - ng√†y/th√°ng/nƒÉm - h≈© (Chi ti√™u thi·∫øt y·∫øu, H∆∞·ªüng th·ª•, Ti·∫øt ki·ªám d√†i h·∫°n, Gi√°o d·ª•c, T·ª± do t√†i ch√≠nh, Cho ƒëi)</code>"
        ); return;

      }
    }
    
    if (text.startsWith("/history")) {
      var parts = text.split(" ");
      if (parts.length >= 2) {
        var historyType = parts[1].toLowerCase();
        var userId = chatId;
        var startDate;
        var endDate;

        if (historyType === "today") {
          
          var today = new Date();
          startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());
          endDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);
        } else if (historyType === "week") {
          
          var today = new Date();
          var startOfWeek = today.getDate() - today.getDay();
          startDate = new Date(today.getFullYear(), today.getMonth(), startOfWeek);
          endDate = new Date(today.getFullYear(), today.getMonth(), startOfWeek + 7);
        } else if (text.startsWith("/history w")) {
          var parts = text.split(" ");
          if (parts.length === 3 && parts[1] === "w") {
            var weekNumber = parseInt(parts[2]);
            if (!isNaN(weekNumber) && weekNumber >= 1 && weekNumber <= 4) {
              
              var currentDate = new Date();
              var startDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), (weekNumber - 1) * 7 + 1);
              var endDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), weekNumber * 7 + 1);

              
              sendTransactionHistoryByDateRange(chatId, userId, startDate, endDate);
              return;
            }
          }
          sendText(id_message, "Vui l√≤ng cung c·∫•p tu·∫ßn h·ª£p l·ªá, b·∫°n c√≥ th·ªÉ th·ª≠ /history w 1, /history w 2, /history w 3, /history w 4.");
        } else if (text.startsWith("/history month")) {
          var parts = text.split(" ");
          if (parts.length === 3 && parts[1] === "month") {
            var monthYearStr = parts[2];
            var [month, year] = monthYearStr.split("/");
            if (month && year) {
              month = parseInt(month);
              year = parseInt(year);
              if (!isNaN(month) && !isNaN(year)) {
                
                var startDate = new Date(year, month - 1, 1);
                var endDate = new Date(year, month, 0);
              }
            } else {
              sendText(
                id_message,
                "Vui l√≤ng cung c·∫•p th√°ng h·ª£p l·ªá, v√≠ d·ª•: /history month MM/YYYY"
              );
              return;
            }
          }
        } else if (text.startsWith("/history year")) {
          var parts = text.split(" ");
          if (parts.length === 3 && parts[1] === "year") {
            var year = parseInt(parts[2]);
            if (!isNaN(year)) {
              var startDate = new Date(year, 0, 1);
              var endDate = new Date(year + 1, 0, 1);
            }
          } else {
            sendText(
              id_message,
              "Vui l√≤ng cung c·∫•p nƒÉm h·ª£p l·ªá, v√≠ d·ª•: /history year YYYY"
            );
            return;
          }
        } else if (parts.length >= 3 && parts[1] === 'd') {
          
          var dateParts = parts
            .slice(2)
            .join(" ")
            .split("/");
          if (dateParts.length === 3) {
            var year = parseInt(dateParts[2]);
            var month = parseInt(dateParts[1]) - 1; 
            var day = parseInt(dateParts[0]);
            startDate = new Date(year, month, day);
            endDate = new Date(year, month, day + 1); 
          } else {
            sendText(
              id_message,
              "Vui l√≤ng cung c·∫•p ng√†y/th√°ng/nƒÉm h·ª£p l·ªá, v√≠ d·ª•: /history d DD/MM/YYYY"
            );
            return;
          }
        } else {
          sendText(
            id_message,
            'L·ªánh kh√¥ng h·ª£p l·ªá. H√£y s·ª≠ d·ª•ng c√°c l·ªánh sau:\n <b>1. L·ªãch s·ª≠ Thu/Chi h√¥m nay:</b>\n   - <code>/history today</code>\n\n<b>2. L·ªãch s·ª≠ Thu/Chi ng√†y c·ª• th·ªÉ:</b>\n   - <code>/history d ng√†y/th√°ng/nƒÉm</code>\n\n<b>3. L·ªãch s·ª≠ Thu/Chi trong tu·∫ßn:</b>\n   - <code>/history week</code>\n\n<b>4. L·ªãch s·ª≠ Thu/Chi trong tu·∫ßn c·ª• th·ªÉ:</b>\n   - <code>/history w 1 (2, 3, 4)</code>\n\n<b>5. L·ªãch s·ª≠ Thu/Chi th√°ng:</b>\n   - <code>/history month th√°ng/nƒÉm</code>\n\n<b>6. L·ªãch s·ª≠ Thu/Chi nƒÉm:</b>\n   - <code>/history year nƒÉm</code>\n'
          ); return;


        }

        sendTransactionHistoryByDateRange(id_message, userId, startDate, endDate);
      } else {
        sendText(
          id_message,
          'H√£y s·ª≠ d·ª•ng c√°c l·ªánh sau:\n <b>1. L·ªãch s·ª≠ Thu/Chi h√¥m nay:</b>\n   - <code>/history today</code>\n\n<b>2. L·ªãch s·ª≠ Thu/Chi ng√†y c·ª• th·ªÉ:</b>\n   - <code>/history d ng√†y/th√°ng/nƒÉm</code>\n\n<b>3. L·ªãch s·ª≠ Thu/Chi trong tu·∫ßn:</b>\n   - <code>/history week</code>\n\n<b>4. L·ªãch s·ª≠ Thu/Chi trong tu·∫ßn c·ª• th·ªÉ:</b>\n   - <code>/history w 1 (2, 3, 4)</code>\n\n<b>5. L·ªãch s·ª≠ Thu/Chi th√°ng:</b>\n   - <code>/history month th√°ng/nƒÉm</code>\n\n<b>6. L·ªãch s·ª≠ Thu/Chi nƒÉm:</b>\n   - <code>/history year nƒÉm</code>\n'
        ); return;
      }
    } else if (text === '/start') {
      
      sendText(id_message, 'Xin ch√†o ' + userName + '! Money N√® l√† Bot gi√∫p b·∫°n qu·∫£n l√Ω Thu/Chi, thu nh·∫≠p c√≥ th·ªÉ ph√¢n b·ªï ra c√°c h≈© v√† c√≤n c√°c t√≠nh nƒÉng kh√°c n·ªØa. ƒê·ªÉ bi·∫øt th√™m chi ti·∫øt v·ªÅ c√°c l·ªánh, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh /help ho·∫∑c c≈©ng c√≥ th·ªÉ xem menu Money N√® t·∫°i ƒë√¢y.',
        keyBoard
      );
    }
    else if (text === '/menu') {
      
      sendText(id_message, 'Xin ch√†o ' + userName + '! Menu Money N√® t·∫°i ƒë√¢y.',
        keyBoard
      );
    } else if (text.startsWith('/del')) {
      var userId = chatId;
      var transactionId;
      var menuthuchi = {
        "inline_keyboard": [
          [
            {
              text: 'Xem s·ªë th·ª© t·ª± Thu/Chi',
              callback_data: 'history'
            }
          ]
        ]
      };
      
      var parts = text.split(' ');

      
      for (var i = 1; i < parts.length; i++) {
        var part = parts[i];
        if (!isNaN(parseInt(part))) {
          
          transactionId = parseInt(part);
          break;
        }
      }

      if (transactionId !== undefined) {
        
        var success = deleteTransactionByRow(userId, transactionId);

        if (success) {
          sendText(id_message, 'ƒê√£ xo√° th√†nh c√¥ng Thu/Chi c√≥ s·ªë th·ª© t·ª±: ' + transactionId);
        } else {
          sendText(id_message, 'Kh√¥ng t√¨m th·∫•y thu/chi c√≥ s·ªë th·ª© t·ª± ' + transactionId);
        }
      } else {
        sendText(id_message, 'Vui l√≤ng cung c·∫•p s·ªë th·ª© t·ª± c·ªßa thu/chi c·∫ßn xo√° v√†o l·ªánh v√≠ d·ª• b√™n d∆∞·ªõi.\n V√≠ d·ª•: <code>/del s·ªë_th·ª©_t·ª±</code>', menuthuchi);
      }
      return;
    } else if (text === '/help') {
      
      sendText(id_message, `Xin ch√†o ` + userName + `! D∆∞·ªõi ƒë√¢y l√† c√°ch b·∫°n c√≥ th·ªÉ g·ª≠i th√¥ng tin v·ªÅ Chi ti√™u v√† Thu nh·∫≠p c·ªßa b·∫°n c≈©ng nh∆∞ xem l·ªãch s·ª≠ chi ti√™u:

<b>üí≥ Chi ti√™u:</b>
1. Th√™m th√¥ng tin Chi ti√™u:
  \<code>n·ªôi dung - s·ªë ti·ªÅn\</code>

2. Th√™m th√¥ng tin Chi ti√™u v√†o ng√†y/th√°ng/nƒÉm c·ª• th·ªÉ:
  \<code>n·ªôi dung - s·ªë ti·ªÅn - ng√†y/th√°ng/nƒÉm\</code>

3. Th√™m th√¥ng tin Chi ti√™u v√†o ng√†y/th√°ng/nƒÉm c·ª• th·ªÉ v√† H≈© c·ª• th·ªÉ:
  \<code>n·ªôi dung - s·ªë ti·ªÅn - ng√†y/th√°ng/nƒÉm - h≈© (Chi ti√™u thi·∫øt y·∫øu, H∆∞·ªüng th·ª•, Ti·∫øt ki·ªám d√†i h·∫°n, Gi√°o d·ª•c, T·ª± do t√†i ch√≠nh, Cho ƒëi)\</code>

<b>üí∞ Thu nh·∫≠p:</b>
1. Th√™m th√¥ng tin Thu nh·∫≠p:
  \<code>n·ªôi dung + s·ªë ti·ªÅn\</code>

2. Th√™m th√¥ng tin Thu nh·∫≠p v√†o ng√†y/th√°ng/nƒÉm c·ª• th·ªÉ:
  \<code>n·ªôi dung + s·ªë ti·ªÅn + ng√†y/th√°ng/nƒÉm\</code>

3. Th√™m th√¥ng tin Thu nh·∫≠p v√†o ng√†y/th√°ng/nƒÉm c·ª• th·ªÉ v√† H≈© c·ª• th·ªÉ:
  \<code>n·ªôi dung + s·ªë ti·ªÅn + ng√†y/th√°ng/nƒÉm + h≈© (Chi ti√™u thi·∫øt y·∫øu, H∆∞·ªüng th·ª•, Ti·∫øt ki·ªám d√†i h·∫°n, Gi√°o d·ª•c, T·ª± do t√†i ch√≠nh, Cho ƒëi)\</code>

<b>üìÖ L·ªãch s·ª≠ Thu/Chi:</b>
1. L·ªãch s·ª≠ Thu/Chi h√¥m nay:
  \<code>/history today\</code>

2. L·ªãch s·ª≠ Thu/Chi ng√†y c·ª• th·ªÉ:
  \<code>/history d ng√†y/th√°ng/nƒÉm\</code>

3. L·ªãch s·ª≠ Thu/Chi trong tu·∫ßn:
  \<code>/history week\</code>

4. L·ªãch s·ª≠ Thu/Chi trong tu·∫ßn c·ª• th·ªÉ:
  \<code>/history w 1 (2, 3, 4)\</code>

5. L·ªãch s·ª≠ Thu/Chi th√°ng:
  \<code>/history month th√°ng/nƒÉm\</code>

6. L·ªãch s·ª≠ Thu/Chi nƒÉm:
  \<code>/history year nƒÉm\</code>

<b>üóëÔ∏è Clear:</b>
1. Xo√° Thu/Chi:
  \<code>/del\</code>
2. Xo√° t·∫•t c·∫£ chi ti√™u:
  \<code>/clearchitieu\</code>
3. Xo√° t·∫•t c·∫£ thu nh·∫≠p:
  \<code>/clearthunhap\</code>
`);
    } else {
      
      sendText(
        id_message,
        "Xin ch√†o " + userName + "! ƒê·ªÉ bi·∫øt th√™m chi ti·∫øt v·ªÅ c√°c l·ªánh, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh /help ho·∫∑c c≈©ng c√≥ th·ªÉ xem menu Money N√® t·∫°i ƒë√¢y."
      );
    }
  }
}



function addIncomeData(userId, date, content, amount, allocation, subCategory) {
  var sheet = getSheet(userId);
  subCategory = subCategory || "";
  
  var type = "ThuNhap";
  sheet.appendRow([date, content, amount, allocation, type, subCategory]);
}

function addExpenseData(userId, date, item, amount, allocation, subCategory) {
  var sheet = getSheet(userId);
  subCategory = subCategory || "";
  
  var type = "ChiTieu";
  sheet.appendRow([date, item, amount, allocation, type, subCategory]);
}

function getTotalIncome(userId) {
  var sheet = getSheet(userId);
  var data = sheet
    .getRange(2, 3, sheet.getLastRow() - 1, 1)
    .getValues();
  var total = 0;
  for (var i = 0; i < data.length; i++) {
    total += data[i][0];
  }
  return total;
}

function getTotalExpenses(userId) {
  var sheet = getSheet(userId);
  var data = sheet
    .getRange(2, 3, sheet.getLastRow() - 1, 1)
    .getValues();
  var total = 0;
  for (var i = 0; i < data.length; i++) {
    total += data[i][0];
  }
  return total;
}

function getCurrentBalance(userId) {
  var totalIncome = getTotalAmountByType(userId, "ThuNhap");
  var totalExpenses = getTotalAmountByType(userId, "ChiTieu");
  return totalIncome - totalExpenses;
}


function getTotalAllocationBalances(userId) {
  // (Using global allocations array)
  var balances = {};
  for (var i = 0; i < allocations.length; i++) {
    balances[allocations[i]] = 0;
  }
  var sheet = getSheet(userId);
  var data = sheet
    .getRange(2, 3, sheet.getLastRow() - 1, 3)
    .getValues();
  for (var i = 0; i < data.length; i++) {
    var allocation = data[i][1];
    var type = data[i][2];
    if (allocations.includes(allocation)) {
      if (type === "ThuNhap") {
        
        balances[allocation] += data[i][0];
      } else if (type === "ChiTieu") {
        
        balances[allocation] -= data[i][0];
      }
    }
  }
  return balances;
}

function sendTotalPhanboSummary(chatId, userId) {
  var allocations = getTotalAllocationBalances(userId);
  var message = "\nS·ªë ti·ªÅn ph√¢n b·ªï theo h≈©:\n";
  for (var allocation in allocations) {
    message += "- " + allocation + ": " + allocations[allocation].toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "\n";
  }
  var menuphanbo = {
    "inline_keyboard": [
      [
        {
          text: 'Xem T·ªïng Thu Nh·∫≠p',
          callback_data: 'totalthunhap'
        },
        {
          text: 'Xem T·ªïng Chi Ti√™u',
          callback_data: 'totalchi'
        }
      ]
    ]
  };
  sendText(chatId, message, menuphanbo);
}

function getTransactionHistory(userId, timeframe) {
  var sheet = getSheet(userId);
  var data = sheet
    .getDataRange()
    .getValues();
  var transactions = [];
  var currentDate = new Date();
  for (var i = 1; i < data.length; i++) {
    var transactionDate = new Date(data[i][0]);
    if (transactionDate >= timeframe.startDate && transactionDate < timeframe.endDate) {
      var transaction = {
        date: data[i][0],
        description: data[i][1],
        amount: data[i][2],
        allocation: data[i][3],
        type: data[i][4] 
      };
      transactions.push(transaction);
    }
  }
  return transactions;
}
function getOrCreateFolder(folderName) {
  // T√¨m th∆∞ m·ª•c theo t√™n
  var folders = DriveApp.getFoldersByName(folderName);
  
  if (folders.hasNext()) {
    // N·∫øu t√¨m th·∫•y th∆∞ m·ª•c, tr·∫£ v·ªÅ th∆∞ m·ª•c ƒë·∫ßu ti√™n
    Logger.log("T√¨m th·∫•y th∆∞ m·ª•c: " + folderName);
    return folders.next();
  } else {
    // N·∫øu ch∆∞a c√≥, t·∫°o th∆∞ m·ª•c m·ªõi
    Logger.log("T·∫°o th∆∞ m·ª•c m·ªõi: " + folderName);
    return DriveApp.createFolder(folderName);
  }
}

// H√†m debug ƒë·ªÉ ki·ªÉm tra th∆∞ m·ª•c v√† file
function debugFolderAndFiles() {
  Logger.log("=== DEBUG FOLDER AND FILES ===");
  
  // Ki·ªÉm tra th∆∞ m·ª•c Money Capybara
  var folders = DriveApp.getFoldersByName('Money Capybara');
  if (folders.hasNext()) {
    var folder = folders.next();
    Logger.log("Th∆∞ m·ª•c Money Capybara t·ªìn t·∫°i. ID: " + folder.getId());
    
    // Li·ªát k√™ file trong th∆∞ m·ª•c
    var files = folder.getFiles();
    var fileCount = 0;
    while (files.hasNext()) {
      var file = files.next();
      Logger.log("File trong th∆∞ m·ª•c: " + file.getName() + " (ID: " + file.getId() + ")");
      fileCount++;
    }
    Logger.log("T·ªïng s·ªë file trong th∆∞ m·ª•c: " + fileCount);
  } else {
    Logger.log("Th∆∞ m·ª•c Money Capybara kh√¥ng t·ªìn t·∫°i");
  }
  
  // Ki·ªÉm tra file Expense Tracker ·ªü th∆∞ m·ª•c g·ªëc
  var rootFiles = DriveApp.getRootFolder().getFilesByName('Expense Tracker');
  var rootFileCount = 0;
  while (rootFiles.hasNext()) {
    var file = rootFiles.next();
    Logger.log("File Expense Tracker ·ªü th∆∞ m·ª•c g·ªëc: " + file.getName());
    rootFileCount++;
  }
  Logger.log("S·ªë file Expense Tracker ·ªü th∆∞ m·ª•c g·ªëc: " + rootFileCount);
}

// H√†m test t·∫°o file m·ªõi ƒë·ªÉ ki·ªÉm tra logic th∆∞ m·ª•c
function testCreateFileInFolder() {
  Logger.log("=== TEST CREATE FILE IN FOLDER ===");
  
  try {
    // T·∫°o file test
    var testUserId = "TEST_USER_" + new Date().getTime();
    var newSpreadsheet = SpreadsheetApp.create('Test Expense Tracker for ' + testUserId);
    var sheetId = newSpreadsheet.getId();
    Logger.log("T·∫°o file test th√†nh c√¥ng. ID: " + sheetId);
    
    // L·∫•y th∆∞ m·ª•c Money Capybara
    var targetFolder = getOrCreateFolder('Money Capybara');
    Logger.log("L·∫•y/t·∫°o th∆∞ m·ª•c th√†nh c√¥ng. ID: " + targetFolder.getId());
    
    // Di chuy·ªÉn file v√†o th∆∞ m·ª•c
    var file = DriveApp.getFileById(sheetId);
    Logger.log("L·∫•y file th√†nh c√¥ng. T√™n: " + file.getName());
    
    // Th√™m file v√†o th∆∞ m·ª•c ƒë√≠ch
    targetFolder.addFile(file);
    Logger.log("Th√™m file v√†o th∆∞ m·ª•c th√†nh c√¥ng");
    
    // X√≥a file kh·ªèi th∆∞ m·ª•c g·ªëc
    var rootFolder = DriveApp.getRootFolder();
    rootFolder.removeFile(file);
    Logger.log("X√≥a file kh·ªèi th∆∞ m·ª•c g·ªëc th√†nh c√¥ng");
    
    Logger.log("TEST HO√ÄN TH√ÄNH - File test ƒë√£ ƒë∆∞·ª£c t·∫°o v√† di chuy·ªÉn v√†o th∆∞ m·ª•c Money Capybara");
    
    // Ch·∫°y debug ƒë·ªÉ ki·ªÉm tra k·∫øt qu·∫£
    debugFolderAndFiles();
    
  } catch (error) {
    Logger.log("L·ªñI trong qu√° tr√¨nh test: " + error.toString());
  }
}

// H√†m test t√≠nh nƒÉng subcategory
function testSubCategoryKeyboard() {
  Logger.log("=== TEST SUBCATEGORY KEYBOARD ===");
  
  // (Using global allocations array)

  var subCategories = {
    'Chi ti√™u thi·∫øt y·∫øu': ['Nh√† ·ªü', 'ƒÇn ngo√†i', 'H√≥a ƒë∆°n', 'ƒêi ch·ª£ si√™u th·ªã', 'Di chuy·ªÉn', 'S·ª©c kh·ªèe'],
    'H∆∞·ªüng th·ª•': ['Gi·∫£i tr√≠', 'Th·ª©c u·ªëng', 'Nh√† h√†ng', 'Mua s·∫Øm', 'ChƒÉm s√≥c b·∫£n th√¢n', 'Du l·ªãch', 'Th·ªÉ thao'],
    'Ti·∫øt ki·ªám d√†i h·∫°n': ['Mua s·∫Øm nh·ªØng m√≥n ƒë·ªì gi√° tr·ªã', 'Nh·ªØng k·ª≥ ngh·ªâ l·ªõn', 'C√°c m·ª•c ti√™u c√° nh√¢n kh√°c', 'Qu·ªπ d·ª± ph√≤ng kh·∫©n c·∫•p'],
    'Gi√°o d·ª•c': ['S√°ch', 'Kh√≥a h·ªçc', 'S·ª± ki·ªán'],
    'T·ª± do t√†i ch√≠nh': ['ƒê·∫ßu t∆∞', 'Kinh doanh', 'B·∫•t ƒë·ªông s·∫£n', 'G·ª≠i ti·∫øt ki·ªám sinh l·ªùi'],
    'Cho ƒëi': ['T·ª´ thi·ªán', 'Gi√∫p ƒë·ª° ng∆∞·ªùi th√¢n', 'Qu√† t·∫∑ng', 'ƒê√≥ng g√≥p cho c·ªông ƒë·ªìng']
  };
  
  function createSubCategoryKeyboard(allocation, isEdit) {
    if (!subCategories[allocation]) return null;
    
    var keyboard = [];
    var subs = subCategories[allocation];
    var prefix = isEdit ? 'edit_subcategory_' : 'subcategory_';
    
    for (var i = 0; i < subs.length; i += 2) {
      var row = [];
      row.push({
        text: subs[i],
        callback_data: prefix + allocation + '_' + subs[i]
      });
      
      if (i + 1 < subs.length) {
        row.push({
          text: subs[i + 1],
          callback_data: prefix + allocation + '_' + subs[i + 1]
        });
      }
      
      keyboard.push(row);
    }
    
    return {
      "inline_keyboard": keyboard
    };
  }
  
  // Test t·∫•t c·∫£ allocation
  for (var i = 0; i < allocations.length; i++) {
    var allocation = allocations[i];
    Logger.log("Testing keyboard for: " + allocation);
    var keyboard = createSubCategoryKeyboard(allocation, false);
    if (keyboard) {
      Logger.log("Keyboard created with " + keyboard.inline_keyboard.length + " rows");
      for (var j = 0; j < keyboard.inline_keyboard.length; j++) {
        var row = keyboard.inline_keyboard[j];
        Logger.log("Row " + (j+1) + ": " + row.map(function(btn) { return btn.text; }).join(", "));
      }
    }
    Logger.log("---");
  }
  
  Logger.log("TEST SUBCATEGORY KEYBOARD COMPLETED");
}

// Temp transaction cache functions (Global scope)
function saveTempTransaction(userId, transactionData) {
  var cache = CacheService.getScriptCache();
  cache.put('temp_transaction_' + userId, JSON.stringify(transactionData), 600); // 10 ph√∫t
}

function getTempTransaction(userId) {
  var cache = CacheService.getScriptCache();
  var data = cache.get('temp_transaction_' + userId);
  return data ? JSON.parse(data) : null;
}

function clearTempTransaction(userId) {
  var cache = CacheService.getScriptCache();
  cache.remove('temp_transaction_' + userId);
}

// Qu·∫£n l√Ω cache cho ch·ªânh s·ª≠a giao d·ªãch (Global functions)
function saveTransactionForEdit(userId, transactionInfo, transactionId) {
  var cache = CacheService.getScriptCache();
  var cacheKey = transactionId ? 'edit_transaction_' + transactionId : 'edit_transaction_' + userId;
  Logger.log("CACHE SAVE: Key=" + cacheKey + ", TransactionInfo=" + JSON.stringify(transactionInfo));
  cache.put(cacheKey, JSON.stringify(transactionInfo), 1800); // 30 ph√∫t
}

function getTransactionForEdit(userId, transactionId) {
  var cache = CacheService.getScriptCache();
  var cacheKey = transactionId ? 'edit_transaction_' + transactionId : 'edit_transaction_' + userId;
  var data = cache.get(cacheKey);
  Logger.log("CACHE GET: Key=" + cacheKey + ", Found=" + (data ? "YES" : "NO"));
  if (data) {
    Logger.log("CACHE GET: Data=" + data);
  }
  return data ? JSON.parse(data) : null;
}

function clearTransactionForEdit(userId, transactionId) {
  var cache = CacheService.getScriptCache();
  var cacheKey = transactionId ? 'edit_transaction_' + transactionId : 'edit_transaction_' + userId;
  Logger.log("CACHE CLEAR: Key=" + cacheKey);
  cache.remove(cacheKey);
}

function getLastRowIndex(userId) {
  var sheet = getSheet(userId);
  return sheet.getLastRow();
}

// C·∫≠p nh·∫≠t giao d·ªãch trong sheet
function updateTransactionInSheet(transactionInfo) {
  var sheet = getSheet(transactionInfo.userId);
  var rowIndex = transactionInfo.rowIndex;
  
  // C·∫≠p nh·∫≠t d·ªØ li·ªáu trong h√†ng
  sheet.getRange(rowIndex, 1, 1, 6).setValues([[
    transactionInfo.date,
    transactionInfo.description,
    transactionInfo.amount,
    transactionInfo.allocation,
    transactionInfo.type,
    transactionInfo.subCategory
  ]]);
}

// H√†m debug callback ƒë·ªÉ ki·ªÉm tra
function debugCallback(callbackData, userId) {
  Logger.log("=== DEBUG CALLBACK ===");
  Logger.log("Callback data: " + callbackData);
  Logger.log("User ID: " + userId);
  
  if (callbackData === 'edit_transaction') {
    var transactionInfo = getTransactionForEdit(userId);
    Logger.log("Transaction info from cache: " + JSON.stringify(transactionInfo));
    if (!transactionInfo) {
      Logger.log("ERROR: No transaction info found in cache!");
    }
  } else if (callbackData.startsWith('edit_allocation_')) {
    var allocation = callbackData.replace('edit_allocation_', '');
    Logger.log("Selected allocation: " + allocation);
    var transactionInfo = getTransactionForEdit(userId);
    Logger.log("Transaction info: " + JSON.stringify(transactionInfo));
  } else if (callbackData.startsWith('edit_subcategory_')) {
    var parts = callbackData.split('_');
    var allocation = parts[2];
    var subCategory = parts.slice(3).join('_');
    Logger.log("Selected allocation: " + allocation + ", subCategory: " + subCategory);
  }
  
  Logger.log("=== END DEBUG ===");
}

// H√†m test t√≠nh nƒÉng ch·ªânh s·ª≠a giao d·ªãch
function testEditTransactionFlow() {
  Logger.log("=== TEST EDIT TRANSACTION FLOW ===");
  
  // (Using global allocations array)

  // Test allocation keyboard
  Logger.log("Testing allocation keyboard:");
  // (Using global createAllocationKeyboard function)
  
  var allocationKeyboard = createAllocationKeyboard();
  Logger.log("Allocation keyboard created with " + allocationKeyboard.inline_keyboard.length + " rows");
  
  // Test edit subcategory keyboard
  Logger.log("Testing edit subcategory keyboards:");
  var subCategories = {
    'Chi ti√™u thi·∫øt y·∫øu': ['Nh√† ·ªü', 'ƒÇn ngo√†i', 'H√≥a ƒë∆°n', 'ƒêi ch·ª£ si√™u th·ªã', 'Di chuy·ªÉn', 'S·ª©c kh·ªèe'],
    'H∆∞·ªüng th·ª•': ['Gi·∫£i tr√≠', 'Th·ª©c u·ªëng', 'Nh√† h√†ng', 'Mua s·∫Øm', 'ChƒÉm s√≥c b·∫£n th√¢n', 'Du l·ªãch', 'Th·ªÉ thao']
  };
  
  function createSubCategoryKeyboard(allocation, isEdit) {
    if (!subCategories[allocation]) return null;
    var keyboard = [];
    var subs = subCategories[allocation];
    var prefix = isEdit ? 'edit_subcategory_' : 'subcategory_';
    for (var i = 0; i < subs.length; i += 2) {
      var row = [];
      row.push({
        text: subs[i],
        callback_data: prefix + allocation + '_' + subs[i]
      });
      if (i + 1 < subs.length) {
        row.push({
          text: subs[i + 1],
          callback_data: prefix + allocation + '_' + subs[i + 1]
        });
      }
      keyboard.push(row);
    }
    return {
      "inline_keyboard": keyboard
    };
  }
  
          var editKeyboard = createSubCategoryKeyboard('Chi ti√™u thi·∫øt y·∫øu', true, null, null);
  Logger.log("Edit keyboard for 'Chi ti√™u thi·∫øt y·∫øu':");
  for (var i = 0; i < editKeyboard.inline_keyboard.length; i++) {
    var row = editKeyboard.inline_keyboard[i];
    Logger.log("Row " + (i+1) + ": " + row.map(function(btn) { return btn.text + " (" + btn.callback_data + ")"; }).join(", "));
  }
  
  Logger.log("TEST EDIT TRANSACTION FLOW COMPLETED");
}

// H√†m test cache ƒë∆°n gi·∫£n  
function testEditCache() {
  Logger.log("=== SIMPLE CACHE TEST ===");
  
  var userId = "TEST_123";
  var testData = {
    userId: userId,
    description: "Test transaction",
    amount: 25000,
    allocation: "Chi ti√™u thi·∫øt y·∫øu",
    type: "ChiTieu",
    subCategory: "ƒÇn ngo√†i",
    rowIndex: 2
  };
  
  Logger.log("1. Saving transaction...");
  try {
    saveTransactionForEdit(userId, testData); // Backward compatibility - no transactionId
    Logger.log("‚úÖ Save successful");
  } catch (error) {
    Logger.log("‚ùå Save failed: " + error.toString());
    return;
  }
  
  Logger.log("2. Retrieving transaction...");
  try {
    var retrieved = getTransactionForEdit(userId);
    Logger.log("Retrieved: " + JSON.stringify(retrieved));
    
    if (retrieved && retrieved.description === testData.description) {
      Logger.log("‚úÖ Retrieve successful");
    } else {
      Logger.log("‚ùå Retrieve failed - data mismatch");
    }
  } catch (error) {
    Logger.log("‚ùå Retrieve failed: " + error.toString());
    return;
  }
  
  Logger.log("3. Clearing cache...");
  try {
    clearTransactionForEdit(userId); // Backward compatibility - no transactionId
    var afterClear = getTransactionForEdit(userId);
    if (!afterClear) {
      Logger.log("‚úÖ Clear successful");
    } else {
      Logger.log("‚ùå Clear failed - data still exists");
    }
  } catch (error) {
    Logger.log("‚ùå Clear failed: " + error.toString());
  }
  
  Logger.log("=== CACHE TEST COMPLETED ===");
}

// H√†m test keyboard creation
function testKeyboardCreation() {
  Logger.log("=== TEST KEYBOARD CREATION ===");
  
  // (Using global allocations array)

  // (Using global createAllocationKeyboard function)
  
  var keyboard = createAllocationKeyboard();
  Logger.log("Allocation keyboard created:");
  Logger.log(JSON.stringify(keyboard, null, 2));
  
  Logger.log("TEST KEYBOARD CREATION COMPLETED");
}

// H√†m test flow ch·ªânh s·ª≠a v·ªõi Transaction ID
function testEditFlowWithTransactionId() {
  Logger.log("=== TEST EDIT FLOW WITH TRANSACTION ID ===");
  
  var testUserId = "TEST_USER_456";
  var transactionId = 'tx_' + Date.now();
  
  // 1. T·∫°o transaction v·ªõi transactionId
  var testTransaction = {
    userId: testUserId,
    transactionId: transactionId,
    date: new Date(),
    description: "Test transaction",
    amount: 30000,
    allocation: "Chi ti√™u thi·∫øt y·∫øu",
    type: "ChiTieu",
    subCategory: "ƒÇn ngo√†i",
    rowIndex: 3
  };
  
  Logger.log("1. Saving transaction with ID: " + transactionId);
  saveTransactionForEdit(testUserId, testTransaction, transactionId);
  
  // 2. Test keyboard creation v·ªõi transactionId
  Logger.log("2. Creating allocation keyboard...");
  var allocationKeyboard = createAllocationKeyboard(transactionId);
  
  Logger.log("Allocation keyboard with transactionId:");
  for (var i = 0; i < allocationKeyboard.inline_keyboard.length; i++) {
    var row = allocationKeyboard.inline_keyboard[i];
    for (var j = 0; j < row.length; j++) {
      Logger.log("Button: " + row[j].text + " -> " + row[j].callback_data);
    }
  }
  
  // 3. Simulate ch·ªçn allocation
  Logger.log("3. Simulating allocation selection...");
  var mockAllocationCallback = 'edit_allocation_' + transactionId + '_H∆∞·ªüng th·ª•';
  Logger.log("Mock callback: " + mockAllocationCallback);
  
  // Parse nh∆∞ trong code th·ª±c
  var parts = mockAllocationCallback.split('_');
  var parsedTransactionId = null;
  var parsedAllocation = '';
  
  if (parts.length > 3 && parts[2] === 'tx') {
    parsedTransactionId = parts[2] + '_' + parts[3]; // T√°i t·∫°o 'tx_123456'
    parsedAllocation = parts.slice(4).join('_');
  }
  
  Logger.log("Parts array: " + JSON.stringify(parts));
  
  Logger.log("Parsed transactionId: " + parsedTransactionId);
  Logger.log("Parsed allocation: " + parsedAllocation);
  
  // 4. Test l·∫•y transaction t·ª´ cache
  var retrievedTransaction = getTransactionForEdit(testUserId, parsedTransactionId);
  Logger.log("Retrieved transaction: " + JSON.stringify(retrievedTransaction));
  
  if (retrievedTransaction && retrievedTransaction.transactionId === transactionId) {
    Logger.log("‚úÖ Transaction ID flow working correctly");
  } else {
    Logger.log("‚ùå Transaction ID flow failed");
  }
  
  Logger.log("=== TEST EDIT FLOW WITH TRANSACTION ID COMPLETED ===");
}

// Test scenario: T·∫°o A, t·∫°o B, ch·ªânh s·ª≠a A th√†nh c√¥ng, ch·ªânh s·ª≠a B b·ªã l·ªói
function testMultipleTransactionEditing() {
  Logger.log("=== TEST MULTIPLE TRANSACTION EDITING ===");
  
  var testUserId = "USER_MULTI_TEST";
  
  // 1. T·∫°o transaction A
  var transactionIdA = 'tx_' + (Date.now() - 1000); // A t·∫°o tr∆∞·ªõc 1 gi√¢y
  var transactionA = {
    userId: testUserId,
    transactionId: transactionIdA,
    date: new Date(),
    description: "Transaction A",
    amount: 25000,
    allocation: "Chi ti√™u thi·∫øt y·∫øu",
    type: "ChiTieu",
    subCategory: "ƒÇn ngo√†i",
    rowIndex: 2
  };
  
  Logger.log("1. Creating Transaction A with ID: " + transactionIdA);
  saveTransactionForEdit(testUserId, transactionA, transactionIdA);
  
  // 2. T·∫°o transaction B
  var transactionIdB = 'tx_' + Date.now(); // B t·∫°o sau
  var transactionB = {
    userId: testUserId,
    transactionId: transactionIdB,
    date: new Date(),
    description: "Transaction B",
    amount: 50000,
    allocation: "H∆∞·ªüng th·ª•",
    type: "ChiTieu",
    subCategory: "Gi·∫£i tr√≠",
    rowIndex: 3
  };
  
  Logger.log("2. Creating Transaction B with ID: " + transactionIdB);
  saveTransactionForEdit(testUserId, transactionB, transactionIdB);
  
  // 3. Ki·ªÉm tra c·∫£ 2 transactions ƒë·ªÅu t·ªìn t·∫°i
  Logger.log("3. Checking both transactions exist...");
  var checkA = getTransactionForEdit(testUserId, transactionIdA);
  var checkB = getTransactionForEdit(testUserId, transactionIdB);
  
  Logger.log("Transaction A exists: " + (checkA ? "YES" : "NO"));
  Logger.log("Transaction B exists: " + (checkB ? "YES" : "NO"));
  
  // 4. Simulate ch·ªânh s·ª≠a A th√†nh c√¥ng (update A)
  Logger.log("4. Simulating edit A success...");
  if (checkA) {
    checkA.allocation = "H∆∞·ªüng th·ª•";
    checkA.subCategory = "Mua s·∫Øm";
    saveTransactionForEdit(testUserId, checkA, checkA.transactionId);
    Logger.log("Transaction A updated successfully");
  }
  
  // 5. Ki·ªÉm tra l·∫°i sau khi update A
  Logger.log("5. Checking transactions after A update...");
  var checkA2 = getTransactionForEdit(testUserId, transactionIdA);
  var checkB2 = getTransactionForEdit(testUserId, transactionIdB);
  
  Logger.log("Transaction A after update: " + (checkA2 ? "YES" : "NO"));
  Logger.log("Transaction B after A update: " + (checkB2 ? "YES" : "NO"));
  
  if (checkB2) {
    Logger.log("‚úÖ Transaction B still exists after A update");
  } else {
    Logger.log("‚ùå Transaction B disappeared after A update");
  }
  
  // 6. Simulate ch·ªçn h≈© cho B (nh∆∞ user m√¥ t·∫£)
  Logger.log("6. Simulating edit B allocation selection...");
  var mockCallbackB = 'edit_allocation_' + transactionIdB + '_Ti·∫øt ki·ªám d√†i h·∫°n';
  Logger.log("Mock callback for B: " + mockCallbackB);
  
  // Parse callback B
  var partsB = mockCallbackB.split('_');
  var parsedTransactionIdB = null;
  var parsedAllocationB = '';
  
  if (partsB.length > 3 && partsB[2] === 'tx') {
    parsedTransactionIdB = partsB[2] + '_' + partsB[3];
    parsedAllocationB = partsB.slice(4).join('_');
  }
  
  Logger.log("Parsed B transactionId: " + parsedTransactionIdB);
  Logger.log("Parsed B allocation: " + parsedAllocationB);
  
  // Try to get transaction B
  var finalCheckB = getTransactionForEdit(testUserId, parsedTransactionIdB);
  
  if (finalCheckB) {
    Logger.log("‚úÖ Transaction B can be edited successfully");
  } else {
    Logger.log("‚ùå Transaction B cannot be found for editing");
  }
  
  Logger.log("=== TEST MULTIPLE TRANSACTION EDITING COMPLETED ===");
}

// Test function ƒë·ªÉ ki·ªÉm tra deployment
function testDeployment() {
  Logger.log("=== TEST DEPLOYMENT ===");
  
  try {
    // Test c√°c function c∆° b·∫£n
    Logger.log("1. Testing createAllocationKeyboard...");
    var keyboard = createAllocationKeyboard("tx_test123");
    Logger.log("Keyboard created: " + JSON.stringify(keyboard));
    
    Logger.log("2. Testing cache functions...");
    var testTransaction = {
      userId: "test",
      transactionId: "tx_test123",
      description: "test",
      amount: 1000
    };
    saveTransactionForEdit("test", testTransaction, "tx_test123");
    var retrieved = getTransactionForEdit("test", "tx_test123");
    Logger.log("Cache test: " + (retrieved ? "SUCCESS" : "FAILED"));
    
    Logger.log("3. Testing parsing logic...");
    var testCallback = "edit_allocation_tx_123_H∆∞·ªüng th·ª•";
    var parts = testCallback.split('_');
    var transactionId = null;
    var allocation = '';
    
    if (parts.length > 3 && parts[2] === 'tx') {
      transactionId = parts[2] + '_' + parts[3];
      allocation = parts.slice(4).join('_');
    }
    
    Logger.log("Parsed ID: " + transactionId + ", Allocation: " + allocation);
    
    Logger.log("‚úÖ Deployment test completed successfully");
    
  } catch (error) {
    Logger.log("‚ùå Deployment test failed: " + error.toString());
  }
  
  Logger.log("=== TEST DEPLOYMENT COMPLETED ===");
}

// Test ch√≠nh x√°c scenario user m√¥ t·∫£
function testUserScenario() {
  Logger.log("=== TEST USER SCENARIO ===");
  
  var userId = "USER_SCENARIO_TEST";
  
  // 1. T·∫°o transaction A (a - 3)
  Logger.log("1. Creating transaction A (a - 3)...");
  var transactionIdA = 'tx_' + (Date.now() - 5000); // A t·∫°o tr∆∞·ªõc 5 gi√¢y
  var transactionA = {
    userId: userId,
    transactionId: transactionIdA,
    date: new Date(),
    description: "a",
    amount: 3000,
    allocation: "Chi ti√™u thi·∫øt y·∫øu",
    type: "ChiTieu",
    subCategory: "Nh√† ·ªü",
    rowIndex: 2
  };
  saveTransactionForEdit(userId, transactionA, transactionIdA);
  Logger.log("Transaction A saved with ID: " + transactionIdA);
  
  // 2. T·∫°o transaction B (b - 4)  
  Logger.log("2. Creating transaction B (b - 4)...");
  var transactionIdB = 'tx_' + Date.now(); // B t·∫°o sau
  var transactionB = {
    userId: userId,
    transactionId: transactionIdB,
    date: new Date(),
    description: "b",
    amount: 4000,
    allocation: "Chi ti√™u thi·∫øt y·∫øu",
    type: "ChiTieu", 
    subCategory: "ƒÇn ngo√†i",
    rowIndex: 3
  };
  saveTransactionForEdit(userId, transactionB, transactionIdB);
  Logger.log("Transaction B saved with ID: " + transactionIdB);
  
  // 3. Ki·ªÉm tra c·∫£ 2 transactions
  Logger.log("3. Checking both transactions exist...");
  var checkA1 = getTransactionForEdit(userId, transactionIdA);
  var checkB1 = getTransactionForEdit(userId, transactionIdB);
  
  Logger.log("Transaction A exists: " + (checkA1 ? "YES - " + checkA1.description : "NO"));
  Logger.log("Transaction B exists: " + (checkB1 ? "YES - " + checkB1.description : "NO"));
  
  // 4. User nh·∫•n [‚úèÔ∏è Ch·ªânh s·ª≠a A] - t·∫°o allocation keyboard
  Logger.log("4. User clicks Edit A - creating allocation keyboard...");
  if (checkA1) {
    var keyboardA = createAllocationKeyboard(checkA1.transactionId);
    Logger.log("Allocation keyboard created for A");
    Logger.log("Sample button: " + JSON.stringify(keyboardA.inline_keyboard[0][0]));
  }
  
  // 5. User ch·ªçn h≈© m·ªõi cho A (simulate callback)
  Logger.log("5. User selects new allocation for A...");
  var callbackA = 'edit_allocation_' + transactionIdA + '_H∆∞·ªüng th·ª•';
  Logger.log("Callback data: " + callbackA);
  
  // Parse callback nh∆∞ trong code th·ª±c
  var parts = callbackA.split('_');
  var parsedTransactionId = null;
  var parsedAllocation = '';
  
  if (parts.length > 3 && parts[2] === 'tx') {
    parsedTransactionId = parts[2] + '_' + parts[3];
    parsedAllocation = parts.slice(4).join('_');
  }
  
  Logger.log("Parsed transactionId: " + parsedTransactionId);
  Logger.log("Parsed allocation: " + parsedAllocation);
  
  // 6. Th·ª≠ l·∫•y transaction A ƒë·ªÉ update
  Logger.log("6. Retrieving transaction A for update...");
  var transactionForUpdate = getTransactionForEdit(userId, parsedTransactionId);
  
  if (transactionForUpdate) {
    Logger.log("‚úÖ Transaction A found for update: " + transactionForUpdate.description);
    Logger.log("Transaction A details: " + JSON.stringify(transactionForUpdate));
  } else {
    Logger.log("‚ùå Transaction A NOT FOUND for update");
    
    // Debug: Ki·ªÉm tra c√≥ cache n√†o cho user n√†y kh√¥ng
    Logger.log("Debugging cache keys...");
    
    // Th·ª≠ c√°c cache key kh√°c nhau
    var fallbackCheck = getTransactionForEdit(userId); // Kh√¥ng c√≥ transactionId
    Logger.log("Fallback check (no ID): " + (fallbackCheck ? fallbackCheck.description : "NO"));
    
    var directCheckA = getTransactionForEdit(userId, transactionIdA);
    Logger.log("Direct check A: " + (directCheckA ? directCheckA.description : "NO"));
    
    var directCheckB = getTransactionForEdit(userId, transactionIdB);
    Logger.log("Direct check B: " + (directCheckB ? directCheckB.description : "NO"));
  }
  
  Logger.log("=== TEST USER SCENARIO COMPLETED ===");
}

// Test to√†n b·ªô edit allocation flow
function testFullEditAllocationFlow() {
  Logger.log("=== TEST FULL EDIT ALLOCATION FLOW ===");
  
  var userId = "USER_EDIT_FLOW_TEST";
  var transactionId = 'tx_' + Date.now();
  
  // 1. T·∫°o transaction
  var transaction = {
    userId: userId,
    transactionId: transactionId,
    date: new Date(),
    description: "test transaction",
    amount: 5000,
    allocation: "Chi ti√™u thi·∫øt y·∫øu",
    type: "ChiTieu",
    subCategory: "Nh√† ·ªü",
    rowIndex: 5
  };
  
  Logger.log("1. Saving transaction: " + transactionId);
  saveTransactionForEdit(userId, transaction, transactionId);
  
  // 2. Simulate edit_allocation callback
  var callbackData = 'edit_allocation_' + transactionId + '_H∆∞·ªüng th·ª•';
  Logger.log("2. Simulating callback: " + callbackData);
  
  try {
    // Parse nh∆∞ trong doPost
    var parts = callbackData.split('_');
    var parsedTransactionId = null;
    var parsedAllocation = '';
    
    if (parts.length > 3 && parts[2] === 'tx') {
      parsedTransactionId = parts[2] + '_' + parts[3];
      parsedAllocation = parts.slice(4).join('_');
    }
    
    Logger.log("Parsed transactionId: " + parsedTransactionId);
    Logger.log("Parsed allocation: " + parsedAllocation);
    
    // 3. Get transaction nh∆∞ trong doPost
    var transactionInfo = null;
    if (parsedTransactionId) {
      transactionInfo = getTransactionForEdit(userId, parsedTransactionId);
    }
    
    if (transactionInfo) {
      Logger.log("3. Transaction found for edit");
      
      // 4. Update allocation nh∆∞ trong doPost
      transactionInfo.allocation = parsedAllocation;
      saveTransactionForEdit(userId, transactionInfo, transactionInfo.transactionId);
      Logger.log("4. Allocation updated to: " + parsedAllocation);
      
      // 5. Test t·∫°o subcategory keyboard
      try {
        var keyboard = createSubCategoryKeyboard(parsedAllocation, true, transactionInfo.transactionId);
        Logger.log("5. Subcategory keyboard created successfully");
        Logger.log("Sample button: " + JSON.stringify(keyboard.inline_keyboard[0][0]));
        
      } catch (keyboardError) {
        Logger.log("‚ùå Subcategory keyboard failed: " + keyboardError.toString());
      }
      
      // 6. Test updateTransactionInSheet (mock)
      try {
        Logger.log("6. Testing updateTransactionInSheet...");
        // updateTransactionInSheet(transactionInfo); // Kh√¥ng ch·∫°y th·ª±c ƒë·ªÉ tr√°nh l·ªói sheet
        Logger.log("6. updateTransactionInSheet would be called here");
        
      } catch (updateError) {
        Logger.log("‚ùå updateTransactionInSheet failed: " + updateError.toString());
      }
      
      Logger.log("‚úÖ Full edit allocation flow completed successfully");
      
    } else {
      Logger.log("‚ùå Transaction not found for edit");
    }
    
  } catch (error) {
    Logger.log("‚ùå Edit allocation flow failed: " + error.toString());
    Logger.log("Error stack: " + error.stack);
  }
  
  Logger.log("=== TEST FULL EDIT ALLOCATION FLOW COMPLETED ===");
}

// Test t·ª´ng h≈© ƒë·ªÉ t√¨m ra c√°i n√†o g√¢y l·ªói
function testEachAllocation() {
  Logger.log("=== TEST EACH ALLOCATION ===");
  
  var testUserId = "TEST_ALLOCATION_USER";
  var baseTransactionId = 'tx_' + Date.now();
  
  // Test t·ª´ng h≈©
  for (var i = 0; i < allocations.length; i++) {
    var allocation = allocations[i];
    var transactionId = baseTransactionId + '_' + i;
    
    Logger.log("Testing allocation " + (i+1) + ": " + allocation);
    
    try {
      // 1. T·∫°o callback data
      var callbackData = 'edit_allocation_' + transactionId + '_' + allocation;
      Logger.log("  Callback data: " + callbackData);
      Logger.log("  Callback length: " + callbackData.length + " chars");
      Logger.log("  Callback bytes: " + encodeURIComponent(callbackData).length + " bytes");
      
      // 2. Test parsing
      var parts = callbackData.split('_');
      Logger.log("  Split parts: " + JSON.stringify(parts));
      
      var parsedTransactionId = null;
      var parsedAllocation = '';
      
      if (parts.length > 3 && parts[2] === 'tx') {
        parsedTransactionId = parts[2] + '_' + parts[3];
        parsedAllocation = parts.slice(4).join('_');
      }
      
      Logger.log("  Parsed transactionId: " + parsedTransactionId);
      Logger.log("  Parsed allocation: " + parsedAllocation);
      
      // 3. Ki·ªÉm tra match
      if (parsedAllocation === allocation) {
        Logger.log("  ‚úÖ " + allocation + " - PARSING OK");
      } else {
        Logger.log("  ‚ùå " + allocation + " - PARSING FAILED");
        Logger.log("    Expected: '" + allocation + "'");
        Logger.log("    Got: '" + parsedAllocation + "'");
      }
      
      // 4. Test t·∫°o subcategory keyboard  
      try {
        var keyboard = createSubCategoryKeyboard(allocation, true, transactionId);
        if (keyboard && keyboard.inline_keyboard) {
          Logger.log("  ‚úÖ " + allocation + " - SUBCATEGORY KEYBOARD OK");
          
          // Test sample subcategory callback
          var firstButton = keyboard.inline_keyboard[0][0];
          var subCallbackData = firstButton.callback_data;
          Logger.log("    Sample subcategory callback: " + subCallbackData);
          Logger.log("    Subcategory callback length: " + subCallbackData.length + " chars");
          Logger.log("    Subcategory callback bytes: " + encodeURIComponent(subCallbackData).length + " bytes");
          
          if (encodeURIComponent(subCallbackData).length > 64) {
            Logger.log("    ‚ö†Ô∏è SUBCATEGORY CALLBACK TOO LONG!");
          }
          
        } else {
          Logger.log("  ‚ùå " + allocation + " - SUBCATEGORY KEYBOARD FAILED");
        }
      } catch (keyboardError) {
        Logger.log("  ‚ùå " + allocation + " - SUBCATEGORY KEYBOARD ERROR: " + keyboardError.toString());
      }
      
      // 5. Ki·ªÉm tra callback data length
      if (encodeURIComponent(callbackData).length > 64) {
        Logger.log("  ‚ö†Ô∏è " + allocation + " - CALLBACK TOO LONG (>64 bytes)");
      }
      
    } catch (error) {
      Logger.log("  ‚ùå " + allocation + " - ERROR: " + error.toString());
    }
    
    Logger.log(""); // D√≤ng tr·ªëng
  }
  
  Logger.log("=== TEST EACH ALLOCATION COMPLETED ===");
}

// Test format m·ªõi ng·∫Øn
function testShortCallbackFormat() {
  Logger.log("=== TEST SHORT CALLBACK FORMAT ===");
  
  var testUserId = "USER_SHORT_TEST";
  var transactionId = 'tx_' + Date.now();
  
  Logger.log("Testing new short format with transactionId: " + transactionId);
  
  // Test t·ª´ng h≈© v·ªõi format m·ªõi
  for (var i = 0; i < allocations.length; i++) {
    var allocation = allocations[i];
    Logger.log("Testing allocation " + i + ": " + allocation);
    
    try {
      // 1. Test allocation keyboard (format m·ªõi ng·∫Øn cho EDIT)
      var editAllocationKeyboard = createAllocationKeyboard(transactionId);
      var editAllocationButton = editAllocationKeyboard.inline_keyboard[Math.floor(i/2)][i%2];
      
      Logger.log("  Edit allocation callback: " + editAllocationButton.callback_data);
      Logger.log("  Edit allocation callback length: " + editAllocationButton.callback_data.length + " chars");
      Logger.log("  Edit allocation callback bytes: " + encodeURIComponent(editAllocationButton.callback_data).length + " bytes");
      
      // 1b. Test allocation keyboard (format m·ªõi cho TRANSACTION M·ªöI)
      var newAllocationKeyboard = createAllocationKeyboard(null);
      var newAllocationButton = newAllocationKeyboard.inline_keyboard[Math.floor(i/2)][i%2];
      
      Logger.log("  New allocation callback: " + newAllocationButton.callback_data);
      Logger.log("  New allocation callback length: " + newAllocationButton.callback_data.length + " chars");
      Logger.log("  New allocation callback bytes: " + encodeURIComponent(newAllocationButton.callback_data).length + " bytes");
      
      // 2. Test subcategory keyboard (format m·ªõi ng·∫Øn)
      var subKeyboard = createSubCategoryKeyboard(allocation, true, transactionId, i);
      if (subKeyboard && subKeyboard.inline_keyboard && subKeyboard.inline_keyboard[0]) {
        var subButton = subKeyboard.inline_keyboard[0][0];
        
        Logger.log("  Subcategory callback: " + subButton.callback_data);
        Logger.log("  Subcategory callback length: " + subButton.callback_data.length + " chars");
        Logger.log("  Subcategory callback bytes: " + encodeURIComponent(subButton.callback_data).length + " bytes");
        
        // 3. Test parsing EDIT allocation callback
        var editAllocParts = editAllocationButton.callback_data.split('_');
        if (editAllocParts.length >= 4 && editAllocParts[2] === 'tx') {
          var parsedTransactionId = editAllocParts[2] + '_' + editAllocParts[3];
          var parsedAllocIndex = parseInt(editAllocParts[4]);
          var parsedAllocation = allocations[parsedAllocIndex];
          
          if (parsedAllocation === allocation) {
            Logger.log("  ‚úÖ Edit allocation parsing OK: " + parsedAllocation);
          } else {
            Logger.log("  ‚ùå Edit allocation parsing FAILED: Expected " + allocation + ", got " + parsedAllocation);
          }
        }
        
        // 3b. Test parsing NEW allocation callback
        var newAllocParts = newAllocationButton.callback_data.split('_');
        if (newAllocParts.length >= 2 && newAllocParts[0] === 'allocation') {
          var newParsedAllocIndex = parseInt(newAllocParts[1]);
          var newParsedAllocation = allocations[newParsedAllocIndex];
          
          if (newParsedAllocation === allocation) {
            Logger.log("  ‚úÖ New allocation parsing OK: " + newParsedAllocation);
          } else {
            Logger.log("  ‚ùå New allocation parsing FAILED: Expected " + allocation + ", got " + newParsedAllocation);
          }
        }
        
        // 4. Test parsing subcategory callback
        var subParts = subButton.callback_data.split('_');
        if (subParts.length >= 6 && subParts[2] === 'tx') {
          var subParsedTransactionId = subParts[2] + '_' + subParts[3];
          var subParsedAllocIndex = parseInt(subParts[4]);
          var subParsedSubIndex = parseInt(subParts[5]);
          var subParsedAllocation = allocations[subParsedAllocIndex];
          var subParsedSubCategory = subCategories[subParsedAllocation][subParsedSubIndex];
          
          if (subParsedAllocation === allocation) {
            Logger.log("  ‚úÖ Subcategory allocation parsing OK: " + subParsedAllocation);
            Logger.log("  ‚úÖ Subcategory parsing OK: " + subParsedSubCategory);
          } else {
            Logger.log("  ‚ùå Subcategory parsing FAILED");
          }
        }
        
        // 5. Check callback length
        var editAllocLength = encodeURIComponent(editAllocationButton.callback_data).length;
        var newAllocLength = encodeURIComponent(newAllocationButton.callback_data).length;
        var subLength = encodeURIComponent(subButton.callback_data).length;
        
        if (editAllocLength <= 64 && newAllocLength <= 64 && subLength <= 64) {
          Logger.log("  ‚úÖ " + allocation + " - ALL CALLBACKS WITHIN LIMIT");
        } else {
          Logger.log("  ‚ö†Ô∏è " + allocation + " - SOME CALLBACKS TOO LONG");
          if (editAllocLength > 64) Logger.log("    Edit allocation too long: " + editAllocLength + " bytes");
          if (newAllocLength > 64) Logger.log("    New allocation too long: " + newAllocLength + " bytes");  
          if (subLength > 64) Logger.log("    Subcategory too long: " + subLength + " bytes");
        }
        
      } else {
        Logger.log("  ‚ùå Failed to create subcategory keyboard");
      }
      
    } catch (error) {
      Logger.log("  ‚ùå Error testing " + allocation + ": " + error.toString());
    }
    
    Logger.log(""); // D√≤ng tr·ªëng
  }
  
  Logger.log("=== TEST SHORT CALLBACK FORMAT COMPLETED ===");
}

// Test n√∫t "Quay l·∫°i"
function testBackButton() {
  Logger.log("=== TEST BACK BUTTON ===");
  
  var testUserId = "USER_BACK_TEST";
  var transactionId = 'tx_' + Date.now();
  
  Logger.log("Testing back button functionality");
  
  try {
    // 1. Test subcategory keyboard c√≥ n√∫t "Quay l·∫°i" (transaction m·ªõi)
    Logger.log("1. Testing back button for new transaction:");
    var newTransKeyboard = createSubCategoryKeyboard('Chi ti√™u thi·∫øt y·∫øu', false, null, null);
    if (newTransKeyboard && newTransKeyboard.inline_keyboard) {
      var lastRow = newTransKeyboard.inline_keyboard[newTransKeyboard.inline_keyboard.length - 1];
      var backButton = lastRow[0];
      
      Logger.log("  Back button text: " + backButton.text);
      Logger.log("  Back button callback: " + backButton.callback_data);
      
      if (backButton.callback_data === 'back_to_allocation') {
        Logger.log("  ‚úÖ New transaction back button OK");
      } else {
        Logger.log("  ‚ùå New transaction back button FAILED");
      }
    }
    
    // 2. Test subcategory keyboard c√≥ n√∫t "Quay l·∫°i" (edit mode)
    Logger.log("\n2. Testing back button for edit transaction:");
    var editKeyboard = createSubCategoryKeyboard('Chi ti√™u thi·∫øt y·∫øu', true, transactionId, 0);
    if (editKeyboard && editKeyboard.inline_keyboard) {
      var lastRow = editKeyboard.inline_keyboard[editKeyboard.inline_keyboard.length - 1]; 
      var backButton = lastRow[0];
      
      Logger.log("  Back button text: " + backButton.text);
      Logger.log("  Back button callback: " + backButton.callback_data);
      
      if (backButton.callback_data === 'edit_transaction_' + transactionId) {
        Logger.log("  ‚úÖ Edit transaction back button OK");
      } else {
        Logger.log("  ‚ùå Edit transaction back button FAILED");
      }
    }
    
    // 3. Test callback length cho n√∫t "Quay l·∫°i"
    Logger.log("\n3. Testing back button callback length:");
    var shortCallback = 'back_to_allocation';
    var longCallback = 'edit_transaction_' + transactionId;
    
    Logger.log("  Short callback: " + shortCallback + " (" + shortCallback.length + " chars, " + encodeURIComponent(shortCallback).length + " bytes)");
    Logger.log("  Long callback: " + longCallback + " (" + longCallback.length + " chars, " + encodeURIComponent(longCallback).length + " bytes)");
    
    if (encodeURIComponent(shortCallback).length <= 64 && encodeURIComponent(longCallback).length <= 64) {
      Logger.log("  ‚úÖ All back button callbacks within limit");
    } else {
      Logger.log("  ‚ö†Ô∏è Some back button callbacks too long");
    }
    
    Logger.log("  ‚úÖ Back button test completed successfully");
    
  } catch (error) {
    Logger.log("  ‚ùå Error testing back button: " + error.toString());
  }
  
  Logger.log("=== TEST BACK BUTTON COMPLETED ===");
}

// Test lu·ªìng quay l·∫°i cho transaction m·ªõi
function testNewTransactionBackFlow() {
  Logger.log("=== TEST NEW TRANSACTION BACK FLOW ===");
  
  var testUserId = "USER_NEW_BACK_TEST";
  var testChatId = 123456789;
  
  try {
    // 1. Simulate ng∆∞·ªùi d√πng nh·∫≠p "ƒÉn tr∆∞a - 30000"
    Logger.log("1. Simulate input: 'ƒÉn tr∆∞a - 30000'");
    
    var description = "ƒÉn tr∆∞a";
    var amount = 30000;
    var type = "expense";
    var defaultAllocation = "Chi ti√™u thi·∫øt y·∫øu"; // Default allocation
    
    // 2. Test l∆∞u temp transaction
    Logger.log("2. Testing saveTempTransaction");
    var tempTransaction = {
      description: description,
      amount: amount,
      type: type,
      allocation: defaultAllocation
    };
    
    saveTempTransaction(testChatId, tempTransaction);
    Logger.log("  Saved temp transaction: " + JSON.stringify(tempTransaction));
    
    // 3. Test l·∫•y temp transaction
    Logger.log("3. Testing getTempTransaction");
    var retrievedTemp = getTempTransaction(testChatId);
    Logger.log("  Retrieved temp transaction: " + JSON.stringify(retrievedTemp));
    
    if (retrievedTemp && retrievedTemp.description === description) {
      Logger.log("  ‚úÖ Temp transaction save/retrieve OK");
    } else {
      Logger.log("  ‚ùå Temp transaction save/retrieve FAILED");
    }
    
    // 4. Test t·∫°o subcategory keyboard v·ªõi n√∫t quay l·∫°i
    Logger.log("4. Testing subcategory keyboard with back button");
    var subKeyboard = createSubCategoryKeyboard(defaultAllocation, false, null, null);
    
    if (subKeyboard && subKeyboard.inline_keyboard) {
      var lastRow = subKeyboard.inline_keyboard[subKeyboard.inline_keyboard.length - 1];
      var backButton = lastRow[0];
      
      Logger.log("  Back button text: " + backButton.text);
      Logger.log("  Back button callback: " + backButton.callback_data);
      
      if (backButton.callback_data === 'back_to_allocation') {
        Logger.log("  ‚úÖ Back button in subcategory keyboard OK");
      } else {
        Logger.log("  ‚ùå Back button in subcategory keyboard FAILED");
      }
    }
    
    // 5. Test allocation keyboard cho transaction m·ªõi
    Logger.log("5. Testing allocation keyboard for new transaction");
    var allocKeyboard = createAllocationKeyboard(null);
    
    if (allocKeyboard && allocKeyboard.inline_keyboard) {
      Logger.log("  Allocation keyboard created successfully");
      Logger.log("  Number of rows: " + allocKeyboard.inline_keyboard.length);
      
      // Log first few buttons
      for (var i = 0; i < Math.min(2, allocKeyboard.inline_keyboard.length); i++) {
        var row = allocKeyboard.inline_keyboard[i];
        for (var j = 0; j < row.length; j++) {
          Logger.log("    Button: " + row[j].text + " -> " + row[j].callback_data);
        }
      }
      Logger.log("  ‚úÖ Allocation keyboard for new transaction OK");
    } else {
      Logger.log("  ‚ùå Allocation keyboard for new transaction FAILED");
    }
    
    // 6. Test callback format cho allocation buttons
    Logger.log("6. Testing allocation callback format");
    if (allocKeyboard && allocKeyboard.inline_keyboard && allocKeyboard.inline_keyboard[0]) {
      var firstButton = allocKeyboard.inline_keyboard[0][0];
      var callbackData = firstButton.callback_data;
      
      Logger.log("  First allocation callback: " + callbackData);
      
      // Check if callback starts with expected format for new transactions
      if (callbackData.startsWith('allocation_')) {
        Logger.log("  ‚úÖ New transaction callback format correct: " + callbackData);
      } else {
        Logger.log("  ‚ùå WARNING: New transaction using wrong format: " + callbackData);
        Logger.log("  Expected format should be 'allocation_X' for new transactions");
      }
    }
    
    // Cleanup
    clearTempTransaction(testChatId);
    Logger.log("7. Cleaned up temp transaction");
    
    Logger.log("  ‚úÖ New transaction back flow test completed");
    
  } catch (error) {
    Logger.log("  ‚ùå Error in new transaction back flow test: " + error.toString());
  }
  
  Logger.log("=== TEST NEW TRANSACTION BACK FLOW COMPLETED ===");
}

// Test debug callback "back_to_allocation"
function debugBackToAllocation() {
  Logger.log("=== DEBUG BACK TO ALLOCATION ===");
  
  var testUserId = "USER_DEBUG_BACK";
  var testChatId = 123456789;
  
  try {
    // 1. T·∫°o temp transaction gi·ªëng flow th·ª±c t·∫ø
    Logger.log("1. Creating temp transaction nh∆∞ flow th·ª±c t·∫ø");
    var tempTransaction = {
      description: "c",
      amount: 9000,
      type: "expense", 
      allocation: "Chi ti√™u thi·∫øt y·∫øu"
    };
    
    saveTempTransaction(testChatId, tempTransaction);
    Logger.log("  Saved temp transaction: " + JSON.stringify(tempTransaction));
    
    // 2. Test l·∫•y temp transaction
    var retrieved = getTempTransaction(testChatId);
    Logger.log("  Retrieved temp transaction: " + JSON.stringify(retrieved));
    
    if (retrieved) {
      Logger.log("  ‚úÖ Temp transaction exists in cache");
    } else {
      Logger.log("  ‚ùå Temp transaction NOT found in cache");
    }
    
    // 3. Test t·∫°o allocation keyboard 
    Logger.log("3. Testing allocation keyboard creation");
    var allocKeyboard = createAllocationKeyboard(null);
    
    if (allocKeyboard && allocKeyboard.inline_keyboard) {
      Logger.log("  ‚úÖ Allocation keyboard created successfully");
      Logger.log("  Number of buttons: " + allocKeyboard.inline_keyboard.length);
      
      // Log first row buttons
      var firstRow = allocKeyboard.inline_keyboard[0];
      for (var i = 0; i < firstRow.length; i++) {
        Logger.log("    Button " + i + ": " + firstRow[i].text + " -> " + firstRow[i].callback_data);
      }
    } else {
      Logger.log("  ‚ùå Failed to create allocation keyboard");
    }
    
    // 4. Test t·∫°o message text
    Logger.log("4. Testing message text creation");
    var messageText = (retrieved.type === 'ThuNhap' ? 'Thu nh·∫≠p: ' : 'Chi ti√™u: ') + 
      retrieved.description + " " + 
      formatNumberWithSeparator(retrieved.amount) + 
      "\nCh·ªçn h≈© chi ti√™u:";
    
    Logger.log("  Message text: " + messageText);
    
    // 5. Test callback data format trong subcategory keyboard
    Logger.log("5. Testing back button in subcategory keyboard");
    var subKeyboard = createSubCategoryKeyboard("Chi ti√™u thi·∫øt y·∫øu", false, null, null);
    
    if (subKeyboard && subKeyboard.inline_keyboard) {
      var lastRow = subKeyboard.inline_keyboard[subKeyboard.inline_keyboard.length - 1];
      var backButton = lastRow[0];
      
      Logger.log("  Back button text: " + backButton.text);
      Logger.log("  Back button callback: " + backButton.callback_data);
      
      if (backButton.callback_data === 'back_to_allocation') {
        Logger.log("  ‚úÖ Back button callback format correct");
      } else {
        Logger.log("  ‚ùå Back button callback format wrong: " + backButton.callback_data);
      }
    }
    
    // Cleanup
    clearTempTransaction(testChatId);
    Logger.log("6. Cleaned up temp transaction");
    
  } catch (error) {
    Logger.log("  ‚ùå Error in back to allocation debug: " + error.toString());
  }
  
  Logger.log("=== DEBUG BACK TO ALLOCATION COMPLETED ===");
}

// Test x·ª≠ l√Ω callback back_to_allocation
function simulateBackToAllocationCallback() {
  Logger.log("=== SIMULATE BACK TO ALLOCATION CALLBACK ===");
  
  var testUserId = "USER_SIMULATE_BACK";
  var testChatId = 123456789;
  
  try {
    // 1. Setup temp transaction
    var tempTransaction = {
      description: "c",
      amount: 9000,
      type: "expense",
      allocation: "Chi ti√™u thi·∫øt y·∫øu"
    };
    
    saveTempTransaction(testChatId, tempTransaction);
    Logger.log("1. Setup temp transaction: " + JSON.stringify(tempTransaction));
    
    // 2. Simulate callback processing logic
    Logger.log("2. Simulating back_to_allocation callback processing");
    var data = 'back_to_allocation';
    
    if (data === 'back_to_allocation') {
      Logger.log("  ‚úÖ Callback matches 'back_to_allocation'");
      
      // L·∫•y th√¥ng tin transaction t·∫°m t·ª´ cache
      var retrievedTemp = getTempTransaction(testChatId);
      Logger.log("  Retrieved temp transaction: " + JSON.stringify(retrievedTemp));
      
      if (retrievedTemp) {
        Logger.log("  ‚úÖ Temp transaction found");
        
        // T·∫°o keyboard ch·ªçn h≈©
        var keyboard = createAllocationKeyboard(null);
        Logger.log("  ‚úÖ Allocation keyboard created");
        
        // T·∫°o message text
        var messageText = (retrievedTemp.type === 'ThuNhap' ? 'Thu nh·∫≠p: ' : 'Chi ti√™u: ') + 
          retrievedTemp.description + " " + 
          formatNumberWithSeparator(retrievedTemp.amount) + 
          "\nCh·ªçn h≈© chi ti√™u:";
        
        Logger.log("  Message would be: " + messageText);
        Logger.log("  ‚úÖ Back to allocation flow completed successfully");
        
      } else {
        Logger.log("  ‚ùå No temp transaction found");
      }
    } else {
      Logger.log("  ‚ùå Callback does not match 'back_to_allocation'");
    }
    
    // Cleanup
    clearTempTransaction(testChatId);
    
  } catch (error) {
    Logger.log("  ‚ùå Error in simulate callback: " + error.toString());
  }
  
  Logger.log("=== SIMULATE BACK TO ALLOCATION CALLBACK COMPLETED ===");
}

// Debug ch·ªçn h≈© sau khi back
function debugAllocationAfterBack() {
  Logger.log("=== DEBUG ALLOCATION AFTER BACK ===");
  
  var testUserId = "USER_DEBUG_AFTER_BACK";
  var testChatId = 123456789;
  
  try {
    // 1. Setup temp transaction nh∆∞ flow th·ª±c t·∫ø (expense)
    Logger.log("1. Setup temp transaction nh∆∞ expense flow");
    var tempTransaction = {
      date: new Date().toISOString().split('T')[0],
      description: "c", 
      amount: 9000,
      allocation: "Chi ti√™u thi·∫øt y·∫øu",
      type: "ChiTieu" // T·ª´ expense flow (line 831)
    };
    
    saveTempTransaction(testChatId, tempTransaction);
    Logger.log("  Saved temp transaction: " + JSON.stringify(tempTransaction));
    
    // 2. Test callback data format t·ª´ allocation keyboard
    Logger.log("2. Testing allocation keyboard callback format");
    var allocKeyboard = createAllocationKeyboard(null);
    
    if (allocKeyboard && allocKeyboard.inline_keyboard) {
      var firstButton = allocKeyboard.inline_keyboard[0][0]; // "Chi ti√™u thi·∫øt y·∫øu"
      var secondButton = allocKeyboard.inline_keyboard[0][1]; // "H∆∞·ªüng th·ª•"
      
      Logger.log("  First button: " + firstButton.text + " -> " + firstButton.callback_data);
      Logger.log("  Second button: " + secondButton.text + " -> " + secondButton.callback_data);
      
      // 3. Simulate ch·ªçn h≈© ƒë·∫ßu ti√™n (allocation_0)
      Logger.log("3. Simulating allocation_0 callback");
      var data = firstButton.callback_data; // Should be "allocation_0"
      
      if (data.startsWith('allocation_')) {
        Logger.log("  ‚úÖ Callback matches allocation_ pattern: " + data);
        
        // Parse allocation index
        var parts = data.split('_');
        var allocationIndex = parseInt(parts[1]);
        var allocation = allocations[allocationIndex];
        
        Logger.log("  Parsed allocationIndex: " + allocationIndex);
        Logger.log("  Parsed allocation: " + allocation);
        
        if (allocation) {
          Logger.log("  ‚úÖ Allocation found: " + allocation);
          
          // Get temp transaction
          var retrievedTemp = getTempTransaction(testChatId);
          Logger.log("  Retrieved temp transaction: " + JSON.stringify(retrievedTemp));
          
          if (retrievedTemp) {
            Logger.log("  ‚úÖ Temp transaction found");
            
            // Update allocation
            retrievedTemp.allocation = allocation;
            saveTempTransaction(testChatId, retrievedTemp);
            Logger.log("  ‚úÖ Updated temp transaction allocation to: " + allocation);
            
            // Test subcategory keyboard creation
            var subKeyboard = createSubCategoryKeyboard(allocation, false, null, null);
            if (subKeyboard && subKeyboard.inline_keyboard) {
              Logger.log("  ‚úÖ Subcategory keyboard created");
              Logger.log("  Number of subcategory rows: " + subKeyboard.inline_keyboard.length);
              
              // Test message text
              var messageText = (retrievedTemp.type === 'ThuNhap' ? 'Thu nh·∫≠p: ' : 'Chi ti√™u: ') + 
                retrievedTemp.description + " " + 
                formatNumberWithSeparator(retrievedTemp.amount) + " v√†o h≈© " + allocation + 
                "\nVui l√≤ng ch·ªçn nh√£n c·ª• th·ªÉ:";
              
              Logger.log("  Message would be: " + messageText);
              Logger.log("  ‚úÖ Allocation after back flow completed successfully");
              
            } else {
              Logger.log("  ‚ùå Failed to create subcategory keyboard");
            }
          } else {
            Logger.log("  ‚ùå No temp transaction found");
          }
        } else {
          Logger.log("  ‚ùå Allocation not found for index: " + allocationIndex);
        }
      } else {
        Logger.log("  ‚ùå Callback does not match allocation_ pattern: " + data);
      }
    } else {
      Logger.log("  ‚ùå Failed to create allocation keyboard");
    }
    
    // Cleanup
    clearTempTransaction(testChatId);
    
  } catch (error) {
    Logger.log("  ‚ùå Error in allocation after back debug: " + error.toString());
  }
  
  Logger.log("=== DEBUG ALLOCATION AFTER BACK COMPLETED ===");
}

// Test function ƒë·ªÉ test edit message functionality
function testEditMessage() {
  Logger.log("=== TEST EDIT MESSAGE FUNCTIONALITY ===");
  
  var testChatId = 123456789;
  var testMessageId = 999999; // Fake message ID for testing
  
  try {
    // 1. Test edit text without keyboard
    Logger.log("1. Testing editText without keyboard");
    var result1 = editText(testChatId, testMessageId, "Test message 1: ƒê√¢y l√† test edit text", null);
    Logger.log("  editText result: " + result1);
    
    // 2. Test edit text with keyboard
    Logger.log("2. Testing editText with keyboard");
    var testKeyboard = createAllocationKeyboard(null);
    var result2 = editText(testChatId, testMessageId, "Test message 2: V·ªõi keyboard ch·ªçn h≈©", testKeyboard);
    Logger.log("  editText with keyboard result: " + result2);
    
    // 3. Test format validation
    Logger.log("3. Testing formatNumberWithSeparator integration");
    var testText = "Chi ti√™u: abc 50000 v√†o h≈© test";
    var result3 = editText(testChatId, testMessageId, testText, null);
    Logger.log("  Text with number formatting result: " + result3);
    
    Logger.log("‚úÖ Edit message functionality test completed");
    Logger.log("Note: Actual edit calls may fail with fake messageId, but function structure is tested");
    
  } catch (error) {
    Logger.log("‚ùå Error in edit message test: " + error.toString());
  }
  
  Logger.log("=== TEST EDIT MESSAGE FUNCTIONALITY COMPLETED ===");
}

// H√†m test simulate nh·∫•n n√∫t ch·ªânh s·ª≠a
function testEditButton() {
  Logger.log("=== TEST EDIT BUTTON ===");
  
  var testUserId = "TEST_EDIT_123";
  
  // 1. T·∫°o mock transaction data trong cache tr∆∞·ªõc
  var mockTransaction = {
    userId: testUserId,
    date: new Date(),
    description: "C√† ph√™ s√°ng",
    amount: 25000,
    allocation: "Chi ti√™u thi·∫øt y·∫øu",
    type: "ChiTieu", 
    subCategory: "ƒÇn ngo√†i",
    rowIndex: 3
  };
  
  Logger.log("1. Saving mock transaction to cache...");
  saveTransactionForEdit(testUserId, mockTransaction); // Backward compatibility - no transactionId
  
  // 2. Simulate callback edit_transaction  
  Logger.log("2. Simulating edit_transaction callback...");
  
  // T·∫°o mock request nh∆∞ Telegram g·ª≠i
  var mockRequest = {
    callback_query: {
      from: {
        id: testUserId,
        first_name: "TestUser"
      },
      data: "edit_transaction"
    }
  };
  
  // Simulate doPost v·ªõi mock request
  var e = {
    postData: {
      contents: JSON.stringify(mockRequest)
    }
  };
  
  Logger.log("3. Calling doPost with mock request...");
  try {
    doPost(e);
    Logger.log("‚úÖ doPost executed successfully");
  } catch (error) {
    Logger.log("‚ùå doPost failed: " + error.toString());
  }
  
  Logger.log("=== TEST EDIT BUTTON COMPLETED ===");
}

function getSheet(userId) {
  

  
  var usersSpreadsheet = SpreadsheetApp.openById(main_sheet);
  var usersSheet = usersSpreadsheet.getSheetByName('UserList'); 

  
  var userData = usersSheet.getDataRange().getValues();
  var sheetId = null;
  for (var i = 0; i < userData.length; i++) {
    if (userData[i][0] === userId) {
      sheetId = userData[i][1];
      break;
    }
  }

  if (!sheetId) {
    
    var newSpreadsheet = SpreadsheetApp.create('Expense Tracker for ' + userId);
    sheetId = newSpreadsheet.getId();
    
    // L·∫•y th∆∞ m·ª•c "Money Capybara"
    var targetFolder = getOrCreateFolder('Money Capybara');
    
    // Di chuy·ªÉn file v√†o th∆∞ m·ª•c
    var file = DriveApp.getFileById(sheetId);
    
    // Th√™m file v√†o th∆∞ m·ª•c ƒë√≠ch
    targetFolder.addFile(file);
    
    // X√≥a file kh·ªèi th∆∞ m·ª•c g·ªëc (My Drive)
    var rootFolder = DriveApp.getRootFolder();
    rootFolder.removeFile(file);

    
    usersSheet.appendRow([userId, sheetId]);

    
    var sheet = newSpreadsheet.getActiveSheet();
    sheet.getRange('A1:F1').setValues([
      ["Date", "Description", "Amount", "Allocation", "Type", "SubCategory"]
    ]);

    
    sheet.deleteColumns(7, 20); 

    
    var numRows = sheet.getMaxRows();
    if (numRows > 2) {
      sheet.deleteRows(3, numRows - 2); 
    }
  }

  
  var sheet = SpreadsheetApp.openById(sheetId).getActiveSheet();
  return sheet;
}


function sendTotalIncomeSummary(chatId, userId) {
  var totalIncome = getTotalAmountByType(userId, "ThuNhap");
  var totalExpenses = getTotalAmountByType(userId, "ChiTieu");
  var currentBalance = getCurrentBalance(userId);

  var message = "- T·ªïng thu nh·∫≠p c·ªßa b·∫°n l√†: " + totalIncome.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "\n";
  message += "- S·ªë ti·ªÅn hi·ªán t·∫°i c·ªßa b·∫°n l√†: " + currentBalance.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "\n";



  var menuchithu = {
    "inline_keyboard": [
      [
        {
          text: 'Xem T·ªïng Chi Ti√™u',
          callback_data: 'totalchi'
        },
        {
          text: 'Xem Chi Ti·∫øt C√°c H≈©',
          callback_data: 'getTotalAllocationBalances'
        }
      ]
    ]
  };

  sendText(chatId, message, menuchithu);
}

function getTotalAmountByType(userId, type) {
  var sheet = getSheet(userId);
  var data = sheet
    .getDataRange()
    .getValues();
  var total = 0;
  for (var i = 1; i < data.length; i++) {
    if (data[i][4] === type) {
      total += data[i][2];
    }
  }
  return total;
}

function sendTransactionHistoryPart(chatId, userId, transactions, chunkIndex, chunkSize, totalChunks, totalThuNhap, totalChiTieu) {
  var startIndex = chunkIndex * chunkSize;
  var endIndex = Math.min((chunkIndex + 1) * chunkSize, transactions.length);
  var message = "L·ªãch s·ª≠ chi ti√™u c·ªßa b·∫°n (Trang " + (chunkIndex + 1) + " / " + totalChunks + "):\n";

  function formatTransaction(transaction, index) {
    var formattedDate = new Intl.DateTimeFormat('vi-VN', { day: 'numeric', month: 'numeric', year: 'numeric' }).format(transaction.date);
    var formattedAmount = formatNumberWithSeparator(transaction.amount);

    var typeLabel = "";
    var transactionAmount = transaction.amount;

    if (transaction.type === "ChiTieu") {
      typeLabel = "Chi ti√™uüí∏";
      transactionAmount = "<s>-" + formattedAmount + "</s>";
      totalChiTieu += transaction.amount;
    } else if (transaction.type === "ThuNhap") {
      typeLabel = "Thu nh·∫≠püí∞";
      transactionAmount = "<b>+" + formattedAmount + "</b>";
      totalThuNhap += transaction.amount;
    } else {
      typeLabel = transaction.type;
    }

    var transactionString = `
${index + 1}. Ng√†y: ${formattedDate}
- M√¥ t·∫£: ${transaction.description}
- S·ªë ti·ªÅn: ${transactionAmount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
- H≈©: ${transaction.allocation}
<i>- Lo·∫°i:</i> ${typeLabel}
`;

    return transactionString;
  }

  for (var i = startIndex; i < endIndex; i++) {
    var transaction = transactions[i];
    message += formatTransaction(transaction, i);
  }

  
  if (chunkIndex == totalChunks - 1) {
    var currentBalance = getCurrentBalance(userId);
    message += "<b>üí∏ T·ªïng Chi ti√™u: <s>" + totalChiTieu.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</s></b>\n";
    message += "<b>üí∞ T·ªïng Thu nh·∫≠p: " + totalThuNhap.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</b>\n";
    message += "<b>üíπ S·ªë ti·ªÅn hi·ªán t·∫°i c·ªßa b·∫°n l√†: " + currentBalance.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</b>\n";

  }

  
  sendText(chatId, message);

  
  if (chunkIndex < totalChunks - 1) {
    Utilities.sleep(3000); 
    sendTransactionHistoryPart(chatId, userId, transactions, chunkIndex + 1, chunkSize, totalChunks, totalThuNhap, totalChiTieu);
  }
}


function sendTransactionHistory(chatId, userId) {
  var transactions = getTransactionHistory(userId);
  if (transactions.length === 0) {
    sendText(chatId, "B·∫°n ch∆∞a c√≥ chi ti√™u n√†o.");
    return;
  }

  var chunkSize = 16; 
  var totalChunks = Math.ceil(transactions.length / chunkSize);
  var totalThuNhap = 0; 
  var totalChiTieu = 0; 

  sendTransactionHistoryPart(chatId, userId, transactions, 0, chunkSize, totalChunks, totalThuNhap, totalChiTieu);
}

function getTransactionHistory(userId) {
  var sheet = getSheet(userId);
  var data = sheet
    .getDataRange()
    .getValues();
  var transactions = [];
  for (var i = 1; i < data.length; i++) {
    var transaction = {
      date: data[i][0],
      description: data[i][1],
      amount: data[i][2],
      allocation: data[i][3],
      type: data[i][4] 
    };
    transactions.push(transaction);
  }
  return transactions;
}


function formatDate(dateStr) {
  var date = new Date(dateStr);
  var day = date.getDate();
  var month = date.getMonth() + 1;
  var year = date.getFullYear();
  return day + "/" + month + "/" + year;
}


function sendTransactionHistoryByDateRange(chatId, userId, startDate, endDate) {
  var transactions = getTransactionHistoryByDateRange(userId, startDate, endDate);
  var chunkSize = 16;
  var totalChunks = Math.ceil(transactions.length / chunkSize);

  
  var totalChiTieu = 0;
  var totalThuNhap = 0;

  function sendTransactionHistoryPart(chunkIndex) {
    var message = "L·ªãch s·ª≠ chi ti√™u t·ª´ " + formatDate(startDate) + " ƒë·∫øn " + formatDate(endDate) +
      " (Trang " + (chunkIndex + 1) + " / " + totalChunks + "):\n\n";

    var startIndex = chunkIndex * chunkSize;
    var endIndex = Math.min((chunkIndex + 1) * chunkSize, transactions.length);

    for (var i = startIndex; i < endIndex; i++) {
      var transaction = transactions[i];
      var formattedDate = formatDate(transaction.date);
      var typeLabel = "";
      var transactionAmount = transaction.amount;
      var formatTransactionAmount = new Intl.NumberFormat('vi-VN').format(transactionAmount);

      if (transaction.type === "ChiTieu") {
        typeLabel = "Chi ti√™uüí∏";
        transactionAmount = "<s>-" + formatTransactionAmount + "ƒë</s>";
        totalChiTieu += transaction.amount;
      } else if (transaction.type === "ThuNhap") {
        typeLabel = "Thu nh·∫≠püí∞";
        transactionAmount = "<b>+" + formatTransactionAmount + "ƒë</b>";
        totalThuNhap += transaction.amount;
      } else {
        typeLabel = transaction.type;
      }

      message += `${i + 1}. Ng√†y: ${formattedDate}\n`;
      message += "- M√¥ t·∫£: " + transaction.description + "\n";
      message += "- S·ªë ti·ªÅn: " + transactionAmount + "\n";
      message += "- H≈©: " + transaction.allocation + "\n";
      message += "<i>- Lo·∫°i: " + typeLabel + "</i>\n\n";
    }

    
    if (chunkIndex === totalChunks - 1) {
      var currentBalance = getCurrentBalance(userId);
      message += "<b>üí∏ T·ªïng Chi ti√™u: <s>" + totalChiTieu.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</s></b>\n";
      message += "<b>üí∞ T·ªïng Thu nh·∫≠p: " + totalThuNhap.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</b>\n";
      message += "<b>üíπ S·ªë ti·ªÅn hi·ªán t·∫°i: " + currentBalance.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "</b>\n";
    }

    sendText(chatId, message);

    if (chunkIndex < totalChunks - 1) {
      Utilities.sleep(3000);
      sendTransactionHistoryPart(chunkIndex + 1);
    }
  }

  if (transactions.length === 0) {
    sendText(chatId, "Kh√¥ng c√≥ giao d·ªãch n√†o trong kho·∫£ng th·ªùi gian n√†y.");
  } else {
    sendTransactionHistoryPart(0);
  }
}






function getTransactionHistoryByDateRange(userId, startDate, endDate) {
  var sheet = getSheet(userId);
  var data = sheet
    .getDataRange()
    .getValues();
  var transactions = [];
  for (var i = 1; i < data.length; i++) {
    var transactionDate = new Date(data[i][0]);
    if (transactionDate >= startDate && transactionDate < endDate) {
      var transaction = {
        date: data[i][0],
        description: data[i][1],
        amount: data[i][2],
        allocation: data[i][3],
        type: data[i][4] 
      };
      transactions.push(transaction);
    }
  }
  return transactions;
}

function formatDate(date) {
  var day = date.getDate();
  var month = date.getMonth() + 1;
  var year = date.getFullYear();
  return day + "/" + month + "/" + year;
}

function deleteTransactionByRow(userId, rowToDelete) {
  var sheet = getSheet(userId);
  var data = sheet.getDataRange().getValues();

  
  var rowIndex = rowToDelete - 1; 

  if (rowIndex >= 0 && rowIndex < data.length) {
    
    sheet.deleteRow(rowIndex + 2); 
    return true; 
  } else {
    return false; 
  }
}


function isValidEmail(email) {
  var re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return re.test(email);
}



function saveEmailToSheet(userId, email) {
  var usersSpreadsheet = SpreadsheetApp.openById(main_sheet);
  var usersSheet = usersSpreadsheet.getSheetByName('UserList'); 

  var data = usersSheet.getDataRange().getValues();

  for (var i = 0; i < data.length; i++) {
    if (data[i][0] === userId) { 
      usersSheet.getRange(i + 1, 3).setValue(email); 
      break;
    }
  }
}

function sendBankOptions(chatId) {
  var bankKeyboard = {
    "inline_keyboard": [
      [
        { text: 'VIB', callback_data: 'bank_VIB' },
        { text: 'CAKE', callback_data: 'bank_CAKE' },
        { text: 'VPBank', callback_data: 'bank_VPBank' },
        { text: 'ACB', callback_data: 'bank_ACB' }
      ]
    ]
  };
  sendText(chatId, "Vui l√≤ng ch·ªçn ng√¢n h√†ng c·ªßa b·∫°n:", bankKeyboard);
}


function saveBankToSheet(userId, bankName) {
  var usersSpreadsheet = SpreadsheetApp.openById(main_sheet);
  var usersSheet = usersSpreadsheet.getSheetByName('UserList'); 

  var data = usersSheet.getDataRange().getValues();

  for (var i = 0; i < data.length; i++) {
    if (data[i][0] === userId) { 
      usersSheet.getRange(i + 1, 4).setValue(bankName); 
      break;
    }
  }
}


function stripHtml(html) {
  var doc = DocumentApp.create('temp');
  doc.getBody().setText(html);
  var text = doc.getBody().getText();
  DriveApp.getFileById(doc.getId()).setTrashed(true); 
  return text;
}

function sendToGeminiAPI(emailBody) {
  const url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=" + gemini_token;

  const payload = JSON.stringify({
    contents: [
      {
        parts: [
          {
            text: "B·∫°n l√† m·ªôt AI Chi ti√™u, h√£y cho t√¥i ti·ªÅn chi ti√™u, n·ªôi dung(N·ªôi dung, di·ªÖn gi·∫£i) giao d·ªãch v√† lo·∫°i ThuNhap hay ChiTieu, n·∫øu kh√¥ng ph·∫£i c√≥ r√µ s·ªë ti·ªÅn, n·ªôi dung v√† lo·∫°i Thu nh·∫≠p/Chi ti√™u th√¨ ph·∫£n h·ªìi l·∫°i tr·ªëng cho t√¥i, ƒë√¢y l√† mail: " + emailBody
          }
        ]
      }
    ],
    generationConfig: {
      temperature: 0.55,
      topP: 0.95,
      topK: 40,
      maxOutputTokens: 8192,
      responseMimeType: "application/json",
      responseSchema: {
        type: "object",
        properties: {
          amount: { type: "string" },
          type: { type: "string" },
          description: { type: "string" }
        }
      }
    }
  });

  const options = {
    method: "POST",
    contentType: "application/json",
    payload: payload
  };

  try {
    const response = UrlFetchApp.fetch(url, options); 
    const responseData = JSON.parse(response.getContentText()); 

    
    const candidates = responseData.candidates;
    if (candidates && candidates.length > 0) {
      const content = candidates[0].content; 
      const parts = content.parts;
      if (parts && parts.length > 0) {
        const text = parts[0].text; 
        return JSON.parse(text); 
      }
    }
    return null; 
  } catch (error) {
    Logger.log("L·ªói khi g·ªçi API: " + error.message);
    return null; 
  }
}



var geminiApiKeys = getApiKeys();


function getRandomGeminiApiKey() {
  var randomIndex = Math.floor(Math.random() * geminiApiKeys.length);
  return geminiApiKeys[randomIndex];
}




function processVoiceMessage(fileId, chatId) {
  var telegramUrl = "https://api.telegram.org/bot" + token;

  
  var getFileUrl = telegramUrl + "/getFile?file_id=" + fileId;
  var getFileResponse = UrlFetchApp.fetch(getFileUrl);
  var fileInfo = JSON.parse(getFileResponse.getContentText());
  if (!fileInfo.ok) {
    Logger.log("Kh√¥ng l·∫•y ƒë∆∞·ª£c file t·ª´ Telegram.");
    sendText(chatId, "Xin l·ªói, kh√¥ng th·ªÉ x·ª≠ l√Ω tin nh·∫Øn voice c·ªßa b·∫°n.");
    return;
  }
  var filePath = fileInfo.result.file_path;
  var voiceUrl = "https://api.telegram.org/file/bot" + token + "/" + filePath;

  
  var voiceResponse = UrlFetchApp.fetch(voiceUrl);
  var blob = voiceResponse.getBlob();
  var mimeType = blob.getContentType();
  if (mimeType === "application/octet-stream") {
    mimeType = "audio/ogg";
  }
  var numBytes = blob.getBytes().length;
  var displayName = "voice_file";

  
  var apiKey = getRandomGeminiApiKey();
  var initUrl = "https://generativelanguage.googleapis.com/upload/v1beta/files?key=" + apiKey;
  var initHeaders = {
    "X-Goog-Upload-Protocol": "resumable",
    "X-Goog-Upload-Command": "start",
    "X-Goog-Upload-Header-Content-Length": String(numBytes),
    "X-Goog-Upload-Header-Content-Type": mimeType,
    "Content-Type": "application/json"
  };
  var initPayload = JSON.stringify({ file: { display_name: displayName } });
  var initOptions = {
    "method": "post",
    "headers": initHeaders,
    "payload": initPayload,
    "muteHttpExceptions": true
  };

  var initResponse = UrlFetchApp.fetch(initUrl, initOptions);
  var initResponseHeaders = initResponse.getAllHeaders();
  var uploadUrl = initResponseHeaders["X-Goog-Upload-Url"] || initResponseHeaders["x-goog-upload-url"];
  if (!uploadUrl) {
    Logger.log("Kh√¥ng l·∫•y ƒë∆∞·ª£c upload URL: " + initResponse.getContentText());
    sendText(chatId, "L·ªói khi x·ª≠ l√Ω file voice.");
    return;
  }

  
  var uploadHeaders = {
    "X-Goog-Upload-Offset": "0",
    "X-Goog-Upload-Command": "upload, finalize"
  };
  var uploadOptions = {
    "method": "post",
    "headers": uploadHeaders,
    "payload": blob.getBytes(),
    "muteHttpExceptions": true
  };

  var uploadResponse = UrlFetchApp.fetch(uploadUrl, uploadOptions);
  var uploadResult = JSON.parse(uploadResponse.getContentText());
  var fileUri = uploadResult.file.uri;
  if (!fileUri) {
    Logger.log("Upload th·∫•t b·∫°i: " + uploadResponse.getContentText());
    sendText(chatId, "Upload file voice th·∫•t b·∫°i.");
    return;
  }
  Logger.log("File URI: " + fileUri);

  
  var generateUrl = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=" + apiKey;
  var generatePayload = JSON.stringify({
    contents: [{
      parts: [
        { "text": 'B·∫°n l√† m·ªôt AI Chi ti√™u. H√£y tr√≠ch xu·∫•t th√¥ng tin v·ªÅ s·ªë ti·ªÅn, n·ªôi dung v√† lo·∫°i giao d·ªãch (type lu√¥n ƒë·∫∑t l√†: Thu nh·∫≠p ho·∫∑c Chi ti√™u) t·ª´ gi·ªçng n√≥i. L∆∞u √Ω: nh·∫≠n di·ªán c√°c bi·ªÉu th·ª©c r√∫t g·ªçn v√† c√°c t·ª´ l√≥ng/ƒë·ªãa ph∆∞∆°ng li√™n quan ƒë·∫øn ti·ªÅn t·ªá. V√≠ d·ª•: ‚Äúc·ªß‚Äù t∆∞∆°ng ƒë∆∞∆°ng v·ªõi ‚Äútri·ªáu", ‚Äúk ho·∫∑c ca ho·∫∑c ka‚Äù t∆∞∆°ng ƒë∆∞∆°ng v·ªõi ‚ÄútrƒÉm‚Äù, ‚Äúngh√¨n‚Äù ho·∫∑c ‚Äúng√†n‚Äù t∆∞∆°ng ƒë∆∞∆°ng v·ªõi ‚Äúngh√¨n‚Äù, ‚Äúty‚Äù ho·∫∑c ‚Äút·ªâ‚Äù t∆∞∆°ng ƒë∆∞∆°ng v·ªõi ‚Äút·ª∑‚Äù, ‚Äúl√≠t‚Äù t∆∞∆°ng ƒë∆∞∆°ng v·ªõi ‚ÄútrƒÉm‚Äù (c√°c t·ª´ r√∫t g·ªçn n√†y ch·ªâ √°p d·ª•ng khi ƒëi k√®m v·ªõi gi√° ti·ªÅn). N·∫øu kh√¥ng nghe r√µ ho·∫∑c kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c s·ªë ti·ªÅn, h√£y tr·∫£ v·ªÅ r·ªóng {}. Tuy·ªát ƒë·ªëi kh√¥ng ƒë∆∞·ª£c t·ª± suy ƒëo√°n hay ch·∫ø th√¥ng tin.' },
        { "file_data": { "mime_type": mimeType, "file_uri": fileUri } }
      ]
    }],
    generationConfig: {
      "temperature": 0.2,
      "topK": 64,
      "topP": 0.95,
      "maxOutputTokens": 8192,
      "responseMimeType": "application/json",
      "responseSchema": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "amount": { "type": "string" },
            "type": { "type": "string" },
            "description": { "type": "string" }
          }
        }
      }
    }
  });

  var generateOptions = {
    "method": "post",
    "contentType": "application/json",
    "payload": generatePayload,
    "muteHttpExceptions": true
  };

  var generateResponse = UrlFetchApp.fetch(generateUrl, generateOptions);
  Logger.log("Response: " + generateResponse.getContentText());

  
  
  try {
    var responseData = JSON.parse(generateResponse.getContentText());
    if (responseData && responseData.candidates && responseData.candidates.length > 0) {
      var content = responseData.candidates[0].content;
      if (content.parts && content.parts.length > 0) {
        var resultText = content.parts[0].text;
        
        
        var transactions = JSON.parse(resultText);

        
        recordTransactionsFromAI(chatId, transactions);
      } else {
        sendText(chatId, "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c n·ªôi dung ph·∫£n h·ªìi t·ª´ h·ªá th·ªëng AI.");
      }
    } else {
      sendText(chatId, "AI kh√¥ng nghe r√µ ƒë∆∞·ª£c Voice, vui l√≤ng th·ª≠ l·∫°i.");
    }
  } catch (err) {
    Logger.log("L·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi: " + err);
    sendText(chatId, "AI kh√¥ng nghe r√µ ƒë∆∞·ª£c Voice, vui l√≤ng th·ª≠ l·∫°i.");
  }
}

function recordTransactionsFromAI(chatId, transactions) {
  
  var isInvalid = transactions.some(function(tx) {
    return !tx.amount || tx.amount.trim() === "";
  });
  
  if (isInvalid) {
    sendText(chatId, "AI kh√¥ng nghe r√µ ƒë∆∞·ª£c Voice, vui l√≤ng th·ª≠ l·∫°i.");
    return;
  }
  
  var userId = chatId; 
  var date = new Date();
  var formattedDate = formatDate(date); 
  var messages = [];
  
  transactions.forEach(function (tx) {
    
    var amount = parseInt(tx.amount.replace(/,/g, ''), 10);
    var description = tx.description;
    
    
    var typeLower = tx.type.toLowerCase();
    var transactionType = typeLower.includes("thu") ? "ThuNhap" : typeLower.includes("chi") ? "ChiTieu" : tx.type;
    
    
    var allocation = "Chi ti√™u thi·∫øt y·∫øu";
    
    
    addTransactionData(userId, date, description, amount, allocation, transactionType, "");
    
    
    if (transactionType === "ThuNhap") {
      messages.push("B·∫°n ƒë√£ thu nh√¢p: " + description + " " + amount.toLocaleString("vi-VN") +
        " v√†o ng√†y " + formattedDate + " v√† ph√¢n b·ªï thu nh·∫≠p c·ªßa b·∫°n v√†o h≈© " + allocation + ".");
    } else if (transactionType === "ChiTieu") {
      messages.push("B·∫°n ƒë√£ chi ti√™u: " + description + " " + amount.toLocaleString("vi-VN") +
        " v√†o ng√†y " + formattedDate + " v√† ph√¢n b·ªï chi ti√™u c·ªßa b·∫°n v√†o h≈© " + allocation + ".");
    } else {
      messages.push("Giao d·ªãch: " + description + " " + amount.toLocaleString("vi-VN") +
        " v√†o ng√†y " + formattedDate + ".");
    }
  });
  
  
  sendText(chatId, messages.join("\n"));
}






const bankDomains = {
  "VIB": "vib.com.vn",
  "CAKE": "no-reply@cake.vn",
  "VPBank": ["vpbankonline@vpb.com.vn", "customercare@care.vpb.com.vn"],
  "ACB": "mailalert@acb.com.vn"
};

function checkEmail() {
  const usersSpreadsheet = SpreadsheetApp.openById(main_sheet);
  const usersSheet = usersSpreadsheet.getSheetByName('UserList');
  const data = usersSheet.getDataRange().getValues();

  for (let k = 1; k < data.length; k++) { 
    const emailToCheck = data[k][2]; 
    if (emailToCheck) {
      const bank = data[k][3]; 
      
      if (!bankDomains.hasOwnProperty(bank)) {
        Logger.log("Kh√¥ng c√≥ ng√¢n h√†ng ph√π h·ª£p: " + bank);
        continue;
      }
      
      let searchQuery = '';
      const domain = bankDomains[bank];
      
      if (bank === "VPBank" && Array.isArray(domain)) {
        searchQuery = '(' + domain.join(' OR ') + ') to:' + emailToCheck;
      } else {
        searchQuery = domain + ' to:' + emailToCheck;
      }
      
      
      searchQuery += " is:unread";
      
      const threads = GmailApp.search(searchQuery);
      for (let i = 0; i < threads.length; i++) {
        const messages = threads[i].getMessages();
        for (let j = 0; j < messages.length; j++) {
          const message = messages[j];
          const emailBody = message.getBody();
          const timestamp = message.getDate();
          const timestampEpoch = timestamp.getTime();

          const apiResponse = sendToGeminiAPI(emailBody); 
          if (apiResponse && apiResponse.amount && apiResponse.type && apiResponse.description) {
            const amount = parseInt(apiResponse.amount.replace(/,/g, '').trim(), 10);
            const explanation = apiResponse.description;
            const type = apiResponse.type;

            const targetSpreadsheetId = data[k][1];
            const targetSpreadsheet = SpreadsheetApp.openById(targetSpreadsheetId);
            const targetSheet = targetSpreadsheet.getActiveSheet();
            const targetData = targetSheet.getDataRange().getValues();

            let alreadyRecorded = false;
            for (let m = 1; m < targetData.length; m++) { 
              const recordedTimestamp = targetData[m][5];
              if (recordedTimestamp === timestampEpoch) {
                alreadyRecorded = true;
                break;
              }
            }
            if (!alreadyRecorded) {
              targetSheet.appendRow([timestamp, explanation, amount, "Chi ti√™u thi·∫øt y·∫øu", type, "", timestampEpoch]);
              Logger.log("ƒê√£ ghi n·ªôi dung v√†o sheet.");
            } else {
              Logger.log("N·ªôi dung ƒë√£ ƒë∆∞·ª£c ghi tr∆∞·ªõc ƒë√≥.");
            }
          } else {
            Logger.log("API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá ho·∫∑c n·ªôi dung tr·ªëng.");
          }
        }
        threads[i].markRead();
      }
    } else {
      Logger.log("B·ªè qua h√†ng r·ªóng ·ªü d√≤ng: " + (k + 1));
    }
  }
}